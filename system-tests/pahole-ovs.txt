struct dirent {
	__ino_t                    d_ino;                /*     0     8 */
	__off_t                    d_off;                /*     8     8 */
	short unsigned int         d_reclen;             /*    16     2 */
	unsigned char              d_type;               /*    18     1 */
	char                       d_name[256];          /*    19   256 */
	/* --- cacheline 4 boundary (256 bytes) was 19 bytes ago --- */

	/* size: 280, cachelines: 5, members: 5 */
	/* padding: 5 */
	/* last cacheline: 24 bytes */
};
struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct mntent {
	char *                     mnt_fsname;           /*     0     8 */
	char *                     mnt_dir;              /*     8     8 */
	char *                     mnt_type;             /*    16     8 */
	char *                     mnt_opts;             /*    24     8 */
	int                        mnt_freq;             /*    32     4 */
	int                        mnt_passno;           /*    36     4 */

	/* size: 40, cachelines: 1, members: 6 */
	/* last cacheline: 40 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct __pthread_internal_list {
	struct __pthread_internal_list * __prev;         /*     0     8 */
	struct __pthread_internal_list * __next;         /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct __pthread_mutex_s {
	int                        __lock;               /*     0     4 */
	unsigned int               __count;              /*     4     4 */
	int                        __owner;              /*     8     4 */
	unsigned int               __nusers;             /*    12     4 */
	int                        __kind;               /*    16     4 */
	short int                  __spins;              /*    20     2 */
	short int                  __elision;            /*    22     2 */
	__pthread_list_t           __list;               /*    24    16 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct statvfs {
	long unsigned int          f_bsize;              /*     0     8 */
	long unsigned int          f_frsize;             /*     8     8 */
	__fsblkcnt_t               f_blocks;             /*    16     8 */
	__fsblkcnt_t               f_bfree;              /*    24     8 */
	__fsblkcnt_t               f_bavail;             /*    32     8 */
	__fsfilcnt_t               f_files;              /*    40     8 */
	__fsfilcnt_t               f_ffree;              /*    48     8 */
	__fsfilcnt_t               f_favail;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long unsigned int          f_fsid;               /*    64     8 */
	long unsigned int          f_flag;               /*    72     8 */
	long unsigned int          f_namemax;            /*    80     8 */
	int                        __f_spare[6];         /*    88    24 */

	/* size: 112, cachelines: 2, members: 12 */
	/* last cacheline: 48 bytes */
};
struct ds {
	char *                     string;               /*     0     8 */
	size_t                     length;               /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hmap_node {
	size_t                     hash;                 /*     0     8 */
	struct hmap_node *         next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct hmap {
	struct hmap_node * *       buckets;              /*     0     8 */
	struct hmap_node *         one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n;                    /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct shash {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct latch {
	int                        fds[2];               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct ovs_list {
	struct ovs_list *          prev;                 /*     0     8 */
	struct ovs_list *          next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovs_mutex {
	pthread_mutex_t            lock;                 /*     0    40 */
	const char  *              where;                /*    40     8 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ovsthread_once {
	_Bool                      done;                 /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct process_info {
	long unsigned int          vsz;                  /*     0     8 */
	long unsigned int          rss;                  /*     8     8 */
	long long int              booted;               /*    16     8 */
	int                        crashes;              /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              uptime;               /*    32     8 */
	long long int              cputime;              /*    40     8 */
	int                        core_id;              /*    48     4 */
	char                       name[18];             /*    52    18 */
	/* --- cacheline 1 boundary (64 bytes) was 6 bytes ago --- */

	/* size: 72, cachelines: 2, members: 8 */
	/* sum members: 66, holes: 1, sum holes: 4 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct smap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct vlog_module {
	struct ovs_list            list;                 /*     0    16 */
	const char  *              name;                 /*    16     8 */
	int                        levels[3];            /*    24    12 */
	int                        min_level;            /*    36     4 */
	_Bool                      honor_rate_limits;    /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct eth_addr {
	union {
		uint8_t            ea[6];                /*           6 */
		ovs_be16           be16[3];              /*           6 */
	};                                               /*     0     6 */

	/* size: 6, cachelines: 1, members: 1 */
	/* last cacheline: 6 bytes */
};
struct eth_addr64 {
	union {
		uint8_t            ea64[8];              /*           8 */
		ovs_be16           be16[4];              /*           8 */
	};                                               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct geneve_opt {
	ovs_be16                   opt_class;            /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    length:5;             /*     3: 3  1 */
	uint8_t                    r3:1;                 /*     3: 2  1 */
	uint8_t                    r2:1;                 /*     3: 1  1 */
	uint8_t                    r1:1;                 /*     3: 0  1 */

	/* size: 4, cachelines: 1, members: 6 */
	/* last cacheline: 4 bytes */
};
struct sockaddr_storage {
	sa_family_t                ss_family;            /*     0     2 */
	char                       __ss_padding[118];    /*     2   118 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */
	long unsigned int          __ss_align;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 3 */
};
struct sockaddr_in {
	sa_family_t                sin_family;           /*     0     2 */
	in_port_t                  sin_port;             /*     2     2 */
	struct in_addr             sin_addr;             /*     4     4 */
	unsigned char              sin_zero[8];          /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct in_addr {
	in_addr_t                  s_addr;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct in6_addr {
	union {
		uint8_t            __u6_addr8[16];       /*          16 */
		uint16_t           __u6_addr16[8];       /*          16 */
		uint32_t           __u6_addr32[4];       /*          16 */
	} __in6_u;                                       /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata {
	union {
		uint64_t           map;                  /*           8 */
		uint8_t            len;                  /*           1 */
	} present;                                       /*     0     8 */
	const struct tun_table  *  tab;                  /*     8     8 */
	union {
		uint8_t            u8[256];              /*         256 */
		struct geneve_opt  gnv[63];              /*         252 */
	} opts;                                          /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc_chain {
	struct tun_metadata_loc_chain * next;            /*     0     8 */
	int                        offset;               /*     8     4 */
	int                        len;                  /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc {
	int                        len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct tun_metadata_loc_chain c;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct tun_metadata_match_entry {
	struct tun_metadata_loc    loc;                  /*     0    24 */
	_Bool                      masked;               /*    24     1 */

	/* size: 32, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct tun_metadata_allocation {
	struct tun_metadata_match_entry entry[64];       /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */
	int                        alloc_offset;         /*  2048     4 */
	_Bool                      valid;                /*  2052     1 */

	/* size: 2056, cachelines: 33, members: 3 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct flow_tnl {
	ovs_be32                   ip_dst;               /*     0     4 */
	struct in6_addr            ipv6_dst;             /*     4    16 */
	ovs_be32                   ip_src;               /*    20     4 */
	struct in6_addr            ipv6_src;             /*    24    16 */
	ovs_be64                   tun_id;               /*    40     8 */
	uint16_t                   flags;                /*    48     2 */
	uint8_t                    ip_tos;               /*    50     1 */
	uint8_t                    ip_ttl;               /*    51     1 */
	ovs_be16                   tp_src;               /*    52     2 */
	ovs_be16                   tp_dst;               /*    54     2 */
	ovs_be16                   gbp_id;               /*    56     2 */
	uint8_t                    gbp_flags;            /*    58     1 */

	/* XXX 1 byte hole, try to pack */

	ovs_be32                   erspan_idx;           /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint8_t                    erspan_ver:2;         /*    64: 6  1 */
	uint8_t                    erspan_dir:1;         /*    64: 5  1 */
	uint8_t                    erspan_hwid:5;        /*    64: 0  1 */

	/* XXX 7 bytes hole, try to pack */

	struct tun_metadata        metadata;             /*    72   272 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 17 */
	/* sum members: 336, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct flow_nsh {
	uint8_t                    flags;                /*     0     1 */
	uint8_t                    mdtype;               /*     1     1 */
	uint8_t                    np;                   /*     2     1 */
	uint8_t                    si;                   /*     3     1 */
	ovs_be32                   spi;                  /*     4     4 */
	ovs_be32                   c[4];                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ovs_key_ct_tuple_ipv4 {
	ovs_be32                   ipv4_src;             /*     0     4 */
	ovs_be32                   ipv4_dst;             /*     4     4 */
	ovs_be16                   src_port;             /*     8     2 */
	ovs_be16                   dst_port;             /*    10     2 */
	uint8_t                    ipv4_proto;           /*    12     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ovs_key_ct_tuple_ipv6 {
	struct in6_addr            ipv6_src;             /*     0    16 */
	struct in6_addr            ipv6_dst;             /*    16    16 */
	ovs_be16                   src_port;             /*    32     2 */
	ovs_be16                   dst_port;             /*    34     2 */
	uint8_t                    ipv6_proto;           /*    36     1 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 40 bytes */
};
struct ofpbuf {
	void *                     base;                 /*     0     8 */
	void *                     data;                 /*     8     8 */
	uint32_t                   size;                 /*    16     4 */
	uint32_t                   allocated;            /*    20     4 */
	void *                     header;               /*    24     8 */
	void *                     msg;                  /*    32     8 */
	struct ovs_list            list_node;            /*    40    16 */
	enum ofpbuf_source         source;               /*    56     1 */

	/* size: 64, cachelines: 1, members: 8 */
	/* padding: 7 */
};
struct pkt_metadata {
	union {
		OVS_CACHE_LINE_MARKER cacheline0;        /*           1 */
		struct {
			uint32_t   recirc_id;            /*     0     4 */
			uint32_t   dp_hash;              /*     4     4 */
			uint32_t   skb_priority;         /*     8     4 */
			uint32_t   pkt_mark;             /*    12     4 */
			uint8_t    ct_state;             /*    16     1 */
			_Bool      ct_orig_tuple_ipv6;   /*    17     1 */
			uint16_t   ct_zone;              /*    18     2 */
			uint32_t   ct_mark;              /*    20     4 */
			ovs_u128   ct_label;             /*    24    16 */
			union flow_in_port in_port;      /*    40     4 */
		};                                       /*          48 */
		uint8_t            pad0[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline1;        /*           1 */
		struct {
			union {
				struct ovs_key_ct_tuple_ipv4 ipv4; /*          16 */
				struct ovs_key_ct_tuple_ipv6 ipv6; /*          40 */
			} ct_orig_tuple;                 /*    64    40 */
		};                                       /*          40 */
		uint8_t            pad1[64];             /*          64 */
	};                                               /*    64    64 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline2;        /*           1 */
		struct {
			struct flow_tnl tunnel;          /*   128   344 */
			/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
		};                                       /*         344 */
		uint8_t            pad2[384];            /*         384 */
	};                                               /*   128   384 */
	/* --- cacheline 8 boundary (512 bytes) --- */

	/* size: 512, cachelines: 8, members: 3 */
};
struct cfm_settings {
	uint64_t                   mpid;                 /*     0     8 */
	int                        interval;             /*     8     4 */
	_Bool                      extended;             /*    12     1 */
	_Bool                      demand;               /*    13     1 */
	_Bool                      opup;                 /*    14     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   ccm_vlan;             /*    16     2 */
	uint8_t                    ccm_pcp;              /*    18     1 */
	_Bool                      check_tnl_key;        /*    19     1 */

	/* size: 24, cachelines: 1, members: 8 */
	/* sum members: 19, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct cfm_status {
	enum cfm_fault_reason      faults;               /*     0     4 */
	int                        remote_opstate;       /*     4     4 */
	uint64_t                   flap_count;           /*     8     8 */
	int                        health;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t *                 rmps;                 /*    24     8 */
	size_t                     n_rmps;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ovs_refcount {
	unsigned int               count;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct coverage_counter {
	const char  *const         name;                 /*     0     8 */
	unsigned int ()(void) *const count;              /*     8     8 */
	long long unsigned int     total;                /*    16     8 */
	long long unsigned int     last_total;           /*    24     8 */
	unsigned int               min[12];              /*    32    48 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               hr[60];               /*    80   240 */
	/* --- cacheline 5 boundary (320 bytes) --- */

	/* size: 320, cachelines: 5, members: 6 */
};
struct flow {
	struct flow_tnl            tunnel;               /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	ovs_be64                   metadata;             /*   344     8 */
	uint32_t                   regs[16];             /*   352    64 */
	/* --- cacheline 6 boundary (384 bytes) was 32 bytes ago --- */
	uint32_t                   skb_priority;         /*   416     4 */
	uint32_t                   pkt_mark;             /*   420     4 */
	uint32_t                   dp_hash;              /*   424     4 */
	union flow_in_port         in_port;              /*   428     4 */
	uint32_t                   recirc_id;            /*   432     4 */
	uint8_t                    ct_state;             /*   436     1 */
	uint8_t                    ct_nw_proto;          /*   437     1 */
	uint16_t                   ct_zone;              /*   438     2 */
	uint32_t                   ct_mark;              /*   440     4 */
	ovs_be32                   packet_type;          /*   444     4 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	ovs_u128                   ct_label;             /*   448    16 */
	uint32_t                   conj_id;              /*   464     4 */
	ofp_port_t                 actset_output;        /*   468     4 */
	struct eth_addr            dl_dst;               /*   472     6 */
	struct eth_addr            dl_src;               /*   478     6 */
	ovs_be16                   dl_type;              /*   484     2 */
	uint8_t                    pad1[2];              /*   486     2 */
	union flow_vlan_hdr        vlans[2];             /*   488     8 */
	ovs_be32                   mpls_lse[4];          /*   496    16 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	ovs_be32                   nw_src;               /*   512     4 */
	ovs_be32                   nw_dst;               /*   516     4 */
	ovs_be32                   ct_nw_src;            /*   520     4 */
	ovs_be32                   ct_nw_dst;            /*   524     4 */
	struct in6_addr            ipv6_src;             /*   528    16 */
	struct in6_addr            ipv6_dst;             /*   544    16 */
	struct in6_addr            ct_ipv6_src;          /*   560    16 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	struct in6_addr            ct_ipv6_dst;          /*   576    16 */
	ovs_be32                   ipv6_label;           /*   592     4 */
	uint8_t                    nw_frag;              /*   596     1 */
	uint8_t                    nw_tos;               /*   597     1 */
	uint8_t                    nw_ttl;               /*   598     1 */
	uint8_t                    nw_proto;             /*   599     1 */
	struct in6_addr            nd_target;            /*   600    16 */
	struct eth_addr            arp_sha;              /*   616     6 */
	struct eth_addr            arp_tha;              /*   622     6 */
	ovs_be16                   tcp_flags;            /*   628     2 */
	ovs_be16                   pad2;                 /*   630     2 */
	struct flow_nsh            nsh;                  /*   632    24 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	ovs_be16                   tp_src;               /*   656     2 */
	ovs_be16                   tp_dst;               /*   658     2 */
	ovs_be16                   ct_tp_src;            /*   660     2 */
	ovs_be16                   ct_tp_dst;            /*   662     2 */
	ovs_be32                   igmp_group_ip4;       /*   664     4 */
	ovs_be32                   pad3;                 /*   668     4 */

	/* size: 672, cachelines: 11, members: 47 */
	/* last cacheline: 32 bytes */
};
struct flow_wildcards {
	struct flow                masks;                /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */

	/* size: 672, cachelines: 11, members: 1 */
	/* last cacheline: 32 bytes */
};
struct flowmap {
	map_t                      bits[2];              /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct miniflow {
	struct flowmap             map;                  /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct minimask {
	struct miniflow            masks;                /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct dp_packet {
	void *                     base_;                /*     0     8 */
	uint16_t                   allocated_;           /*     8     2 */
	uint16_t                   data_ofs;             /*    10     2 */
	uint32_t                   size_;                /*    12     4 */
	uint32_t                   rss_hash;             /*    16     4 */
	_Bool                      rss_hash_valid;       /*    20     1 */
	enum dp_packet_source      source;               /*    21     1 */
	uint8_t                    l2_pad_size;          /*    22     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   l2_5_ofs;             /*    24     2 */
	uint16_t                   l3_ofs;               /*    26     2 */
	uint16_t                   l4_ofs;               /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   cutlen;               /*    32     4 */
	ovs_be32                   packet_type;          /*    36     4 */
	union {
		struct pkt_metadata md;                  /*         512 */
		uint64_t           data[8];              /*          64 */
	};                                               /*    40   512 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */

	/* size: 552, cachelines: 9, members: 14 */
	/* sum members: 549, holes: 2, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct netdev_stats {
	uint64_t                   rx_packets;           /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   rx_bytes;             /*    16     8 */
	uint64_t                   tx_bytes;             /*    24     8 */
	uint64_t                   rx_errors;            /*    32     8 */
	uint64_t                   tx_errors;            /*    40     8 */
	uint64_t                   rx_dropped;           /*    48     8 */
	uint64_t                   tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   multicast;            /*    64     8 */
	uint64_t                   collisions;           /*    72     8 */
	uint64_t                   rx_length_errors;     /*    80     8 */
	uint64_t                   rx_over_errors;       /*    88     8 */
	uint64_t                   rx_crc_errors;        /*    96     8 */
	uint64_t                   rx_frame_errors;      /*   104     8 */
	uint64_t                   rx_fifo_errors;       /*   112     8 */
	uint64_t                   rx_missed_errors;     /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint64_t                   tx_aborted_errors;    /*   128     8 */
	uint64_t                   tx_carrier_errors;    /*   136     8 */
	uint64_t                   tx_fifo_errors;       /*   144     8 */
	uint64_t                   tx_heartbeat_errors;  /*   152     8 */
	uint64_t                   tx_window_errors;     /*   160     8 */
	uint64_t                   rx_1_to_64_packets;   /*   168     8 */
	uint64_t                   rx_65_to_127_packets; /*   176     8 */
	uint64_t                   rx_128_to_255_packets; /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	uint64_t                   rx_256_to_511_packets; /*   192     8 */
	uint64_t                   rx_512_to_1023_packets; /*   200     8 */
	uint64_t                   rx_1024_to_1522_packets; /*   208     8 */
	uint64_t                   rx_1523_to_max_packets; /*   216     8 */
	uint64_t                   tx_1_to_64_packets;   /*   224     8 */
	uint64_t                   tx_65_to_127_packets; /*   232     8 */
	uint64_t                   tx_128_to_255_packets; /*   240     8 */
	uint64_t                   tx_256_to_511_packets; /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	uint64_t                   tx_512_to_1023_packets; /*   256     8 */
	uint64_t                   tx_1024_to_1522_packets; /*   264     8 */
	uint64_t                   tx_1523_to_max_packets; /*   272     8 */
	uint64_t                   tx_multicast_packets; /*   280     8 */
	uint64_t                   rx_broadcast_packets; /*   288     8 */
	uint64_t                   tx_broadcast_packets; /*   296     8 */
	uint64_t                   rx_undersized_errors; /*   304     8 */
	uint64_t                   rx_oversize_errors;   /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	uint64_t                   rx_fragmented_errors; /*   320     8 */
	uint64_t                   rx_jabber_errors;     /*   328     8 */

	/* size: 336, cachelines: 6, members: 42 */
	/* last cacheline: 16 bytes */
};
struct netdev_queue_stats {
	uint64_t                   tx_bytes;             /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   tx_errors;            /*    16     8 */
	long long int              created;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct netdev_queue_dump {
	struct netdev *            netdev;               /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct match {
	struct flow                flow;                 /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */
	struct flow_wildcards      wc;                   /*   672   672 */
	/* --- cacheline 21 boundary (1344 bytes) --- */
	struct tun_metadata_allocation tun_md;           /*  1344  2056 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */

	/* size: 3400, cachelines: 54, members: 3 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 8 bytes */
};
struct minimatch {
	union {
		struct {
			struct miniflow * flow;          /*     0     8 */
			struct minimask * mask;          /*     8     8 */
		};                                       /*          16 */
		struct miniflow *  flows[2];             /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct mf_bitmap {
	long unsigned int          bm[3];                /*     0    24 */

	/* size: 24, cachelines: 1, members: 1 */
	/* last cacheline: 24 bytes */
};
struct mf_field {
	enum mf_field_id           id;                   /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	const char  *              extra_name;           /*    16     8 */
	unsigned int               n_bytes;              /*    24     4 */
	unsigned int               n_bits;               /*    28     4 */
	_Bool                      variable_len;         /*    32     1 */
	enum mf_maskable           maskable;             /*    33     1 */
	enum mf_string             string;               /*    34     1 */
	enum mf_prereqs            prereqs;              /*    35     1 */
	_Bool                      writable;             /*    36     1 */
	_Bool                      mapped;               /*    37     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   usable_protocols_exact; /*    40     4 */
	uint32_t                   usable_protocols_cidr; /*    44     4 */
	uint32_t                   usable_protocols_bitwise; /*    48     4 */
	int                        flow_be32ofs;         /*    52     4 */

	/* size: 56, cachelines: 1, members: 15 */
	/* sum members: 47, holes: 2, sum holes: 9 */
	/* last cacheline: 56 bytes */
};
struct mf_subfield {
	const struct mf_field  *   field;                /*     0     8 */
	unsigned int               ofs;                  /*     8     4 */
	unsigned int               n_bits;               /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct field_array {
	struct mf_bitmap           used;                 /*     0    24 */
	size_t                     values_size;          /*    24     8 */
	uint8_t *                  values;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct uuid {
	uint32_t                   parts[4];             /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct ofpact {
	enum ofpact_type           type;                 /*     0     1 */
	uint8_t                    raw;                  /*     1     1 */
	uint16_t                   len;                  /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofputil_packet_in {
	void *                     packet;               /*     0     8 */
	size_t                     packet_len;           /*     8     8 */
	struct match               flow_metadata;        /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	enum ofp_packet_in_reason  reason;               /*  3416     4 */
	uint8_t                    table_id;             /*  3420     1 */

	/* XXX 3 bytes hole, try to pack */

	ovs_be64                   cookie;               /*  3424     8 */
	uint8_t *                  userdata;             /*  3432     8 */
	size_t                     userdata_len;         /*  3440     8 */

	/* size: 3448, cachelines: 54, members: 8 */
	/* sum members: 3445, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct ofputil_packet_in_private {
	struct ofputil_packet_in   base;                 /*     0  3448 */
	/* --- cacheline 53 boundary (3392 bytes) was 56 bytes ago --- */
	struct uuid                bridge;               /*  3448    16 */
	/* --- cacheline 54 boundary (3456 bytes) was 8 bytes ago --- */
	uint8_t *                  stack;                /*  3464     8 */
	size_t                     stack_size;           /*  3472     8 */
	uint32_t                   mirrors;              /*  3480     4 */
	_Bool                      conntracked;          /*  3484     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ofpact *            actions;              /*  3488     8 */
	size_t                     actions_len;          /*  3496     8 */
	struct ofpact *            action_set;           /*  3504     8 */
	size_t                     action_set_len;       /*  3512     8 */
	/* --- cacheline 55 boundary (3520 bytes) --- */

	/* size: 3520, cachelines: 55, members: 10 */
	/* sum members: 3517, holes: 1, sum holes: 3 */
};
struct ofputil_phy_port {
	ofp_port_t                 port_no;              /*     0     4 */
	struct eth_addr            hw_addr;              /*     4     6 */
	struct eth_addr64          hw_addr64;            /*    10     8 */
	char                       name[64];             /*    18    64 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) was 20 bytes ago --- */
	enum ofputil_port_config   config;               /*    84     4 */
	enum ofputil_port_state    state;                /*    88     4 */
	enum netdev_features       curr;                 /*    92     4 */
	enum netdev_features       advertised;           /*    96     4 */
	enum netdev_features       supported;            /*   100     4 */
	enum netdev_features       peer;                 /*   104     4 */
	uint32_t                   curr_speed;           /*   108     4 */
	uint32_t                   max_speed;            /*   112     4 */

	/* size: 116, cachelines: 2, members: 12 */
	/* sum members: 114, holes: 1, sum holes: 2 */
	/* last cacheline: 52 bytes */
};
struct ofputil_table_action_features {
	uint64_t                   ofpacts;              /*     0     8 */
	struct mf_bitmap           set_fields;           /*     8    24 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_instruction_features {
	long unsigned int          next[4];              /*     0    32 */
	uint32_t                   instructions;         /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_table_action_features write;      /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ofputil_table_action_features apply;      /*    72    32 */

	/* size: 104, cachelines: 2, members: 4 */
	/* sum members: 100, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofputil_table_features {
	uint8_t                    table_id;             /*     0     1 */
	char                       name[32];             /*     1    32 */

	/* XXX 7 bytes hole, try to pack */

	ovs_be64                   metadata_match;       /*    40     8 */
	ovs_be64                   metadata_write;       /*    48     8 */
	uint32_t                   max_entries;          /*    56     4 */
	enum ofputil_table_miss    miss_config;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        supports_eviction;    /*    64     4 */
	int                        supports_vacancy_events; /*    68     4 */
	struct ofputil_table_instruction_features nonmiss; /*    72   104 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */
	struct ofputil_table_instruction_features miss;  /*   176   104 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	struct mf_bitmap           match;                /*   280    24 */
	struct mf_bitmap           mask;                 /*   304    24 */
	/* --- cacheline 5 boundary (320 bytes) was 8 bytes ago --- */
	struct mf_bitmap           wildcard;             /*   328    24 */

	/* size: 352, cachelines: 6, members: 13 */
	/* sum members: 345, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ofputil_meter_band {
	uint16_t                   type;                 /*     0     2 */
	uint8_t                    prec_level;           /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   rate;                 /*     4     4 */
	uint32_t                   burst_size;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* sum members: 11, holes: 1, sum holes: 1 */
	/* last cacheline: 12 bytes */
};
struct ofputil_meter_band_stats {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_config {
	uint32_t                   meter_id;             /*     0     4 */
	uint16_t                   flags;                /*     4     2 */
	uint16_t                   n_bands;              /*     6     2 */
	struct ofputil_meter_band * bands;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_stats {
	uint32_t                   meter_id;             /*     0     4 */
	uint32_t                   flow_count;           /*     4     4 */
	uint64_t                   packet_in_count;      /*     8     8 */
	uint64_t                   byte_in_count;        /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint16_t                   n_bands;              /*    32     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofputil_meter_band_stats * bands;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ofputil_meter_features {
	uint32_t                   max_meters;           /*     0     4 */
	uint32_t                   band_types;           /*     4     4 */
	uint32_t                   capabilities;         /*     8     4 */
	uint8_t                    max_bands;            /*    12     1 */
	uint8_t                    max_color;            /*    13     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_table_stats {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   active_count;         /*     4     4 */
	uint64_t                   lookup_count;         /*     8     8 */
	uint64_t                   matched_count;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct bucket_counter {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_group_props {
	char                       selection_method[16]; /*     0    16 */
	uint64_t                   selection_method_param; /*    16     8 */
	struct field_array         fields;               /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 3 */
};
struct ofputil_group_stats {
	uint32_t                   group_id;             /*     0     4 */
	uint32_t                   ref_count;            /*     4     4 */
	uint64_t                   packet_count;         /*     8     8 */
	uint64_t                   byte_count;           /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint32_t                   n_buckets;            /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct bucket_counter *    bucket_stats;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofputil_group_features {
	uint32_t                   types;                /*     0     4 */
	uint32_t                   capabilities;         /*     4     4 */
	uint32_t                   max_groups[4];        /*     8    16 */
	uint64_t                   ofpacts[4];           /*    24    32 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct hmapx {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct lacp_settings {
	char *                     name;                 /*     0     8 */
	struct eth_addr            id;                   /*     8     6 */
	uint16_t                   priority;             /*    14     2 */
	_Bool                      active;               /*    16     1 */
	_Bool                      fast;                 /*    17     1 */
	_Bool                      fallback_ab_cfg;      /*    18     1 */

	/* size: 24, cachelines: 1, members: 6 */
	/* padding: 5 */
	/* last cacheline: 24 bytes */
};
struct lacp_slave_settings {
	char *                     name;                 /*     0     8 */
	uint16_t                   id;                   /*     8     2 */
	uint16_t                   priority;             /*    10     2 */
	uint16_t                   key;                  /*    12     2 */

	/* size: 16, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct lacp_slave_stats {
	struct eth_addr            dot3adAggPortActorSystemID; /*     0     6 */
	struct eth_addr            dot3adAggPortPartnerOperSystemID; /*     6     6 */
	uint32_t                   dot3adAggPortAttachedAggID; /*    12     4 */
	uint8_t                    dot3adAggPortActorAdminState; /*    16     1 */
	uint8_t                    dot3adAggPortActorOperState; /*    17     1 */
	uint8_t                    dot3adAggPortPartnerAdminState; /*    18     1 */
	uint8_t                    dot3adAggPortPartnerOperState; /*    19     1 */
	uint32_t                   dot3adAggPortStatsLACPDUsRx; /*    20     4 */
	uint32_t                   dot3adAggPortStatsIllegalRx; /*    24     4 */
	uint32_t                   dot3adAggPortStatsLACPDUsTx; /*    28     4 */

	/* size: 32, cachelines: 1, members: 10 */
	/* last cacheline: 32 bytes */
};
struct heap_node {
	size_t                     idx;                  /*     0     8 */
	uint64_t                   priority;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct heap {
	struct heap_node * *       array;                /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct cmap_node {
	struct {
		struct cmap_node * p;                    /*     0     8 */
	} next;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct cmap {
	struct {
		struct cmap_impl * p;                    /*     0     8 */
	} impl;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct pvector_entry {
	int                        priority;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     ptr;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct pvector_impl {
	size_t                     size;                 /*     0     8 */
	size_t                     allocated;            /*     8     8 */
	struct pvector_entry       vector[0];            /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct pvector {
	struct {
		struct pvector_impl * p;                 /*     0     8 */
	} impl;                                          /*     0     8 */
	struct pvector_impl *      temp;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct rculist {
	struct rculist *           prev;                 /*     0     8 */
	struct {
		struct rculist *   p;                    /*     8     8 */
	} next;                                          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct versions {
	ovs_version_t              add_version;          /*     0     8 */
	ovs_version_t              remove_version;       /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct cls_trie {
	const struct mf_field  *   field;                /*     0     8 */
	rcu_trie_ptr               root;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct classifier {
	int                        n_rules;              /*     0     4 */
	uint8_t                    n_flow_segments;      /*     4     1 */
	uint8_t                    flow_segments[3];     /*     5     3 */
	struct cmap                subtables_map;        /*     8     8 */
	struct pvector             subtables;            /*    16    16 */
	struct cmap                partitions;           /*    32     8 */
	struct cls_trie            tries[3];             /*    40    48 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	unsigned int               n_tries;              /*    88     4 */
	_Bool                      publish;              /*    92     1 */

	/* size: 96, cachelines: 2, members: 9 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct cls_rule {
	struct rculist             node;                 /*     0    16 */
	intconst                   priority;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct {
		struct cls_match * p;                    /*    24     8 */
	} cls_match;                                     /*    24     8 */
	struct minimatchconst      match;                /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct hindex_node {
	size_t                     hash;                 /*     0     8 */
	struct hindex_node *       d;                    /*     8     8 */
	struct hindex_node *       s;                    /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hindex {
	struct hindex_node * *     buckets;              /*     0     8 */
	struct hindex_node *       one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n_unique;             /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct object_collection {
	void * *                   objs;                 /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     capacity;             /*    16     8 */
	void *                     stub[5];              /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct sset_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	char                       name[1];              /*    16     1 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 24 bytes */
};
struct sset {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct netflow_options {
	struct sset                collectors;           /*     0    32 */
	uint8_t                    engine_type;          /*    32     1 */
	uint8_t                    engine_id;            /*    33     1 */

	/* XXX 2 bytes hole, try to pack */

	int                        active_timeout;       /*    36     4 */
	_Bool                      add_id_to_iface;      /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* sum members: 39, holes: 1, sum holes: 2 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct smap_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     key;                  /*    16     8 */
	char *                     value;                /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct ofproto_controller_info {
	_Bool                      is_connected;         /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofp12_controller_role role;                 /*     4     4 */
	struct smap                pairs;                /*     8    32 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct ofproto_sflow_options {
	struct sset                targets;              /*     0    32 */
	uint32_t                   sampling_rate;        /*    32     4 */
	uint32_t                   polling_interval;     /*    36     4 */
	uint32_t                   header_len;           /*    40     4 */
	uint32_t                   sub_id;               /*    44     4 */
	char *                     agent_device;         /*    48     8 */
	char *                     control_ip;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 7 */
};
struct ofproto_ipfix_bridge_exporter_options {
	struct sset                targets;              /*     0    32 */
	uint32_t                   sampling_rate;        /*    32     4 */
	uint32_t                   obs_domain_id;        /*    36     4 */
	uint32_t                   obs_point_id;         /*    40     4 */
	uint32_t                   cache_active_timeout; /*    44     4 */
	uint32_t                   cache_max_flows;      /*    48     4 */
	_Bool                      enable_tunnel_sampling; /*    52     1 */
	_Bool                      enable_input_sampling; /*    53     1 */
	_Bool                      enable_output_sampling; /*    54     1 */

	/* XXX 1 byte hole, try to pack */

	char *                     virtual_obs_id;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 10 */
	/* sum members: 63, holes: 1, sum holes: 1 */
};
struct ofproto_ipfix_flow_exporter_options {
	uint32_t                   collector_set_id;     /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sset                targets;              /*     8    32 */
	uint32_t                   cache_active_timeout; /*    40     4 */
	uint32_t                   cache_max_flows;      /*    44     4 */
	_Bool                      enable_tunnel_sampling; /*    48     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     virtual_obs_id;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
	/* sum members: 53, holes: 2, sum holes: 11 */
};
struct ofproto_rstp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	rstp_identifier            root_id;              /*     8     8 */
	rstp_identifier            bridge_id;            /*    16     8 */
	rstp_identifier            designated_id;        /*    24     8 */
	uint32_t                   root_path_cost;       /*    32     4 */
	uint16_t                   designated_port_id;   /*    36     2 */
	uint16_t                   bridge_port_id;       /*    38     2 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 33, holes: 1, sum holes: 7 */
	/* last cacheline: 40 bytes */
};
struct ofproto_rstp_settings {
	rstp_identifier            address;              /*     0     8 */
	uint16_t                   priority;             /*     8     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   ageing_time;          /*    12     4 */
	enum rstp_force_protocol_version force_protocol_version; /*    16     4 */
	uint16_t                   bridge_forward_delay; /*    20     2 */
	uint16_t                   bridge_max_age;       /*    22     2 */
	uint16_t                   transmit_hold_count;  /*    24     2 */

	/* size: 32, cachelines: 1, members: 7 */
	/* sum members: 24, holes: 1, sum holes: 2 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct ofproto_port_rstp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   port_id;              /*     2     2 */
	enum rstp_port_role        role;                 /*     4     4 */
	enum rstp_state            state;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	rstp_identifier            designated_bridge_id; /*    16     8 */
	uint16_t                   designated_port_id;   /*    24     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   designated_path_cost; /*    28     4 */
	int                        tx_count;             /*    32     4 */
	int                        rx_count;             /*    36     4 */
	int                        error_count;          /*    40     4 */
	int                        uptime;               /*    44     4 */

	/* size: 48, cachelines: 1, members: 11 */
	/* sum members: 41, holes: 3, sum holes: 7 */
	/* last cacheline: 48 bytes */
};
struct ofproto_port_rstp_settings {
	_Bool                      enable;               /*     0     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   port_num;             /*     2     2 */
	uint8_t                    priority;             /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   path_cost;            /*     8     4 */
	_Bool                      admin_edge_port;      /*    12     1 */
	_Bool                      auto_edge;            /*    13     1 */
	_Bool                      mcheck;               /*    14     1 */
	uint8_t                    admin_p2p_mac_state;  /*    15     1 */
	_Bool                      admin_port_state;     /*    16     1 */

	/* size: 20, cachelines: 1, members: 9 */
	/* sum members: 13, holes: 2, sum holes: 4 */
	/* padding: 3 */
	/* last cacheline: 20 bytes */
};
struct ofproto_stp_settings {
	stp_identifier             system_id;            /*     0     8 */
	uint16_t                   priority;             /*     8     2 */
	uint16_t                   hello_time;           /*    10     2 */
	uint16_t                   max_age;              /*    12     2 */
	uint16_t                   fwd_delay;            /*    14     2 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ofproto_stp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	stp_identifier             bridge_id;            /*     8     8 */
	stp_identifier             designated_root;      /*    16     8 */
	int                        root_path_cost;       /*    24     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 7 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct ofproto_port_stp_settings {
	_Bool                      enable;               /*     0     1 */
	uint8_t                    port_num;             /*     1     1 */
	uint8_t                    priority;             /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   path_cost;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 4 */
	/* sum members: 5, holes: 1, sum holes: 1 */
	/* last cacheline: 6 bytes */
};
struct ofproto_port_stp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        port_id;              /*     4     4 */
	enum stp_state             state;                /*     8     4 */
	unsigned int               sec_in_state;         /*    12     4 */
	enum stp_role              role;                 /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* sum members: 17, holes: 1, sum holes: 3 */
	/* last cacheline: 20 bytes */
};
struct ofproto_port_stp_stats {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        tx_count;             /*     4     4 */
	int                        rx_count;             /*     8     4 */
	int                        error_count;          /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct ofproto_port_queue {
	uint32_t                   queue;                /*     0     4 */
	uint8_t                    dscp;                 /*     4     1 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct ofproto_mcast_snooping_settings {
	_Bool                      flood_unreg;          /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               idle_time;            /*     4     4 */
	unsigned int               max_entries;          /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* sum members: 9, holes: 1, sum holes: 3 */
	/* last cacheline: 12 bytes */
};
struct ofproto_mcast_snooping_port_settings {
	_Bool                      flood;                /*     0     1 */
	_Bool                      flood_reports;        /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ofproto_controller {
	char *                     target;               /*     0     8 */
	int                        max_backoff;          /*     8     4 */
	int                        probe_interval;       /*    12     4 */
	enum ofproto_band          band;                 /*    16     4 */
	_Bool                      enable_async_msgs;    /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        rate_limit;           /*    24     4 */
	int                        burst_limit;          /*    28     4 */
	uint8_t                    dscp;                 /*    32     1 */

	/* size: 40, cachelines: 1, members: 8 */
	/* sum members: 30, holes: 1, sum holes: 3 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct iface_hint {
	char *                     br_name;              /*     0     8 */
	char *                     br_type;              /*     8     8 */
	ofp_port_t                 ofp_port;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto_port {
	char *                     name;                 /*     0     8 */
	char *                     type;                 /*     8     8 */
	ofp_port_t                 ofp_port;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto_port_dump {
	const struct ofproto  *    ofproto;              /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto {
	struct hmap_node           hmap_node;            /*     0    16 */
	const struct ofproto_class  * ofproto_class;     /*    16     8 */
	char *                     type;                 /*    24     8 */
	char *                     name;                 /*    32     8 */
	uint64_t                   fallback_dpid;        /*    40     8 */
	uint64_t                   datapath_id;          /*    48     8 */
	_Bool                      forward_bpdu;         /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     mfr_desc;             /*    64     8 */
	char *                     hw_desc;              /*    72     8 */
	char *                     sw_desc;              /*    80     8 */
	char *                     serial_desc;          /*    88     8 */
	char *                     dp_desc;              /*    96     8 */
	enum ofputil_frag_handling frag_handling;        /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                ports;                /*   112    32 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct shash               port_by_name;         /*   144    32 */
	struct simap               ofp_requests;         /*   176    32 */
	/* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */
	uint16_t                   alloc_port_no;        /*   208     2 */
	uint16_t                   max_ports;            /*   210     2 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                ofport_usage;         /*   216    32 */
	uint64_t                   change_seq;           /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	long long int              eviction_group_timer; /*   256     8 */
	struct oftable *           tables;               /*   264     8 */
	int                        n_tables;             /*   272     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_version_t              tables_version;       /*   280     8 */
	struct hindex              cookies;              /*   288    32 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	struct hmap                learned_cookies;      /*   320    32 */
	struct ovs_list            expirable;            /*   352    16 */
	struct ofputil_meter_features meter_features;    /*   368    16 */

	/* XXX last struct has 2 bytes of padding */

	/* --- cacheline 6 boundary (384 bytes) --- */
	struct hmap                meters;               /*   384    32 */
	uint32_t                   slowpath_meter_id;    /*   416     4 */
	uint32_t                   controller_meter_id;  /*   420     4 */
	struct connmgr *           connmgr;              /*   424     8 */
	int                        min_mtu;              /*   432     4 */

	/* XXX 4 bytes hole, try to pack */

	struct cmap                groups;               /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	uint32_t                   n_groups[4];          /*   448    16 */
	struct ofputil_group_features ogf;               /*   464    56 */
	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct {
		struct tun_table * p;                    /*   520     8 */
	} metadata_tab;                                  /*   520     8 */
	struct vl_mff_map          vl_mff_map;           /*   528    56 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */

	/* size: 584, cachelines: 10, members: 38 */
	/* sum members: 561, holes: 5, sum holes: 23 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 8 bytes */
};
struct ofproto_bundle_settings {
	char *                     name;                 /*     0     8 */
	ofp_port_t *               slaves;               /*     8     8 */
	size_t                     n_slaves;             /*    16     8 */
	enum port_vlan_mode        vlan_mode;            /*    24     4 */
	uint16_t                   qinq_ethtype;         /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        vlan;                 /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int *        trunks;               /*    40     8 */
	long unsigned int *        cvlans;               /*    48     8 */
	_Bool                      use_priority_tags;    /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct bond_settings *     bond;                 /*    64     8 */
	struct lacp_settings *     lacp;                 /*    72     8 */
	struct lacp_slave_settings * lacp_slaves;        /*    80     8 */
	_Bool                      protected;            /*    88     1 */

	/* size: 96, cachelines: 2, members: 13 */
	/* sum members: 76, holes: 3, sum holes: 13 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct bond_settings {
	char *                     name;                 /*     0     8 */
	uint32_t                   basis;                /*     8     4 */
	enum bond_mode             balance;              /*    12     4 */
	int                        rebalance_interval;   /*    16     4 */
	int                        up_delay;             /*    20     4 */
	int                        down_delay;           /*    24     4 */
	_Bool                      lacp_fallback_ab_cfg; /*    28     1 */

	/* XXX 1 byte hole, try to pack */

	struct eth_addr            active_slave_mac;     /*    30     6 */

	/* size: 40, cachelines: 1, members: 8 */
	/* sum members: 35, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct ofproto_mirror_settings {
	char *                     name;                 /*     0     8 */
	void * *                   srcs;                 /*     8     8 */
	size_t                     n_srcs;               /*    16     8 */
	void * *                   dsts;                 /*    24     8 */
	size_t                     n_dsts;               /*    32     8 */
	long unsigned int *        src_vlans;            /*    40     8 */
	void *                     out_bundle;           /*    48     8 */
	uint16_t                   out_vlan;             /*    56     2 */
	uint16_t                   snaplen;              /*    58     2 */

	/* size: 64, cachelines: 1, members: 9 */
	/* padding: 4 */
};
struct ofproto_table_settings {
	char *                     name;                 /*     0     8 */
	unsigned int               max_flows;            /*     8     4 */
	_Bool                      enable_eviction;      /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	struct mf_subfield *       groups;               /*    16     8 */
	size_t                     n_groups;             /*    24     8 */
	unsigned int               n_prefix_fields;      /*    32     4 */
	enum mf_field_id           prefix_fields[3];     /*    36     3 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 36, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 40 bytes */
};
struct shash_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	void *                     data;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct simap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct vl_mff_map {
	struct cmap                cmap;                 /*     0     8 */
	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct ofproto_class {
	void                       (*init)(const struct shash  *); /*     0     8 */
	void                       (*enumerate_types)(struct sset *); /*     8     8 */
	int                        (*enumerate_names)(const char  *, struct sset *); /*    16     8 */
	int                        (*del)(const char  *, const char  *); /*    24     8 */
	const char  *              (*port_open_type)(const char  *, const char  *); /*    32     8 */
	int                        (*type_run)(const char  *); /*    40     8 */
	void                       (*type_wait)(const char  *); /*    48     8 */
	struct ofproto *           (*alloc)(void);       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*construct)(struct ofproto *); /*    64     8 */
	void                       (*destruct)(struct ofproto *, _Bool); /*    72     8 */
	void                       (*dealloc)(struct ofproto *); /*    80     8 */
	int                        (*run)(struct ofproto *); /*    88     8 */
	void                       (*wait)(struct ofproto *); /*    96     8 */
	void                       (*get_memory_usage)(const struct ofproto  *, struct simap *); /*   104     8 */
	void                       (*type_get_memory_usage)(const char  *, struct simap *); /*   112     8 */
	void                       (*flush)(struct ofproto *); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	void                       (*query_tables)(struct ofproto *, struct ofputil_table_features *, struct ofputil_table_stats *); /*   128     8 */
	void                       (*set_tables_version)(struct ofproto *, ovs_version_t); /*   136     8 */
	struct ofport *            (*port_alloc)(void);  /*   144     8 */
	int                        (*port_construct)(struct ofport *); /*   152     8 */
	void                       (*port_destruct)(struct ofport *, _Bool); /*   160     8 */
	void                       (*port_dealloc)(struct ofport *); /*   168     8 */
	void                       (*port_modified)(struct ofport *); /*   176     8 */
	void                       (*port_reconfigured)(struct ofport *, enum ofputil_port_config); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        (*port_query_by_name)(const struct ofproto  *, const char  *, struct ofproto_port *); /*   192     8 */
	int                        (*port_add)(struct ofproto *, struct netdev *); /*   200     8 */
	int                        (*port_del)(struct ofproto *, ofp_port_t); /*   208     8 */
	int                        (*port_set_config)(const struct ofport  *, const struct smap  *); /*   216     8 */
	int                        (*port_get_stats)(const struct ofport  *, struct netdev_stats *); /*   224     8 */
	int                        (*port_dump_start)(const struct ofproto  *, void * *); /*   232     8 */
	int                        (*port_dump_next)(const struct ofproto  *, void *, struct ofproto_port *); /*   240     8 */
	int                        (*port_dump_done)(const struct ofproto  *, void *); /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int                        (*port_poll)(const struct ofproto  *, char * *); /*   256     8 */
	void                       (*port_poll_wait)(const struct ofproto  *); /*   264     8 */
	int                        (*port_is_lacp_current)(const struct ofport  *); /*   272     8 */
	int                        (*port_get_lacp_stats)(const struct ofport  *, struct lacp_slave_stats *); /*   280     8 */
	enum ofperr                (*rule_choose_table)(const struct ofproto  *, const struct match  *, uint8_t *); /*   288     8 */
	struct rule *              (*rule_alloc)(void);  /*   296     8 */
	enum ofperr                (*rule_construct)(struct rule *); /*   304     8 */
	void                       (*rule_insert)(struct rule *, struct rule *, _Bool); /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	void                       (*rule_delete)(struct rule *); /*   320     8 */
	void                       (*rule_destruct)(struct rule *); /*   328     8 */
	void                       (*rule_dealloc)(struct rule *); /*   336     8 */
	void                       (*rule_get_stats)(struct rule *, uint64_t *, uint64_t *, long long int *); /*   344     8 */
	enum ofperr                (*packet_xlate)(struct ofproto *, struct ofproto_packet_out *); /*   352     8 */
	void                       (*packet_xlate_revert)(struct ofproto *, struct ofproto_packet_out *); /*   360     8 */
	void                       (*packet_execute)(struct ofproto *, struct ofproto_packet_out *); /*   368     8 */
	_Bool                      (*set_frag_handling)(struct ofproto *, enum ofputil_frag_handling); /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	enum ofperr                (*nxt_resume)(struct ofproto *, const struct ofputil_packet_in_private  *); /*   384     8 */
	int                        (*set_netflow)(struct ofproto *, const struct netflow_options  *); /*   392     8 */
	void                       (*get_netflow_ids)(const struct ofproto  *, uint8_t *, uint8_t *); /*   400     8 */
	int                        (*set_sflow)(struct ofproto *, const struct ofproto_sflow_options  *); /*   408     8 */
	int                        (*set_ipfix)(struct ofproto *, const struct ofproto_ipfix_bridge_exporter_options  *, const struct ofproto_ipfix_flow_exporter_options  *, size_t); /*   416     8 */
	int                        (*get_ipfix_stats)(const struct ofproto  *, _Bool, struct ovs_list *); /*   424     8 */
	int                        (*set_cfm)(struct ofport *, const struct cfm_settings  *); /*   432     8 */
	_Bool                      (*cfm_status_changed)(struct ofport *); /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	int                        (*get_cfm_status)(const struct ofport  *, struct cfm_status *); /*   448     8 */
	int                        (*set_lldp)(struct ofport *, const struct smap  *); /*   456     8 */
	_Bool                      (*get_lldp_status)(const struct ofport  *, struct lldp_status *); /*   464     8 */
	int                        (*set_aa)(struct ofproto *, const struct aa_settings  *); /*   472     8 */
	int                        (*aa_mapping_set)(struct ofproto *, void *, const struct aa_mapping_settings  *); /*   480     8 */
	int                        (*aa_mapping_unset)(struct ofproto *, void *); /*   488     8 */
	int                        (*aa_vlan_get_queued)(struct ofproto *, struct ovs_list *); /*   496     8 */
	unsigned int               (*aa_vlan_get_queue_size)(struct ofproto *); /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	int                        (*set_bfd)(struct ofport *, const struct smap  *); /*   512     8 */
	_Bool                      (*bfd_status_changed)(struct ofport *); /*   520     8 */
	int                        (*get_bfd_status)(struct ofport *, struct smap *); /*   528     8 */
	int                        (*set_stp)(struct ofproto *, const struct ofproto_stp_settings  *); /*   536     8 */
	int                        (*get_stp_status)(struct ofproto *, struct ofproto_stp_status *); /*   544     8 */
	int                        (*set_stp_port)(struct ofport *, const struct ofproto_port_stp_settings  *); /*   552     8 */
	int                        (*get_stp_port_status)(struct ofport *, struct ofproto_port_stp_status *); /*   560     8 */
	int                        (*get_stp_port_stats)(struct ofport *, struct ofproto_port_stp_stats *); /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	void                       (*set_rstp)(struct ofproto *, const struct ofproto_rstp_settings  *); /*   576     8 */
	void                       (*get_rstp_status)(struct ofproto *, struct ofproto_rstp_status *); /*   584     8 */
	void                       (*set_rstp_port)(struct ofport *, const struct ofproto_port_rstp_settings  *); /*   592     8 */
	void                       (*get_rstp_port_status)(struct ofport *, struct ofproto_port_rstp_status *); /*   600     8 */
	int                        (*set_queues)(struct ofport *, const struct ofproto_port_queue  *, size_t); /*   608     8 */
	int                        (*bundle_set)(struct ofproto *, void *, const struct ofproto_bundle_settings  *); /*   616     8 */
	void                       (*bundle_remove)(struct ofport *); /*   624     8 */
	int                        (*mirror_set)(struct ofproto *, void *, const struct ofproto_mirror_settings  *); /*   632     8 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	int                        (*mirror_get_stats)(struct ofproto *, void *, uint64_t *, uint64_t *); /*   640     8 */
	int                        (*set_flood_vlans)(struct ofproto *, long unsigned int *); /*   648     8 */
	_Bool                      (*is_mirror_output_bundle)(const struct ofproto  *, void *); /*   656     8 */
	void                       (*forward_bpdu_changed)(struct ofproto *); /*   664     8 */
	void                       (*set_mac_table_config)(struct ofproto *, unsigned int, size_t); /*   672     8 */
	int                        (*set_mcast_snooping)(struct ofproto *, const struct ofproto_mcast_snooping_settings  *); /*   680     8 */
	int                        (*set_mcast_snooping_port)(struct ofproto *, void *, const struct ofproto_mcast_snooping_port_settings  *); /*   688     8 */
	void                       (*meter_get_features)(const struct ofproto  *, struct ofputil_meter_features *); /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	enum ofperr                (*meter_set)(struct ofproto *, ofproto_meter_id *, struct ofputil_meter_config *); /*   704     8 */
	enum ofperr                (*meter_get)(const struct ofproto  *, ofproto_meter_id, struct ofputil_meter_stats *, uint16_t); /*   712     8 */
	void                       (*meter_del)(struct ofproto *, ofproto_meter_id); /*   720     8 */
	struct ofgroup *           (*group_alloc)(void); /*   728     8 */
	enum ofperr                (*group_construct)(struct ofgroup *); /*   736     8 */
	void                       (*group_destruct)(struct ofgroup *); /*   744     8 */
	void                       (*group_dealloc)(struct ofgroup *); /*   752     8 */
	void                       (*group_modify)(struct ofgroup *); /*   760     8 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	enum ofperr                (*group_get_stats)(const struct ofgroup  *, struct ofputil_group_stats *); /*   768     8 */
	const char  *              (*get_datapath_version)(const struct ofproto  *); /*   776     8 */
	void                       (*type_set_config)(const char  *, const struct smap  *); /*   784     8 */
	void                       (*ct_flush)(const struct ofproto  *, const uint16_t  *); /*   792     8 */

	/* size: 800, cachelines: 13, members: 100 */
	/* last cacheline: 32 bytes */
};
struct oftable {
	enum oftable_flags         flags;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct classifier          cls;                  /*     8    96 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	char *                     name;                 /*   104     8 */
	unsigned int               max_flows;            /*   112     4 */
	unsigned int               n_flows;              /*   116     4 */
	struct mf_subfield *       eviction_fields;      /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	size_t                     n_eviction_fields;    /*   128     8 */
	uint32_t                   eviction_group_id_basis; /*   136     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                eviction_groups_by_id; /*   144    32 */
	struct heap                eviction_groups_by_size; /*   176    24 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	enum ofputil_table_miss    miss_config;          /*   200     4 */
	unsigned int               eviction;             /*   204     4 */
	enum ofp14_table_reason    vacancy_event;        /*   208     4 */
	uint8_t                    vacancy_down;         /*   212     1 */
	uint8_t                    vacancy_up;           /*   213     1 */

	/* XXX 2 bytes hole, try to pack */

	atomic_ulong               n_matched;            /*   216     8 */
	atomic_ulong               n_missed;             /*   224     8 */

	/* size: 232, cachelines: 4, members: 17 */
	/* sum members: 222, holes: 3, sum holes: 10 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 40 bytes */
};
struct ofport {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofproto *           ofproto;              /*    16     8 */
	struct netdev *            netdev;               /*    24     8 */
	struct ofputil_phy_port    pp;                   /*    32   116 */
	/* --- cacheline 2 boundary (128 bytes) was 20 bytes ago --- */
	ofp_port_t                 ofp_port;             /*   148     4 */
	uint64_t                   change_seq;           /*   152     8 */
	long long int              created;              /*   160     8 */
	int                        mtu;                  /*   168     4 */

	/* size: 176, cachelines: 3, members: 8 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct rule {
	struct ofproto *const      ofproto;              /*     0     8 */
	struct cls_ruleconst       cr;                   /*     8    48 */
	uint8_tconst               table_id;             /*    56     1 */
	enum rule_state            state;                /*    57     1 */

	/* XXX 6 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_mutex           mutex;                /*    64    48 */
	struct ovs_refcount        ref_count;            /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64const              flow_cookie;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct hindex_node         cookie_node;          /*   128    24 */
	enum ofputil_flow_mod_flags flags;               /*   152     4 */
	uint16_t                   hard_timeout;         /*   156     2 */
	uint16_t                   idle_timeout;         /*   158     2 */
	uint16_tconst              importance;           /*   160     2 */
	uint8_t                    removed_reason;       /*   162     1 */

	/* XXX 5 bytes hole, try to pack */

	struct eviction_group *    eviction_group;       /*   168     8 */
	struct heap_node           evg_node;             /*   176    16 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	const struct rule_actions  *const actions;       /*   192     8 */
	struct ovs_list            meter_list_node;      /*   200    16 */
	enum nx_flow_monitor_flags monitor_flags;        /*   216     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   add_seqno;            /*   224     8 */
	uint64_t                   modify_seqno;         /*   232     8 */
	struct ovs_list            expirable;            /*   240    16 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	long long int              created;              /*   256     8 */
	long long int              modified;             /*   264     8 */
	uint64_t                   match_tlv_bitmap;     /*   272     8 */
	uint64_t                   ofpacts_tlv_bitmap;   /*   280     8 */

	/* size: 288, cachelines: 5, members: 25 */
	/* sum members: 269, holes: 4, sum holes: 19 */
	/* last cacheline: 32 bytes */
};
struct rule_actions {
	_Bool                      has_meter;            /*     0     1 */
	_Bool                      has_learn_with_delete; /*     1     1 */
	_Bool                      has_groups;           /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   ofpacts_len;          /*     4     4 */
	struct ofpact              ofpacts[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 5 */
	/* sum members: 7, holes: 1, sum holes: 1 */
	/* last cacheline: 8 bytes */
};
struct rule_collection {
	struct object_collection   collection;           /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct ofgroup {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct versions            versions;             /*     8    16 */
	struct ovs_refcount        ref_count;            /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofproto *const      ofproto;              /*    32     8 */
	uint32_tconst              group_id;             /*    40     4 */
	enum ofp11_group_typeconst type;                 /*    44     4 */
	_Bool                      being_deleted;        /*    48     1 */

	/* XXX 7 bytes hole, try to pack */

	long long intconst         created;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long long intconst         modified;             /*    64     8 */
	struct ovs_listconst       buckets;              /*    72    16 */
	uint32_tconst              n_buckets;            /*    88     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_group_propsconst props;           /*    96    64 */
	/* --- cacheline 2 boundary (128 bytes) was 32 bytes ago --- */
	struct rule_collection     rules;                /*   160    64 */
	/* --- cacheline 3 boundary (192 bytes) was 32 bytes ago --- */

	/* size: 224, cachelines: 4, members: 13 */
	/* sum members: 209, holes: 3, sum holes: 15 */
	/* last cacheline: 32 bytes */
};
struct ofproto_packet_out {
	ovs_version_t              version;              /*     0     8 */
	struct dp_packet *         packet;               /*     8     8 */
	struct flow *              flow;                 /*    16     8 */
	struct ofpact *            ofpacts;              /*    24     8 */
	size_t                     ofpacts_len;          /*    32     8 */
	void *                     aux;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct aa_settings {
	char *                     system_description;   /*     0     8 */
	char *                     system_name;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct aa_mapping_settings {
	uint32_t                   isid;                 /*     0     4 */
	uint16_t                   vlan;                 /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct token_bucket {
	unsigned int               rate;                 /*     0     4 */
	unsigned int               burst;                /*     4     4 */
	unsigned int               tokens;               /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_fill;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct vlog_rate_limit {
	struct token_bucket        token_bucket;         /*     0    24 */
	time_t                     first_dropped;        /*    24     8 */
	time_t                     last_dropped;         /*    32     8 */
	unsigned int               n_dropped;            /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    48    48 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 5 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct iface {
	struct ovs_list            port_elem;            /*     0    16 */
	struct hmap_node           name_node;            /*    16    16 */
	struct hmap_node           ofp_port_node;        /*    32    16 */
	struct port *              port;                 /*    48     8 */
	char *                     name;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct netdev *            netdev;               /*    64     8 */
	ofp_port_t                 ofp_port;             /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   change_seq;           /*    80     8 */
	const char  *              type;                 /*    88     8 */
	const char  *              netdev_type;          /*    96     8 */
	const struct ovsrec_interface  * cfg;            /*   104     8 */

	/* size: 112, cachelines: 2, members: 11 */
	/* sum members: 108, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct bridge_aa_vlan {
	struct ovs_list            list_node;            /*     0    16 */
	char *                     port_name;            /*    16     8 */
	uint16_t                   vlan;                 /*    24     2 */

	/* XXX 2 bytes hole, try to pack */

	enum bridge_aa_vlan_oper   oper;                 /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_integer_constraints {
	int64_t                    min;                  /*     0     8 */
	int64_t                    max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_real_constraints {
	double                     min;                  /*     0     8 */
	double                     max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_string_constraints {
	unsigned int               minLen;               /*     0     4 */
	unsigned int               maxLen;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_uuid_constraints {
	char *                     refTableName;         /*     0     8 */
	struct ovsdb_table *       refTable;             /*     8     8 */
	enum ovsdb_ref_type        refType;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_base_type {
	enum ovsdb_atomic_type     type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_datum *       enum_;                /*     8     8 */
	union {
		struct ovsdb_integer_constraints integer; /*          16 */
		struct ovsdb_real_constraints real;      /*          16 */
		struct ovsdb_string_constraints string;  /*           8 */
		struct ovsdb_uuid_constraints uuid;      /*          24 */
	} u;                                             /*    16    24 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_datum {
	unsigned int               n;                    /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union ovsdb_atom *         keys;                 /*     8     8 */
	union ovsdb_atom *         values;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_type {
	struct ovsdb_base_type     key;                  /*     0    40 */
	struct ovsdb_base_type     value;                /*    40    40 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               n_min;                /*    80     4 */
	unsigned int               n_max;                /*    84     4 */

	/* size: 88, cachelines: 2, members: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_idl_condition {
	struct hmap                clauses;              /*     0    32 */
	_Bool                      is_true;              /*    32     1 */

	/* size: 40, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_idl_row {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct uuid                uuid;                 /*    16    16 */
	struct ovs_list            src_arcs;             /*    32    16 */
	struct ovs_list            dst_arcs;             /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovsdb_idl_table *   table;                /*    64     8 */
	struct ovsdb_datum *       old_datum;            /*    72     8 */
	struct ovsdb_datum *       new_datum;            /*    80     8 */
	long unsigned int *        prereqs;              /*    88     8 */
	long unsigned int *        written;              /*    96     8 */
	struct hmap_node           txn_node;             /*   104    16 */
	long unsigned int *        map_op_written;       /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct map_op_list * *     map_op_lists;         /*   128     8 */
	long unsigned int *        set_op_written;       /*   136     8 */
	struct set_op_list * *     set_op_lists;         /*   144     8 */
	unsigned int               change_seqno[3];      /*   152    12 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            track_node;           /*   168    16 */
	long unsigned int *        updated;              /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 17 */
	/* sum members: 188, holes: 1, sum holes: 4 */
};
struct ovsdb_idl_table {
	const struct ovsdb_idl_table_class  * class_;    /*     0     8 */
	unsigned char *            modes;                /*     8     8 */
	_Bool                      need_table;           /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	struct shash               columns;              /*    24    32 */
	struct hmap                rows;                 /*    56    32 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	struct ovsdb_idl *         idl;                  /*    88     8 */
	unsigned int               change_seqno[3];      /*    96    12 */

	/* XXX 4 bytes hole, try to pack */

	struct shash               indexes;              /*   112    32 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct ovs_list            track_list;           /*   144    16 */
	struct ovsdb_idl_condition condition;            /*   160    40 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	_Bool                      cond_changed;         /*   200     1 */

	/* size: 208, cachelines: 4, members: 11 */
	/* sum members: 190, holes: 2, sum holes: 11 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_idl_column {
	char *                     name;                 /*     0     8 */
	struct ovsdb_type          type;                 /*     8    88 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	_Bool                      is_mutable;           /*    96     1 */

	/* XXX 7 bytes hole, try to pack */

	void                       (*parse)(struct ovsdb_idl_row *, const struct ovsdb_datum  *); /*   104     8 */
	void                       (*unparse)(struct ovsdb_idl_row *); /*   112     8 */

	/* size: 120, cachelines: 2, members: 5 */
	/* sum members: 113, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_table_class {
	char *                     name;                 /*     0     8 */
	_Bool                      is_root;              /*     8     1 */
	_Bool                      is_singleton;         /*     9     1 */

	/* XXX 6 bytes hole, try to pack */

	const struct ovsdb_idl_column  * columns;        /*    16     8 */
	size_t                     n_columns;            /*    24     8 */
	size_t                     allocation_size;      /*    32     8 */
	void                       (*row_init)(struct ovsdb_idl_row *); /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_idl_class {
	const char  *              database;             /*     0     8 */
	const struct ovsdb_idl_table_class  * tables;    /*     8     8 */
	size_t                     n_tables;             /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_autoattach {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  key_mappings;         /*   192     8 */
	int64_t *                  value_mappings;       /*   200     8 */
	size_t                     n_mappings;           /*   208     8 */
	char *                     system_description;   /*   216     8 */
	char *                     system_name;          /*   224     8 */

	/* size: 232, cachelines: 4, members: 6 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_bridge {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_autoattach * auto_attach;          /*   192     8 */
	struct ovsrec_controller * * controller;         /*   200     8 */
	size_t                     n_controller;         /*   208     8 */
	char *                     datapath_id;          /*   216     8 */
	char *                     datapath_type;        /*   224     8 */
	char *                     datapath_version;     /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char *                     fail_mode;            /*   272     8 */
	int64_t *                  flood_vlans;          /*   280     8 */
	size_t                     n_flood_vlans;        /*   288     8 */
	int64_t *                  key_flow_tables;      /*   296     8 */
	struct ovsrec_flow_table * * value_flow_tables;  /*   304     8 */
	size_t                     n_flow_tables;        /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	struct ovsrec_ipfix *      ipfix;                /*   320     8 */
	_Bool                      mcast_snooping_enable; /*   328     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_mirror * *   mirrors;              /*   336     8 */
	size_t                     n_mirrors;            /*   344     8 */
	char *                     name;                 /*   352     8 */
	struct ovsrec_netflow *    netflow;              /*   360     8 */
	struct smap                other_config;         /*   368    32 */
	/* --- cacheline 6 boundary (384 bytes) was 16 bytes ago --- */
	struct ovsrec_port * *     ports;                /*   400     8 */
	size_t                     n_ports;              /*   408     8 */
	char * *                   protocols;            /*   416     8 */
	size_t                     n_protocols;          /*   424     8 */
	_Bool                      rstp_enable;          /*   432     1 */

	/* XXX 7 bytes hole, try to pack */

	struct smap                rstp_status;          /*   440    32 */
	/* --- cacheline 7 boundary (448 bytes) was 24 bytes ago --- */
	struct ovsrec_sflow *      sflow;                /*   472     8 */
	struct smap                status;               /*   480    32 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	_Bool                      stp_enable;           /*   512     1 */

	/* size: 520, cachelines: 9, members: 30 */
	/* sum members: 499, holes: 2, sum holes: 14 */
	/* padding: 7 */
	/* last cacheline: 8 bytes */
};
struct ovsrec_controller {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     connection_mode;      /*   192     8 */
	int64_t *                  controller_burst_limit; /*   200     8 */
	size_t                     n_controller_burst_limit; /*   208     8 */
	int64_t *                  controller_rate_limit; /*   216     8 */
	size_t                     n_controller_rate_limit; /*   224     8 */
	_Bool *                    enable_async_messages; /*   232     8 */
	size_t                     n_enable_async_messages; /*   240     8 */
	struct smap                external_ids;         /*   248    32 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	int64_t *                  inactivity_probe;     /*   280     8 */
	size_t                     n_inactivity_probe;   /*   288     8 */
	_Bool                      is_connected;         /*   296     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     local_gateway;        /*   304     8 */
	char *                     local_ip;             /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	char *                     local_netmask;        /*   320     8 */
	int64_t *                  max_backoff;          /*   328     8 */
	size_t                     n_max_backoff;        /*   336     8 */
	struct smap                other_config;         /*   344    32 */
	char *                     role;                 /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct smap                status;               /*   384    32 */
	char *                     target;               /*   416     8 */

	/* size: 424, cachelines: 7, members: 21 */
	/* sum members: 417, holes: 1, sum holes: 7 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_flow_table {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	int64_t *                  flow_limit;           /*   224     8 */
	size_t                     n_flow_limit;         /*   232     8 */
	char * *                   groups;               /*   240     8 */
	size_t                     n_groups;             /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	char *                     name;                 /*   256     8 */
	char *                     overflow_policy;      /*   264     8 */
	char * *                   prefixes;             /*   272     8 */
	size_t                     n_prefixes;           /*   280     8 */

	/* size: 288, cachelines: 5, members: 10 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_ipfix {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  cache_active_timeout; /*   192     8 */
	size_t                     n_cache_active_timeout; /*   200     8 */
	int64_t *                  cache_max_flows;      /*   208     8 */
	size_t                     n_cache_max_flows;    /*   216     8 */
	struct smap                external_ids;         /*   224    32 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  obs_domain_id;        /*   256     8 */
	size_t                     n_obs_domain_id;      /*   264     8 */
	int64_t *                  obs_point_id;         /*   272     8 */
	size_t                     n_obs_point_id;       /*   280     8 */
	struct smap                other_config;         /*   288    32 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	int64_t *                  sampling;             /*   320     8 */
	size_t                     n_sampling;           /*   328     8 */
	char * *                   targets;              /*   336     8 */
	size_t                     n_targets;            /*   344     8 */

	/* size: 352, cachelines: 6, members: 15 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_mirror {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	char *                     name;                 /*   224     8 */
	struct ovsrec_port *       output_port;          /*   232     8 */
	int64_t *                  output_vlan;          /*   240     8 */
	size_t                     n_output_vlan;        /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	_Bool                      select_all;           /*   256     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_port * *     select_dst_port;      /*   264     8 */
	size_t                     n_select_dst_port;    /*   272     8 */
	struct ovsrec_port * *     select_src_port;      /*   280     8 */
	size_t                     n_select_src_port;    /*   288     8 */
	int64_t *                  select_vlan;          /*   296     8 */
	size_t                     n_select_vlan;        /*   304     8 */
	int64_t *                  snaplen;              /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	size_t                     n_snaplen;            /*   320     8 */
	char * *                   key_statistics;       /*   328     8 */
	int64_t *                  value_statistics;     /*   336     8 */
	size_t                     n_statistics;         /*   344     8 */

	/* size: 352, cachelines: 6, members: 18 */
	/* sum members: 345, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_netflow {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t                    active_timeout;       /*   192     8 */
	_Bool                      add_id_to_interface;  /*   200     1 */

	/* XXX 7 bytes hole, try to pack */

	int64_t *                  engine_id;            /*   208     8 */
	size_t                     n_engine_id;          /*   216     8 */
	int64_t *                  engine_type;          /*   224     8 */
	size_t                     n_engine_type;        /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char * *                   targets;              /*   272     8 */
	size_t                     n_targets;            /*   280     8 */

	/* size: 288, cachelines: 5, members: 10 */
	/* sum members: 281, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_port {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     bond_active_slave;    /*   192     8 */
	int64_t                    bond_downdelay;       /*   200     8 */
	_Bool                      bond_fake_iface;      /*   208     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     bond_mode;            /*   216     8 */
	int64_t                    bond_updelay;         /*   224     8 */
	int64_t *                  cvlans;               /*   232     8 */
	size_t                     n_cvlans;             /*   240     8 */
	struct smap                external_ids;         /*   248    32 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	_Bool                      fake_bridge;          /*   280     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_interface * * interfaces;          /*   288     8 */
	size_t                     n_interfaces;         /*   296     8 */
	char *                     lacp;                 /*   304     8 */
	char *                     mac;                  /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	char *                     name;                 /*   320     8 */
	struct smap                other_config;         /*   328    32 */
	_Bool                      protected_;           /*   360     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_qos *        qos;                  /*   368     8 */
	char * *                   key_rstp_statistics;  /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	int64_t *                  value_rstp_statistics; /*   384     8 */
	size_t                     n_rstp_statistics;    /*   392     8 */
	struct smap                rstp_status;          /*   400    32 */
	char * *                   key_statistics;       /*   432     8 */
	int64_t *                  value_statistics;     /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	size_t                     n_statistics;         /*   448     8 */
	struct smap                status;               /*   456    32 */
	int64_t *                  tag;                  /*   488     8 */
	size_t                     n_tag;                /*   496     8 */
	int64_t *                  trunks;               /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	size_t                     n_trunks;             /*   512     8 */
	char *                     vlan_mode;            /*   520     8 */

	/* size: 528, cachelines: 9, members: 31 */
	/* sum members: 507, holes: 3, sum holes: 21 */
	/* last cacheline: 16 bytes */
};
struct ovsrec_sflow {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     agent;                /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t *                  header;               /*   232     8 */
	size_t                     n_header;             /*   240     8 */
	int64_t *                  polling;              /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	size_t                     n_polling;            /*   256     8 */
	int64_t *                  sampling;             /*   264     8 */
	size_t                     n_sampling;           /*   272     8 */
	char * *                   targets;              /*   280     8 */
	size_t                     n_targets;            /*   288     8 */

	/* size: 296, cachelines: 5, members: 11 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_flow_sample_collector_set {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_bridge *     bridge;               /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t                    id;                   /*   232     8 */
	struct ovsrec_ipfix *      ipfix;                /*   240     8 */

	/* size: 248, cachelines: 4, members: 5 */
	/* last cacheline: 56 bytes */
};
struct ovsrec_interface {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     admin_state;          /*   192     8 */
	struct smap                bfd;                  /*   200    32 */
	struct smap                bfd_status;           /*   232    32 */
	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */
	_Bool *                    cfm_fault;            /*   264     8 */
	size_t                     n_cfm_fault;          /*   272     8 */
	char * *                   cfm_fault_status;     /*   280     8 */
	size_t                     n_cfm_fault_status;   /*   288     8 */
	int64_t *                  cfm_flap_count;       /*   296     8 */
	size_t                     n_cfm_flap_count;     /*   304     8 */
	int64_t *                  cfm_health;           /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	size_t                     n_cfm_health;         /*   320     8 */
	int64_t *                  cfm_mpid;             /*   328     8 */
	size_t                     n_cfm_mpid;           /*   336     8 */
	int64_t *                  cfm_remote_mpids;     /*   344     8 */
	size_t                     n_cfm_remote_mpids;   /*   352     8 */
	char *                     cfm_remote_opstate;   /*   360     8 */
	char *                     duplex;               /*   368     8 */
	char *                     error;                /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct smap                external_ids;         /*   384    32 */
	int64_t *                  ifindex;              /*   416     8 */
	size_t                     n_ifindex;            /*   424     8 */
	int64_t                    ingress_policing_burst; /*   432     8 */
	int64_t                    ingress_policing_rate; /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	_Bool *                    lacp_current;         /*   448     8 */
	size_t                     n_lacp_current;       /*   456     8 */
	int64_t *                  link_resets;          /*   464     8 */
	size_t                     n_link_resets;        /*   472     8 */
	int64_t *                  link_speed;           /*   480     8 */
	size_t                     n_link_speed;         /*   488     8 */
	char *                     link_state;           /*   496     8 */
	struct smap                lldp;                 /*   504    32 */
	/* --- cacheline 8 boundary (512 bytes) was 24 bytes ago --- */
	char *                     mac;                  /*   536     8 */
	char *                     mac_in_use;           /*   544     8 */
	int64_t *                  mtu;                  /*   552     8 */
	size_t                     n_mtu;                /*   560     8 */
	int64_t *                  mtu_request;          /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	size_t                     n_mtu_request;        /*   576     8 */
	char *                     name;                 /*   584     8 */
	int64_t *                  ofport;               /*   592     8 */
	size_t                     n_ofport;             /*   600     8 */
	int64_t *                  ofport_request;       /*   608     8 */
	size_t                     n_ofport_request;     /*   616     8 */
	struct smap                options;              /*   624    32 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	struct smap                other_config;         /*   656    32 */
	char * *                   key_statistics;       /*   688     8 */
	int64_t *                  value_statistics;     /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	size_t                     n_statistics;         /*   704     8 */
	struct smap                status;               /*   712    32 */
	char *                     type;                 /*   744     8 */

	/* size: 752, cachelines: 12, members: 50 */
	/* last cacheline: 48 bytes */
};
struct ovsrec_manager {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     connection_mode;      /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t *                  inactivity_probe;     /*   232     8 */
	size_t                     n_inactivity_probe;   /*   240     8 */
	_Bool                      is_connected;         /*   248     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  max_backoff;          /*   256     8 */
	size_t                     n_max_backoff;        /*   264     8 */
	struct smap                other_config;         /*   272    32 */
	struct smap                status;               /*   304    32 */
	/* --- cacheline 5 boundary (320 bytes) was 16 bytes ago --- */
	char *                     target;               /*   336     8 */

	/* size: 344, cachelines: 6, members: 11 */
	/* sum members: 337, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_open_vswitch {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_bridge * *   bridges;              /*   192     8 */
	size_t                     n_bridges;            /*   200     8 */
	int64_t                    cur_cfg;              /*   208     8 */
	char * *                   datapath_types;       /*   216     8 */
	size_t                     n_datapath_types;     /*   224     8 */
	char *                     db_version;           /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char * *                   iface_types;          /*   272     8 */
	size_t                     n_iface_types;        /*   280     8 */
	struct ovsrec_manager * *  manager_options;      /*   288     8 */
	size_t                     n_manager_options;    /*   296     8 */
	int64_t                    next_cfg;             /*   304     8 */
	struct smap                other_config;         /*   312    32 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	char *                     ovs_version;          /*   344     8 */
	struct ovsrec_ssl *        ssl;                  /*   352     8 */
	struct smap                statistics;           /*   360    32 */
	/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */
	char *                     system_type;          /*   392     8 */
	char *                     system_version;       /*   400     8 */

	/* size: 408, cachelines: 7, members: 19 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_ssl {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	_Bool                      bootstrap_ca_cert;    /*   192     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     ca_cert;              /*   200     8 */
	char *                     certificate;          /*   208     8 */
	struct smap                external_ids;         /*   216    32 */
	char *                     private_key;          /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 6 */
	/* sum members: 249, holes: 1, sum holes: 7 */
};
struct ovsrec_qos {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	struct smap                other_config;         /*   224    32 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  key_queues;           /*   256     8 */
	struct ovsrec_queue * *    value_queues;         /*   264     8 */
	size_t                     n_queues;             /*   272     8 */
	char *                     type;                 /*   280     8 */

	/* size: 288, cachelines: 5, members: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_queue {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  dscp;                 /*   192     8 */
	size_t                     n_dscp;               /*   200     8 */
	struct smap                external_ids;         /*   208    32 */
	struct smap                other_config;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 5 */
	/* last cacheline: 16 bytes */
};
struct port {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct bridge *            bridge;               /*    16     8 */
	char *                     name;                 /*    24     8 */
	const struct ovsrec_port  * cfg;                 /*    32     8 */
	struct ovs_list            ifaces;               /*    40    16 */

	/* size: 56, cachelines: 1, members: 5 */
	/* last cacheline: 56 bytes */
};
struct mirror {
	struct uuid                uuid;                 /*     0    16 */
	struct hmap_node           hmap_node;            /*    16    16 */
	struct bridge *            bridge;               /*    32     8 */
	char *                     name;                 /*    40     8 */
	const struct ovsrec_mirror  * cfg;               /*    48     8 */

	/* size: 56, cachelines: 1, members: 5 */
	/* last cacheline: 56 bytes */
};
struct bridge {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	char *                     type;                 /*    24     8 */
	struct eth_addr            ea;                   /*    32     6 */
	struct eth_addr            default_ea;           /*    38     6 */

	/* XXX 4 bytes hole, try to pack */

	const struct ovsrec_bridge  * cfg;               /*    48     8 */
	struct ofproto *           ofproto;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct hmap                ports;                /*    64    32 */
	struct hmap                ifaces;               /*    96    32 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct hmap                iface_by_name;        /*   128    32 */
	struct hmap                mirrors;              /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct hmap                mappings;             /*   192    32 */
	struct shash               wanted_ports;         /*   224    32 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct ovsrec_port         synth_local_port;     /*   256   528 */
	/* --- cacheline 12 boundary (768 bytes) was 16 bytes ago --- */
	struct ovsrec_interface    synth_local_iface;    /*   784   752 */
	/* --- cacheline 24 boundary (1536 bytes) --- */
	struct ovsrec_interface *  synth_local_ifacep;   /*  1536     8 */

	/* size: 1544, cachelines: 25, members: 16 */
	/* sum members: 1540, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct aa_mapping {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct bridge *            bridge;               /*    16     8 */
	uint32_t                   isid;                 /*    24     4 */
	uint16_t                   vlan;                 /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	char *                     br_name;              /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* sum members: 38, holes: 1, sum holes: 2 */
	/* last cacheline: 40 bytes */
};
struct __pthread_internal_list {
	struct __pthread_internal_list * __prev;         /*     0     8 */
	struct __pthread_internal_list * __next;         /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct __pthread_mutex_s {
	int                        __lock;               /*     0     4 */
	unsigned int               __count;              /*     4     4 */
	int                        __owner;              /*     8     4 */
	unsigned int               __nusers;             /*    12     4 */
	int                        __kind;               /*    16     4 */
	short int                  __spins;              /*    20     2 */
	short int                  __elision;            /*    22     2 */
	__pthread_list_t           __list;               /*    24    16 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct in6_addr {
	union {
		uint8_t            __u6_addr8[16];       /*          16 */
		uint16_t           __u6_addr16[8];       /*          16 */
		uint32_t           __u6_addr32[4];       /*          16 */
	} __in6_u;                                       /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct eth_addr {
	union {
		uint8_t            ea[6];                /*           6 */
		ovs_be16           be16[3];              /*           6 */
	};                                               /*     0     6 */

	/* size: 6, cachelines: 1, members: 1 */
	/* last cacheline: 6 bytes */
};
struct eth_addr64 {
	union {
		uint8_t            ea64[8];              /*           8 */
		ovs_be16           be16[4];              /*           8 */
	};                                               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct ovs_refcount {
	unsigned int               count;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct cmap_node {
	struct {
		struct cmap_node * p;                    /*     0     8 */
	} next;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct cmap {
	struct {
		struct cmap_impl * p;                    /*     0     8 */
	} impl;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct ofp_header {
	uint8_t                    version;              /*     0     1 */
	uint8_t                    type;                 /*     1     1 */
	ovs_be16                   length;               /*     2     2 */
	ovs_be32                   xid;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct geneve_opt {
	ovs_be16                   opt_class;            /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    length:5;             /*     3: 3  1 */
	uint8_t                    r3:1;                 /*     3: 2  1 */
	uint8_t                    r2:1;                 /*     3: 1  1 */
	uint8_t                    r1:1;                 /*     3: 0  1 */

	/* size: 4, cachelines: 1, members: 6 */
	/* last cacheline: 4 bytes */
};
struct tun_metadata {
	union {
		uint64_t           map;                  /*           8 */
		uint8_t            len;                  /*           1 */
	} present;                                       /*     0     8 */
	const struct tun_table  *  tab;                  /*     8     8 */
	union {
		uint8_t            u8[256];              /*         256 */
		struct geneve_opt  gnv[63];              /*         252 */
	} opts;                                          /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc_chain {
	struct tun_metadata_loc_chain * next;            /*     0     8 */
	int                        offset;               /*     8     4 */
	int                        len;                  /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc {
	int                        len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct tun_metadata_loc_chain c;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct tun_metadata_match_entry {
	struct tun_metadata_loc    loc;                  /*     0    24 */
	_Bool                      masked;               /*    24     1 */

	/* size: 32, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct tun_metadata_allocation {
	struct tun_metadata_match_entry entry[64];       /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */
	int                        alloc_offset;         /*  2048     4 */
	_Bool                      valid;                /*  2052     1 */

	/* size: 2056, cachelines: 33, members: 3 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct flow_tnl {
	ovs_be32                   ip_dst;               /*     0     4 */
	struct in6_addr            ipv6_dst;             /*     4    16 */
	ovs_be32                   ip_src;               /*    20     4 */
	struct in6_addr            ipv6_src;             /*    24    16 */
	ovs_be64                   tun_id;               /*    40     8 */
	uint16_t                   flags;                /*    48     2 */
	uint8_t                    ip_tos;               /*    50     1 */
	uint8_t                    ip_ttl;               /*    51     1 */
	ovs_be16                   tp_src;               /*    52     2 */
	ovs_be16                   tp_dst;               /*    54     2 */
	ovs_be16                   gbp_id;               /*    56     2 */
	uint8_t                    gbp_flags;            /*    58     1 */

	/* XXX 1 byte hole, try to pack */

	ovs_be32                   erspan_idx;           /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint8_t                    erspan_ver:2;         /*    64: 6  1 */
	uint8_t                    erspan_dir:1;         /*    64: 5  1 */
	uint8_t                    erspan_hwid:5;        /*    64: 0  1 */

	/* XXX 7 bytes hole, try to pack */

	struct tun_metadata        metadata;             /*    72   272 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 17 */
	/* sum members: 336, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct flow_nsh {
	uint8_t                    flags;                /*     0     1 */
	uint8_t                    mdtype;               /*     1     1 */
	uint8_t                    np;                   /*     2     1 */
	uint8_t                    si;                   /*     3     1 */
	ovs_be32                   spi;                  /*     4     4 */
	ovs_be32                   c[4];                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct flow {
	struct flow_tnl            tunnel;               /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	ovs_be64                   metadata;             /*   344     8 */
	uint32_t                   regs[16];             /*   352    64 */
	/* --- cacheline 6 boundary (384 bytes) was 32 bytes ago --- */
	uint32_t                   skb_priority;         /*   416     4 */
	uint32_t                   pkt_mark;             /*   420     4 */
	uint32_t                   dp_hash;              /*   424     4 */
	union flow_in_port         in_port;              /*   428     4 */
	uint32_t                   recirc_id;            /*   432     4 */
	uint8_t                    ct_state;             /*   436     1 */
	uint8_t                    ct_nw_proto;          /*   437     1 */
	uint16_t                   ct_zone;              /*   438     2 */
	uint32_t                   ct_mark;              /*   440     4 */
	ovs_be32                   packet_type;          /*   444     4 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	ovs_u128                   ct_label;             /*   448    16 */
	uint32_t                   conj_id;              /*   464     4 */
	ofp_port_t                 actset_output;        /*   468     4 */
	struct eth_addr            dl_dst;               /*   472     6 */
	struct eth_addr            dl_src;               /*   478     6 */
	ovs_be16                   dl_type;              /*   484     2 */
	uint8_t                    pad1[2];              /*   486     2 */
	union flow_vlan_hdr        vlans[2];             /*   488     8 */
	ovs_be32                   mpls_lse[4];          /*   496    16 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	ovs_be32                   nw_src;               /*   512     4 */
	ovs_be32                   nw_dst;               /*   516     4 */
	ovs_be32                   ct_nw_src;            /*   520     4 */
	ovs_be32                   ct_nw_dst;            /*   524     4 */
	struct in6_addr            ipv6_src;             /*   528    16 */
	struct in6_addr            ipv6_dst;             /*   544    16 */
	struct in6_addr            ct_ipv6_src;          /*   560    16 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	struct in6_addr            ct_ipv6_dst;          /*   576    16 */
	ovs_be32                   ipv6_label;           /*   592     4 */
	uint8_t                    nw_frag;              /*   596     1 */
	uint8_t                    nw_tos;               /*   597     1 */
	uint8_t                    nw_ttl;               /*   598     1 */
	uint8_t                    nw_proto;             /*   599     1 */
	struct in6_addr            nd_target;            /*   600    16 */
	struct eth_addr            arp_sha;              /*   616     6 */
	struct eth_addr            arp_tha;              /*   622     6 */
	ovs_be16                   tcp_flags;            /*   628     2 */
	ovs_be16                   pad2;                 /*   630     2 */
	struct flow_nsh            nsh;                  /*   632    24 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	ovs_be16                   tp_src;               /*   656     2 */
	ovs_be16                   tp_dst;               /*   658     2 */
	ovs_be16                   ct_tp_src;            /*   660     2 */
	ovs_be16                   ct_tp_dst;            /*   662     2 */
	ovs_be32                   igmp_group_ip4;       /*   664     4 */
	ovs_be32                   pad3;                 /*   668     4 */

	/* size: 672, cachelines: 11, members: 47 */
	/* last cacheline: 32 bytes */
};
struct flow_wildcards {
	struct flow                masks;                /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */

	/* size: 672, cachelines: 11, members: 1 */
	/* last cacheline: 32 bytes */
};
struct match {
	struct flow                flow;                 /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */
	struct flow_wildcards      wc;                   /*   672   672 */
	/* --- cacheline 21 boundary (1344 bytes) --- */
	struct tun_metadata_allocation tun_md;           /*  1344  2056 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */

	/* size: 3400, cachelines: 54, members: 3 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 8 bytes */
};
struct miniflow {
	struct flowmap             map;                  /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct minimask {
	struct miniflow            masks;                /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct minimatch {
	union {
		struct {
			struct miniflow * flow;          /*     0     8 */
			struct minimask * mask;          /*     8     8 */
		};                                       /*          16 */
		struct miniflow *  flows[2];             /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct mf_bitmap {
	long unsigned int          bm[3];                /*     0    24 */

	/* size: 24, cachelines: 1, members: 1 */
	/* last cacheline: 24 bytes */
};
struct mf_field {
	enum mf_field_id           id;                   /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	const char  *              extra_name;           /*    16     8 */
	unsigned int               n_bytes;              /*    24     4 */
	unsigned int               n_bits;               /*    28     4 */
	_Bool                      variable_len;         /*    32     1 */
	enum mf_maskable           maskable;             /*    33     1 */
	enum mf_string             string;               /*    34     1 */
	enum mf_prereqs            prereqs;              /*    35     1 */
	_Bool                      writable;             /*    36     1 */
	_Bool                      mapped;               /*    37     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   usable_protocols_exact; /*    40     4 */
	uint32_t                   usable_protocols_cidr; /*    44     4 */
	uint32_t                   usable_protocols_bitwise; /*    48     4 */
	int                        flow_be32ofs;         /*    52     4 */

	/* size: 56, cachelines: 1, members: 15 */
	/* sum members: 47, holes: 2, sum holes: 9 */
	/* last cacheline: 56 bytes */
};
struct mf_subfield {
	const struct mf_field  *   field;                /*     0     8 */
	unsigned int               ofs;                  /*     8     4 */
	unsigned int               n_bits;               /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct field_array {
	struct mf_bitmap           used;                 /*     0    24 */
	size_t                     values_size;          /*    24     8 */
	uint8_t *                  values;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct pvector_entry {
	int                        priority;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     ptr;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct pvector_impl {
	size_t                     size;                 /*     0     8 */
	size_t                     allocated;            /*     8     8 */
	struct pvector_entry       vector[0];            /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct pvector {
	struct {
		struct pvector_impl * p;                 /*     0     8 */
	} impl;                                          /*     0     8 */
	struct pvector_impl *      temp;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct rculist {
	struct rculist *           prev;                 /*     0     8 */
	struct {
		struct rculist *   p;                    /*     8     8 */
	} next;                                          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct versions {
	ovs_version_t              add_version;          /*     0     8 */
	ovs_version_t              remove_version;       /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct cls_trie {
	const struct mf_field  *   field;                /*     0     8 */
	rcu_trie_ptr               root;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct classifier {
	int                        n_rules;              /*     0     4 */
	uint8_t                    n_flow_segments;      /*     4     1 */
	uint8_t                    flow_segments[3];     /*     5     3 */
	struct cmap                subtables_map;        /*     8     8 */
	struct pvector             subtables;            /*    16    16 */
	struct cmap                partitions;           /*    32     8 */
	struct cls_trie            tries[3];             /*    40    48 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	unsigned int               n_tries;              /*    88     4 */
	_Bool                      publish;              /*    92     1 */

	/* size: 96, cachelines: 2, members: 9 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct cls_conjunction {
	uint32_t                   id;                   /*     0     4 */
	uint8_t                    clause;               /*     4     1 */
	uint8_t                    n_clauses;            /*     5     1 */

	/* size: 8, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct cls_rule {
	struct rculist             node;                 /*     0    16 */
	intconst                   priority;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct {
		struct cls_match * p;                    /*    24     8 */
	} cls_match;                                     /*    24     8 */
	struct minimatchconst      match;                /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct hmap_node {
	size_t                     hash;                 /*     0     8 */
	struct hmap_node *         next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct hmap {
	struct hmap_node * *       buckets;              /*     0     8 */
	struct hmap_node *         one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n;                    /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct ovs_list {
	struct ovs_list *          prev;                 /*     0     8 */
	struct ovs_list *          next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct netdev_stats {
	uint64_t                   rx_packets;           /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   rx_bytes;             /*    16     8 */
	uint64_t                   tx_bytes;             /*    24     8 */
	uint64_t                   rx_errors;            /*    32     8 */
	uint64_t                   tx_errors;            /*    40     8 */
	uint64_t                   rx_dropped;           /*    48     8 */
	uint64_t                   tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   multicast;            /*    64     8 */
	uint64_t                   collisions;           /*    72     8 */
	uint64_t                   rx_length_errors;     /*    80     8 */
	uint64_t                   rx_over_errors;       /*    88     8 */
	uint64_t                   rx_crc_errors;        /*    96     8 */
	uint64_t                   rx_frame_errors;      /*   104     8 */
	uint64_t                   rx_fifo_errors;       /*   112     8 */
	uint64_t                   rx_missed_errors;     /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint64_t                   tx_aborted_errors;    /*   128     8 */
	uint64_t                   tx_carrier_errors;    /*   136     8 */
	uint64_t                   tx_fifo_errors;       /*   144     8 */
	uint64_t                   tx_heartbeat_errors;  /*   152     8 */
	uint64_t                   tx_window_errors;     /*   160     8 */
	uint64_t                   rx_1_to_64_packets;   /*   168     8 */
	uint64_t                   rx_65_to_127_packets; /*   176     8 */
	uint64_t                   rx_128_to_255_packets; /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	uint64_t                   rx_256_to_511_packets; /*   192     8 */
	uint64_t                   rx_512_to_1023_packets; /*   200     8 */
	uint64_t                   rx_1024_to_1522_packets; /*   208     8 */
	uint64_t                   rx_1523_to_max_packets; /*   216     8 */
	uint64_t                   tx_1_to_64_packets;   /*   224     8 */
	uint64_t                   tx_65_to_127_packets; /*   232     8 */
	uint64_t                   tx_128_to_255_packets; /*   240     8 */
	uint64_t                   tx_256_to_511_packets; /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	uint64_t                   tx_512_to_1023_packets; /*   256     8 */
	uint64_t                   tx_1024_to_1522_packets; /*   264     8 */
	uint64_t                   tx_1523_to_max_packets; /*   272     8 */
	uint64_t                   tx_multicast_packets; /*   280     8 */
	uint64_t                   rx_broadcast_packets; /*   288     8 */
	uint64_t                   tx_broadcast_packets; /*   296     8 */
	uint64_t                   rx_undersized_errors; /*   304     8 */
	uint64_t                   rx_oversize_errors;   /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	uint64_t                   rx_fragmented_errors; /*   320     8 */
	uint64_t                   rx_jabber_errors;     /*   328     8 */

	/* size: 336, cachelines: 6, members: 42 */
	/* last cacheline: 16 bytes */
};
struct uuid {
	uint32_t                   parts[4];             /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct ofpact {
	enum ofpact_type           type;                 /*     0     1 */
	uint8_t                    raw;                  /*     1     1 */
	uint16_t                   len;                  /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofputil_packet_in {
	void *                     packet;               /*     0     8 */
	size_t                     packet_len;           /*     8     8 */
	struct match               flow_metadata;        /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	enum ofp_packet_in_reason  reason;               /*  3416     4 */
	uint8_t                    table_id;             /*  3420     1 */

	/* XXX 3 bytes hole, try to pack */

	ovs_be64                   cookie;               /*  3424     8 */
	uint8_t *                  userdata;             /*  3432     8 */
	size_t                     userdata_len;         /*  3440     8 */

	/* size: 3448, cachelines: 54, members: 8 */
	/* sum members: 3445, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct ofputil_packet_in_private {
	struct ofputil_packet_in   base;                 /*     0  3448 */
	/* --- cacheline 53 boundary (3392 bytes) was 56 bytes ago --- */
	struct uuid                bridge;               /*  3448    16 */
	/* --- cacheline 54 boundary (3456 bytes) was 8 bytes ago --- */
	uint8_t *                  stack;                /*  3464     8 */
	size_t                     stack_size;           /*  3472     8 */
	uint32_t                   mirrors;              /*  3480     4 */
	_Bool                      conntracked;          /*  3484     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ofpact *            actions;              /*  3488     8 */
	size_t                     actions_len;          /*  3496     8 */
	struct ofpact *            action_set;           /*  3504     8 */
	size_t                     action_set_len;       /*  3512     8 */
	/* --- cacheline 55 boundary (3520 bytes) --- */

	/* size: 3520, cachelines: 55, members: 10 */
	/* sum members: 3517, holes: 1, sum holes: 3 */
};
struct ofputil_phy_port {
	ofp_port_t                 port_no;              /*     0     4 */
	struct eth_addr            hw_addr;              /*     4     6 */
	struct eth_addr64          hw_addr64;            /*    10     8 */
	char                       name[64];             /*    18    64 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) was 20 bytes ago --- */
	enum ofputil_port_config   config;               /*    84     4 */
	enum ofputil_port_state    state;                /*    88     4 */
	enum netdev_features       curr;                 /*    92     4 */
	enum netdev_features       advertised;           /*    96     4 */
	enum netdev_features       supported;            /*   100     4 */
	enum netdev_features       peer;                 /*   104     4 */
	uint32_t                   curr_speed;           /*   108     4 */
	uint32_t                   max_speed;            /*   112     4 */

	/* size: 116, cachelines: 2, members: 12 */
	/* sum members: 114, holes: 1, sum holes: 2 */
	/* last cacheline: 52 bytes */
};
struct ofputil_port_mod {
	ofp_port_t                 port_no;              /*     0     4 */
	struct eth_addr            hw_addr;              /*     4     6 */
	struct eth_addr64          hw_addr64;            /*    10     8 */

	/* XXX 2 bytes hole, try to pack */

	enum ofputil_port_config   config;               /*    20     4 */
	enum ofputil_port_config   mask;                 /*    24     4 */
	enum netdev_features       advertise;            /*    28     4 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_action_features {
	uint64_t                   ofpacts;              /*     0     8 */
	struct mf_bitmap           set_fields;           /*     8    24 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_instruction_features {
	long unsigned int          next[4];              /*     0    32 */
	uint32_t                   instructions;         /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_table_action_features write;      /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ofputil_table_action_features apply;      /*    72    32 */

	/* size: 104, cachelines: 2, members: 4 */
	/* sum members: 100, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofputil_table_features {
	uint8_t                    table_id;             /*     0     1 */
	char                       name[32];             /*     1    32 */

	/* XXX 7 bytes hole, try to pack */

	ovs_be64                   metadata_match;       /*    40     8 */
	ovs_be64                   metadata_write;       /*    48     8 */
	uint32_t                   max_entries;          /*    56     4 */
	enum ofputil_table_miss    miss_config;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        supports_eviction;    /*    64     4 */
	int                        supports_vacancy_events; /*    68     4 */
	struct ofputil_table_instruction_features nonmiss; /*    72   104 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */
	struct ofputil_table_instruction_features miss;  /*   176   104 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	struct mf_bitmap           match;                /*   280    24 */
	struct mf_bitmap           mask;                 /*   304    24 */
	/* --- cacheline 5 boundary (320 bytes) was 8 bytes ago --- */
	struct mf_bitmap           wildcard;             /*   328    24 */

	/* size: 352, cachelines: 6, members: 13 */
	/* sum members: 345, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ofputil_meter_band {
	uint16_t                   type;                 /*     0     2 */
	uint8_t                    prec_level;           /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   rate;                 /*     4     4 */
	uint32_t                   burst_size;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* sum members: 11, holes: 1, sum holes: 1 */
	/* last cacheline: 12 bytes */
};
struct ofputil_meter_band_stats {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_config {
	uint32_t                   meter_id;             /*     0     4 */
	uint16_t                   flags;                /*     4     2 */
	uint16_t                   n_bands;              /*     6     2 */
	struct ofputil_meter_band * bands;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_stats {
	uint32_t                   meter_id;             /*     0     4 */
	uint32_t                   flow_count;           /*     4     4 */
	uint64_t                   packet_in_count;      /*     8     8 */
	uint64_t                   byte_in_count;        /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint16_t                   n_bands;              /*    32     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofputil_meter_band_stats * bands;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ofputil_meter_features {
	uint32_t                   max_meters;           /*     0     4 */
	uint32_t                   band_types;           /*     4     4 */
	uint32_t                   capabilities;         /*     8     4 */
	uint8_t                    max_bands;            /*    12     1 */
	uint8_t                    max_color;            /*    13     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_table_stats {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   active_count;         /*     4     4 */
	uint64_t                   lookup_count;         /*     8     8 */
	uint64_t                   matched_count;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct bucket_counter {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_group_props {
	char                       selection_method[16]; /*     0    16 */
	uint64_t                   selection_method_param; /*    16     8 */
	struct field_array         fields;               /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 3 */
};
struct ofputil_group_mod {
	uint16_t                   command;              /*     0     2 */
	uint8_t                    type;                 /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   group_id;             /*     4     4 */
	uint32_t                   command_bucket_id;    /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            buckets;              /*    16    16 */
	struct ofputil_group_props props;                /*    32    64 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 6 */
	/* sum members: 91, holes: 2, sum holes: 5 */
	/* last cacheline: 32 bytes */
};
struct ofputil_group_stats {
	uint32_t                   group_id;             /*     0     4 */
	uint32_t                   ref_count;            /*     4     4 */
	uint64_t                   packet_count;         /*     8     8 */
	uint64_t                   byte_count;           /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint32_t                   n_buckets;            /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct bucket_counter *    bucket_stats;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofputil_group_features {
	uint32_t                   types;                /*     0     4 */
	uint32_t                   capabilities;         /*     4     4 */
	uint32_t                   max_groups[4];        /*     8    16 */
	uint64_t                   ofpacts[4];           /*    24    32 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct cfm_settings {
	uint64_t                   mpid;                 /*     0     8 */
	int                        interval;             /*     8     4 */
	_Bool                      extended;             /*    12     1 */
	_Bool                      demand;               /*    13     1 */
	_Bool                      opup;                 /*    14     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   ccm_vlan;             /*    16     2 */
	uint8_t                    ccm_pcp;              /*    18     1 */
	_Bool                      check_tnl_key;        /*    19     1 */

	/* size: 24, cachelines: 1, members: 8 */
	/* sum members: 19, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct cfm_status {
	enum cfm_fault_reason      faults;               /*     0     4 */
	int                        remote_opstate;       /*     4     4 */
	uint64_t                   flap_count;           /*     8     8 */
	int                        health;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t *                 rmps;                 /*    24     8 */
	size_t                     n_rmps;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct flowmap {
	map_t                      bits[2];              /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct sset {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct netflow_options {
	struct sset                collectors;           /*     0    32 */
	uint8_t                    engine_type;          /*    32     1 */
	uint8_t                    engine_id;            /*    33     1 */

	/* XXX 2 bytes hole, try to pack */

	int                        active_timeout;       /*    36     4 */
	_Bool                      add_id_to_iface;      /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* sum members: 39, holes: 1, sum holes: 2 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct smap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct lacp_settings {
	char *                     name;                 /*     0     8 */
	struct eth_addr            id;                   /*     8     6 */
	uint16_t                   priority;             /*    14     2 */
	_Bool                      active;               /*    16     1 */
	_Bool                      fast;                 /*    17     1 */
	_Bool                      fallback_ab_cfg;      /*    18     1 */

	/* size: 24, cachelines: 1, members: 6 */
	/* padding: 5 */
	/* last cacheline: 24 bytes */
};
struct lacp_slave_settings {
	char *                     name;                 /*     0     8 */
	uint16_t                   id;                   /*     8     2 */
	uint16_t                   priority;             /*    10     2 */
	uint16_t                   key;                  /*    12     2 */

	/* size: 16, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct lacp_slave_stats {
	struct eth_addr            dot3adAggPortActorSystemID; /*     0     6 */
	struct eth_addr            dot3adAggPortPartnerOperSystemID; /*     6     6 */
	uint32_t                   dot3adAggPortAttachedAggID; /*    12     4 */
	uint8_t                    dot3adAggPortActorAdminState; /*    16     1 */
	uint8_t                    dot3adAggPortActorOperState; /*    17     1 */
	uint8_t                    dot3adAggPortPartnerAdminState; /*    18     1 */
	uint8_t                    dot3adAggPortPartnerOperState; /*    19     1 */
	uint32_t                   dot3adAggPortStatsLACPDUsRx; /*    20     4 */
	uint32_t                   dot3adAggPortStatsIllegalRx; /*    24     4 */
	uint32_t                   dot3adAggPortStatsLACPDUsTx; /*    28     4 */

	/* size: 32, cachelines: 1, members: 10 */
	/* last cacheline: 32 bytes */
};
struct ofproto_sflow_options {
	struct sset                targets;              /*     0    32 */
	uint32_t                   sampling_rate;        /*    32     4 */
	uint32_t                   polling_interval;     /*    36     4 */
	uint32_t                   header_len;           /*    40     4 */
	uint32_t                   sub_id;               /*    44     4 */
	char *                     agent_device;         /*    48     8 */
	char *                     control_ip;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 7 */
};
struct ofproto_ipfix_bridge_exporter_options {
	struct sset                targets;              /*     0    32 */
	uint32_t                   sampling_rate;        /*    32     4 */
	uint32_t                   obs_domain_id;        /*    36     4 */
	uint32_t                   obs_point_id;         /*    40     4 */
	uint32_t                   cache_active_timeout; /*    44     4 */
	uint32_t                   cache_max_flows;      /*    48     4 */
	_Bool                      enable_tunnel_sampling; /*    52     1 */
	_Bool                      enable_input_sampling; /*    53     1 */
	_Bool                      enable_output_sampling; /*    54     1 */

	/* XXX 1 byte hole, try to pack */

	char *                     virtual_obs_id;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 10 */
	/* sum members: 63, holes: 1, sum holes: 1 */
};
struct ofproto_ipfix_flow_exporter_options {
	uint32_t                   collector_set_id;     /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sset                targets;              /*     8    32 */
	uint32_t                   cache_active_timeout; /*    40     4 */
	uint32_t                   cache_max_flows;      /*    44     4 */
	_Bool                      enable_tunnel_sampling; /*    48     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     virtual_obs_id;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
	/* sum members: 53, holes: 2, sum holes: 11 */
};
struct ofproto_rstp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	rstp_identifier            root_id;              /*     8     8 */
	rstp_identifier            bridge_id;            /*    16     8 */
	rstp_identifier            designated_id;        /*    24     8 */
	uint32_t                   root_path_cost;       /*    32     4 */
	uint16_t                   designated_port_id;   /*    36     2 */
	uint16_t                   bridge_port_id;       /*    38     2 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 33, holes: 1, sum holes: 7 */
	/* last cacheline: 40 bytes */
};
struct ofproto_rstp_settings {
	rstp_identifier            address;              /*     0     8 */
	uint16_t                   priority;             /*     8     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   ageing_time;          /*    12     4 */
	enum rstp_force_protocol_version force_protocol_version; /*    16     4 */
	uint16_t                   bridge_forward_delay; /*    20     2 */
	uint16_t                   bridge_max_age;       /*    22     2 */
	uint16_t                   transmit_hold_count;  /*    24     2 */

	/* size: 32, cachelines: 1, members: 7 */
	/* sum members: 24, holes: 1, sum holes: 2 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct ofproto_port_rstp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   port_id;              /*     2     2 */
	enum rstp_port_role        role;                 /*     4     4 */
	enum rstp_state            state;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	rstp_identifier            designated_bridge_id; /*    16     8 */
	uint16_t                   designated_port_id;   /*    24     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   designated_path_cost; /*    28     4 */
	int                        tx_count;             /*    32     4 */
	int                        rx_count;             /*    36     4 */
	int                        error_count;          /*    40     4 */
	int                        uptime;               /*    44     4 */

	/* size: 48, cachelines: 1, members: 11 */
	/* sum members: 41, holes: 3, sum holes: 7 */
	/* last cacheline: 48 bytes */
};
struct ofproto_port_rstp_settings {
	_Bool                      enable;               /*     0     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   port_num;             /*     2     2 */
	uint8_t                    priority;             /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   path_cost;            /*     8     4 */
	_Bool                      admin_edge_port;      /*    12     1 */
	_Bool                      auto_edge;            /*    13     1 */
	_Bool                      mcheck;               /*    14     1 */
	uint8_t                    admin_p2p_mac_state;  /*    15     1 */
	_Bool                      admin_port_state;     /*    16     1 */

	/* size: 20, cachelines: 1, members: 9 */
	/* sum members: 13, holes: 2, sum holes: 4 */
	/* padding: 3 */
	/* last cacheline: 20 bytes */
};
struct ofproto_stp_settings {
	stp_identifier             system_id;            /*     0     8 */
	uint16_t                   priority;             /*     8     2 */
	uint16_t                   hello_time;           /*    10     2 */
	uint16_t                   max_age;              /*    12     2 */
	uint16_t                   fwd_delay;            /*    14     2 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ofproto_stp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	stp_identifier             bridge_id;            /*     8     8 */
	stp_identifier             designated_root;      /*    16     8 */
	int                        root_path_cost;       /*    24     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 7 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct ofproto_port_stp_settings {
	_Bool                      enable;               /*     0     1 */
	uint8_t                    port_num;             /*     1     1 */
	uint8_t                    priority;             /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   path_cost;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 4 */
	/* sum members: 5, holes: 1, sum holes: 1 */
	/* last cacheline: 6 bytes */
};
struct ofproto_port_stp_status {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        port_id;              /*     4     4 */
	enum stp_state             state;                /*     8     4 */
	unsigned int               sec_in_state;         /*    12     4 */
	enum stp_role              role;                 /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* sum members: 17, holes: 1, sum holes: 3 */
	/* last cacheline: 20 bytes */
};
struct ofproto_port_stp_stats {
	_Bool                      enabled;              /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        tx_count;             /*     4     4 */
	int                        rx_count;             /*     8     4 */
	int                        error_count;          /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct ofproto_port_queue {
	uint32_t                   queue;                /*     0     4 */
	uint8_t                    dscp;                 /*     4     1 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct ofproto_mcast_snooping_settings {
	_Bool                      flood_unreg;          /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               idle_time;            /*     4     4 */
	unsigned int               max_entries;          /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* sum members: 9, holes: 1, sum holes: 3 */
	/* last cacheline: 12 bytes */
};
struct ofproto_mcast_snooping_port_settings {
	_Bool                      flood;                /*     0     1 */
	_Bool                      flood_reports;        /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ofproto_port {
	char *                     name;                 /*     0     8 */
	char *                     type;                 /*     8     8 */
	ofp_port_t                 ofp_port;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto {
	struct hmap_node           hmap_node;            /*     0    16 */
	const struct ofproto_class  * ofproto_class;     /*    16     8 */
	char *                     type;                 /*    24     8 */
	char *                     name;                 /*    32     8 */
	uint64_t                   fallback_dpid;        /*    40     8 */
	uint64_t                   datapath_id;          /*    48     8 */
	_Bool                      forward_bpdu;         /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     mfr_desc;             /*    64     8 */
	char *                     hw_desc;              /*    72     8 */
	char *                     sw_desc;              /*    80     8 */
	char *                     serial_desc;          /*    88     8 */
	char *                     dp_desc;              /*    96     8 */
	enum ofputil_frag_handling frag_handling;        /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                ports;                /*   112    32 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct shash               port_by_name;         /*   144    32 */
	struct simap               ofp_requests;         /*   176    32 */
	/* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */
	uint16_t                   alloc_port_no;        /*   208     2 */
	uint16_t                   max_ports;            /*   210     2 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                ofport_usage;         /*   216    32 */
	uint64_t                   change_seq;           /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	long long int              eviction_group_timer; /*   256     8 */
	struct oftable *           tables;               /*   264     8 */
	int                        n_tables;             /*   272     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_version_t              tables_version;       /*   280     8 */
	struct hindex              cookies;              /*   288    32 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	struct hmap                learned_cookies;      /*   320    32 */
	struct ovs_list            expirable;            /*   352    16 */
	struct ofputil_meter_features meter_features;    /*   368    16 */

	/* XXX last struct has 2 bytes of padding */

	/* --- cacheline 6 boundary (384 bytes) --- */
	struct hmap                meters;               /*   384    32 */
	uint32_t                   slowpath_meter_id;    /*   416     4 */
	uint32_t                   controller_meter_id;  /*   420     4 */
	struct connmgr *           connmgr;              /*   424     8 */
	int                        min_mtu;              /*   432     4 */

	/* XXX 4 bytes hole, try to pack */

	struct cmap                groups;               /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	uint32_t                   n_groups[4];          /*   448    16 */
	struct ofputil_group_features ogf;               /*   464    56 */
	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct {
		struct tun_table * p;                    /*   520     8 */
	} metadata_tab;                                  /*   520     8 */
	struct vl_mff_map          vl_mff_map;           /*   528    56 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */

	/* size: 584, cachelines: 10, members: 38 */
	/* sum members: 561, holes: 5, sum holes: 23 */
	/* paddings: 1, sum paddings: 2 */
	/* last cacheline: 8 bytes */
};
struct ofproto_bundle_settings {
	char *                     name;                 /*     0     8 */
	ofp_port_t *               slaves;               /*     8     8 */
	size_t                     n_slaves;             /*    16     8 */
	enum port_vlan_mode        vlan_mode;            /*    24     4 */
	uint16_t                   qinq_ethtype;         /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        vlan;                 /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int *        trunks;               /*    40     8 */
	long unsigned int *        cvlans;               /*    48     8 */
	_Bool                      use_priority_tags;    /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct bond_settings *     bond;                 /*    64     8 */
	struct lacp_settings *     lacp;                 /*    72     8 */
	struct lacp_slave_settings * lacp_slaves;        /*    80     8 */
	_Bool                      protected;            /*    88     1 */

	/* size: 96, cachelines: 2, members: 13 */
	/* sum members: 76, holes: 3, sum holes: 13 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct ofproto_mirror_settings {
	char *                     name;                 /*     0     8 */
	void * *                   srcs;                 /*     8     8 */
	size_t                     n_srcs;               /*    16     8 */
	void * *                   dsts;                 /*    24     8 */
	size_t                     n_dsts;               /*    32     8 */
	long unsigned int *        src_vlans;            /*    40     8 */
	void *                     out_bundle;           /*    48     8 */
	uint16_t                   out_vlan;             /*    56     2 */
	uint16_t                   snaplen;              /*    58     2 */

	/* size: 64, cachelines: 1, members: 9 */
	/* padding: 4 */
};
struct ovs_mutex {
	pthread_mutex_t            lock;                 /*     0    40 */
	const char  *              where;                /*    40     8 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct heap_node {
	size_t                     idx;                  /*     0     8 */
	uint64_t                   priority;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct heap {
	struct heap_node * *       array;                /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hindex_node {
	size_t                     hash;                 /*     0     8 */
	struct hindex_node *       d;                    /*     8     8 */
	struct hindex_node *       s;                    /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hindex {
	struct hindex_node * *     buckets;              /*     0     8 */
	struct hindex_node *       one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n_unique;             /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct object_collection {
	void * *                   objs;                 /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     capacity;             /*    16     8 */
	void *                     stub[5];              /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct shash {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct simap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct vl_mff_map {
	struct cmap                cmap;                 /*     0     8 */
	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct ofproto_class {
	void                       (*init)(const struct shash  *); /*     0     8 */
	void                       (*enumerate_types)(struct sset *); /*     8     8 */
	int                        (*enumerate_names)(const char  *, struct sset *); /*    16     8 */
	int                        (*del)(const char  *, const char  *); /*    24     8 */
	const char  *              (*port_open_type)(const char  *, const char  *); /*    32     8 */
	int                        (*type_run)(const char  *); /*    40     8 */
	void                       (*type_wait)(const char  *); /*    48     8 */
	struct ofproto *           (*alloc)(void);       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*construct)(struct ofproto *); /*    64     8 */
	void                       (*destruct)(struct ofproto *, _Bool); /*    72     8 */
	void                       (*dealloc)(struct ofproto *); /*    80     8 */
	int                        (*run)(struct ofproto *); /*    88     8 */
	void                       (*wait)(struct ofproto *); /*    96     8 */
	void                       (*get_memory_usage)(const struct ofproto  *, struct simap *); /*   104     8 */
	void                       (*type_get_memory_usage)(const char  *, struct simap *); /*   112     8 */
	void                       (*flush)(struct ofproto *); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	void                       (*query_tables)(struct ofproto *, struct ofputil_table_features *, struct ofputil_table_stats *); /*   128     8 */
	void                       (*set_tables_version)(struct ofproto *, ovs_version_t); /*   136     8 */
	struct ofport *            (*port_alloc)(void);  /*   144     8 */
	int                        (*port_construct)(struct ofport *); /*   152     8 */
	void                       (*port_destruct)(struct ofport *, _Bool); /*   160     8 */
	void                       (*port_dealloc)(struct ofport *); /*   168     8 */
	void                       (*port_modified)(struct ofport *); /*   176     8 */
	void                       (*port_reconfigured)(struct ofport *, enum ofputil_port_config); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        (*port_query_by_name)(const struct ofproto  *, const char  *, struct ofproto_port *); /*   192     8 */
	int                        (*port_add)(struct ofproto *, struct netdev *); /*   200     8 */
	int                        (*port_del)(struct ofproto *, ofp_port_t); /*   208     8 */
	int                        (*port_set_config)(const struct ofport  *, const struct smap  *); /*   216     8 */
	int                        (*port_get_stats)(const struct ofport  *, struct netdev_stats *); /*   224     8 */
	int                        (*port_dump_start)(const struct ofproto  *, void * *); /*   232     8 */
	int                        (*port_dump_next)(const struct ofproto  *, void *, struct ofproto_port *); /*   240     8 */
	int                        (*port_dump_done)(const struct ofproto  *, void *); /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int                        (*port_poll)(const struct ofproto  *, char * *); /*   256     8 */
	void                       (*port_poll_wait)(const struct ofproto  *); /*   264     8 */
	int                        (*port_is_lacp_current)(const struct ofport  *); /*   272     8 */
	int                        (*port_get_lacp_stats)(const struct ofport  *, struct lacp_slave_stats *); /*   280     8 */
	enum ofperr                (*rule_choose_table)(const struct ofproto  *, const struct match  *, uint8_t *); /*   288     8 */
	struct rule *              (*rule_alloc)(void);  /*   296     8 */
	enum ofperr                (*rule_construct)(struct rule *); /*   304     8 */
	void                       (*rule_insert)(struct rule *, struct rule *, _Bool); /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	void                       (*rule_delete)(struct rule *); /*   320     8 */
	void                       (*rule_destruct)(struct rule *); /*   328     8 */
	void                       (*rule_dealloc)(struct rule *); /*   336     8 */
	void                       (*rule_get_stats)(struct rule *, uint64_t *, uint64_t *, long long int *); /*   344     8 */
	enum ofperr                (*packet_xlate)(struct ofproto *, struct ofproto_packet_out *); /*   352     8 */
	void                       (*packet_xlate_revert)(struct ofproto *, struct ofproto_packet_out *); /*   360     8 */
	void                       (*packet_execute)(struct ofproto *, struct ofproto_packet_out *); /*   368     8 */
	_Bool                      (*set_frag_handling)(struct ofproto *, enum ofputil_frag_handling); /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	enum ofperr                (*nxt_resume)(struct ofproto *, const struct ofputil_packet_in_private  *); /*   384     8 */
	int                        (*set_netflow)(struct ofproto *, const struct netflow_options  *); /*   392     8 */
	void                       (*get_netflow_ids)(const struct ofproto  *, uint8_t *, uint8_t *); /*   400     8 */
	int                        (*set_sflow)(struct ofproto *, const struct ofproto_sflow_options  *); /*   408     8 */
	int                        (*set_ipfix)(struct ofproto *, const struct ofproto_ipfix_bridge_exporter_options  *, const struct ofproto_ipfix_flow_exporter_options  *, size_t); /*   416     8 */
	int                        (*get_ipfix_stats)(const struct ofproto  *, _Bool, struct ovs_list *); /*   424     8 */
	int                        (*set_cfm)(struct ofport *, const struct cfm_settings  *); /*   432     8 */
	_Bool                      (*cfm_status_changed)(struct ofport *); /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	int                        (*get_cfm_status)(const struct ofport  *, struct cfm_status *); /*   448     8 */
	int                        (*set_lldp)(struct ofport *, const struct smap  *); /*   456     8 */
	_Bool                      (*get_lldp_status)(const struct ofport  *, struct lldp_status *); /*   464     8 */
	int                        (*set_aa)(struct ofproto *, const struct aa_settings  *); /*   472     8 */
	int                        (*aa_mapping_set)(struct ofproto *, void *, const struct aa_mapping_settings  *); /*   480     8 */
	int                        (*aa_mapping_unset)(struct ofproto *, void *); /*   488     8 */
	int                        (*aa_vlan_get_queued)(struct ofproto *, struct ovs_list *); /*   496     8 */
	unsigned int               (*aa_vlan_get_queue_size)(struct ofproto *); /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	int                        (*set_bfd)(struct ofport *, const struct smap  *); /*   512     8 */
	_Bool                      (*bfd_status_changed)(struct ofport *); /*   520     8 */
	int                        (*get_bfd_status)(struct ofport *, struct smap *); /*   528     8 */
	int                        (*set_stp)(struct ofproto *, const struct ofproto_stp_settings  *); /*   536     8 */
	int                        (*get_stp_status)(struct ofproto *, struct ofproto_stp_status *); /*   544     8 */
	int                        (*set_stp_port)(struct ofport *, const struct ofproto_port_stp_settings  *); /*   552     8 */
	int                        (*get_stp_port_status)(struct ofport *, struct ofproto_port_stp_status *); /*   560     8 */
	int                        (*get_stp_port_stats)(struct ofport *, struct ofproto_port_stp_stats *); /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	void                       (*set_rstp)(struct ofproto *, const struct ofproto_rstp_settings  *); /*   576     8 */
	void                       (*get_rstp_status)(struct ofproto *, struct ofproto_rstp_status *); /*   584     8 */
	void                       (*set_rstp_port)(struct ofport *, const struct ofproto_port_rstp_settings  *); /*   592     8 */
	void                       (*get_rstp_port_status)(struct ofport *, struct ofproto_port_rstp_status *); /*   600     8 */
	int                        (*set_queues)(struct ofport *, const struct ofproto_port_queue  *, size_t); /*   608     8 */
	int                        (*bundle_set)(struct ofproto *, void *, const struct ofproto_bundle_settings  *); /*   616     8 */
	void                       (*bundle_remove)(struct ofport *); /*   624     8 */
	int                        (*mirror_set)(struct ofproto *, void *, const struct ofproto_mirror_settings  *); /*   632     8 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	int                        (*mirror_get_stats)(struct ofproto *, void *, uint64_t *, uint64_t *); /*   640     8 */
	int                        (*set_flood_vlans)(struct ofproto *, long unsigned int *); /*   648     8 */
	_Bool                      (*is_mirror_output_bundle)(const struct ofproto  *, void *); /*   656     8 */
	void                       (*forward_bpdu_changed)(struct ofproto *); /*   664     8 */
	void                       (*set_mac_table_config)(struct ofproto *, unsigned int, size_t); /*   672     8 */
	int                        (*set_mcast_snooping)(struct ofproto *, const struct ofproto_mcast_snooping_settings  *); /*   680     8 */
	int                        (*set_mcast_snooping_port)(struct ofproto *, void *, const struct ofproto_mcast_snooping_port_settings  *); /*   688     8 */
	void                       (*meter_get_features)(const struct ofproto  *, struct ofputil_meter_features *); /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	enum ofperr                (*meter_set)(struct ofproto *, ofproto_meter_id *, struct ofputil_meter_config *); /*   704     8 */
	enum ofperr                (*meter_get)(const struct ofproto  *, ofproto_meter_id, struct ofputil_meter_stats *, uint16_t); /*   712     8 */
	void                       (*meter_del)(struct ofproto *, ofproto_meter_id); /*   720     8 */
	struct ofgroup *           (*group_alloc)(void); /*   728     8 */
	enum ofperr                (*group_construct)(struct ofgroup *); /*   736     8 */
	void                       (*group_destruct)(struct ofgroup *); /*   744     8 */
	void                       (*group_dealloc)(struct ofgroup *); /*   752     8 */
	void                       (*group_modify)(struct ofgroup *); /*   760     8 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	enum ofperr                (*group_get_stats)(const struct ofgroup  *, struct ofputil_group_stats *); /*   768     8 */
	const char  *              (*get_datapath_version)(const struct ofproto  *); /*   776     8 */
	void                       (*type_set_config)(const char  *, const struct smap  *); /*   784     8 */
	void                       (*ct_flush)(const struct ofproto  *, const uint16_t  *); /*   792     8 */

	/* size: 800, cachelines: 13, members: 100 */
	/* last cacheline: 32 bytes */
};
struct oftable {
	enum oftable_flags         flags;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct classifier          cls;                  /*     8    96 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	char *                     name;                 /*   104     8 */
	unsigned int               max_flows;            /*   112     4 */
	unsigned int               n_flows;              /*   116     4 */
	struct mf_subfield *       eviction_fields;      /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	size_t                     n_eviction_fields;    /*   128     8 */
	uint32_t                   eviction_group_id_basis; /*   136     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                eviction_groups_by_id; /*   144    32 */
	struct heap                eviction_groups_by_size; /*   176    24 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	enum ofputil_table_miss    miss_config;          /*   200     4 */
	unsigned int               eviction;             /*   204     4 */
	enum ofp14_table_reason    vacancy_event;        /*   208     4 */
	uint8_t                    vacancy_down;         /*   212     1 */
	uint8_t                    vacancy_up;           /*   213     1 */

	/* XXX 2 bytes hole, try to pack */

	atomic_ulong               n_matched;            /*   216     8 */
	atomic_ulong               n_missed;             /*   224     8 */

	/* size: 232, cachelines: 4, members: 17 */
	/* sum members: 222, holes: 3, sum holes: 10 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 40 bytes */
};
struct ofport {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofproto *           ofproto;              /*    16     8 */
	struct netdev *            netdev;               /*    24     8 */
	struct ofputil_phy_port    pp;                   /*    32   116 */
	/* --- cacheline 2 boundary (128 bytes) was 20 bytes ago --- */
	ofp_port_t                 ofp_port;             /*   148     4 */
	uint64_t                   change_seq;           /*   152     8 */
	long long int              created;              /*   160     8 */
	int                        mtu;                  /*   168     4 */

	/* size: 176, cachelines: 3, members: 8 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct rule {
	struct ofproto *const      ofproto;              /*     0     8 */
	struct cls_ruleconst       cr;                   /*     8    48 */
	uint8_tconst               table_id;             /*    56     1 */
	enum rule_state            state;                /*    57     1 */

	/* XXX 6 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_mutex           mutex;                /*    64    48 */
	struct ovs_refcount        ref_count;            /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64const              flow_cookie;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct hindex_node         cookie_node;          /*   128    24 */
	enum ofputil_flow_mod_flags flags;               /*   152     4 */
	uint16_t                   hard_timeout;         /*   156     2 */
	uint16_t                   idle_timeout;         /*   158     2 */
	uint16_tconst              importance;           /*   160     2 */
	uint8_t                    removed_reason;       /*   162     1 */

	/* XXX 5 bytes hole, try to pack */

	struct eviction_group *    eviction_group;       /*   168     8 */
	struct heap_node           evg_node;             /*   176    16 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	const struct rule_actions  *const actions;       /*   192     8 */
	struct ovs_list            meter_list_node;      /*   200    16 */
	enum nx_flow_monitor_flags monitor_flags;        /*   216     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   add_seqno;            /*   224     8 */
	uint64_t                   modify_seqno;         /*   232     8 */
	struct ovs_list            expirable;            /*   240    16 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	long long int              created;              /*   256     8 */
	long long int              modified;             /*   264     8 */
	uint64_t                   match_tlv_bitmap;     /*   272     8 */
	uint64_t                   ofpacts_tlv_bitmap;   /*   280     8 */

	/* size: 288, cachelines: 5, members: 25 */
	/* sum members: 269, holes: 4, sum holes: 19 */
	/* last cacheline: 32 bytes */
};
struct rule_actions {
	_Bool                      has_meter;            /*     0     1 */
	_Bool                      has_learn_with_delete; /*     1     1 */
	_Bool                      has_groups;           /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   ofpacts_len;          /*     4     4 */
	struct ofpact              ofpacts[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 5 */
	/* sum members: 7, holes: 1, sum holes: 1 */
	/* last cacheline: 8 bytes */
};
struct rule_collection {
	struct object_collection   collection;           /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct ofgroup {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct versions            versions;             /*     8    16 */
	struct ovs_refcount        ref_count;            /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofproto *const      ofproto;              /*    32     8 */
	uint32_tconst              group_id;             /*    40     4 */
	enum ofp11_group_typeconst type;                 /*    44     4 */
	_Bool                      being_deleted;        /*    48     1 */

	/* XXX 7 bytes hole, try to pack */

	long long intconst         created;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long long intconst         modified;             /*    64     8 */
	struct ovs_listconst       buckets;              /*    72    16 */
	uint32_tconst              n_buckets;            /*    88     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_group_propsconst props;           /*    96    64 */
	/* --- cacheline 2 boundary (128 bytes) was 32 bytes ago --- */
	struct rule_collection     rules;                /*   160    64 */
	/* --- cacheline 3 boundary (192 bytes) was 32 bytes ago --- */

	/* size: 224, cachelines: 4, members: 13 */
	/* sum members: 209, holes: 3, sum holes: 15 */
	/* last cacheline: 32 bytes */
};
struct group_collection {
	struct object_collection   collection;           /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct ofproto_packet_out {
	ovs_version_t              version;              /*     0     8 */
	struct dp_packet *         packet;               /*     8     8 */
	struct flow *              flow;                 /*    16     8 */
	struct ofpact *            ofpacts;              /*    24     8 */
	size_t                     ofpacts_len;          /*    32     8 */
	void *                     aux;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct rule_criteria {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct cls_rule            cr;                   /*     8    48 */
	ovs_version_t              version;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   cookie;               /*    64     8 */
	ovs_be64                   cookie_mask;          /*    72     8 */
	ofp_port_t                 out_port;             /*    80     4 */
	uint32_t                   out_group;            /*    84     4 */
	_Bool                      include_hidden;       /*    88     1 */
	_Bool                      include_readonly;     /*    89     1 */

	/* size: 96, cachelines: 2, members: 9 */
	/* sum members: 83, holes: 1, sum holes: 7 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct ofproto_flow_mod {
	struct rule *              temp_rule;            /*     0     8 */
	struct rule_criteria       criteria;             /*     8    96 */

	/* XXX last struct has 6 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	struct cls_conjunction *   conjs;                /*   104     8 */
	size_t                     n_conjs;              /*   112     8 */
	uint16_t                   command;              /*   120     2 */
	_Bool                      modify_cookie;        /*   122     1 */
	_Bool                      modify_may_add_flow;  /*   123     1 */
	_Bool                      modify_keep_counts;   /*   124     1 */

	/* XXX 3 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	enum nx_flow_update_event  event;                /*   128     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_version_t              version;              /*   136     8 */
	_Bool                      learn_adds_rule;      /*   144     1 */

	/* XXX 7 bytes hole, try to pack */

	struct rule_collection     old_rules;            /*   152    64 */
	/* --- cacheline 3 boundary (192 bytes) was 24 bytes ago --- */
	struct rule_collection     new_rules;            /*   216    64 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */

	/* size: 280, cachelines: 5, members: 13 */
	/* sum members: 266, holes: 3, sum holes: 14 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 24 bytes */
};
struct ofproto_port_mod {
	struct ofputil_port_mod    pm;                   /*     0    32 */
	struct ofport *            port;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct ofproto_group_mod {
	struct ofputil_group_mod   gm;                   /*     0    96 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	ovs_version_t              version;              /*    96     8 */
	struct ofgroup *           new_group;            /*   104     8 */
	struct group_collection    old_groups;           /*   112    64 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */

	/* size: 176, cachelines: 3, members: 4 */
	/* last cacheline: 48 bytes */
};
struct ofp_bundle_entry {
	struct ovs_list            node;                 /*     0    16 */
	enum ofptype               type;                 /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		struct ofproto_flow_mod ofm;             /*         280 */
		struct ofproto_port_mod opm;             /*          40 */
		struct ofproto_group_mod ogm;            /*         176 */
		struct ofproto_packet_out opo;           /*          48 */
	};                                               /*    24   280 */
	/* --- cacheline 4 boundary (256 bytes) was 48 bytes ago --- */
	union {
		struct ofp_header  ofp_msg;              /*           8 */
		uint8_t            ofp_msg_data[64];     /*          64 */
	};                                               /*   304    64 */
	/* --- cacheline 5 boundary (320 bytes) was 48 bytes ago --- */

	/* size: 368, cachelines: 6, members: 4 */
	/* sum members: 364, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofp_bundle {
	struct hmap_node           node;                 /*     0    16 */
	long long int              used;                 /*    16     8 */
	uint32_t                   id;                   /*    24     4 */
	uint16_t                   flags;                /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	enum bundle_state          state;                /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            msg_list;             /*    40    16 */
	union {
		struct ofp_header  ofp_msg;              /*           8 */
		uint8_t            ofp_msg_data[64];     /*          64 */
	};                                               /*    56    64 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */

	/* size: 120, cachelines: 2, members: 7 */
	/* sum members: 114, holes: 2, sum holes: 6 */
	/* last cacheline: 56 bytes */
};
struct vlog_module {
	struct ovs_list            list;                 /*     0    16 */
	const char  *              name;                 /*    16     8 */
	int                        levels[3];            /*    24    12 */
	int                        min_level;            /*    36     4 */
	_Bool                      honor_rate_limits;    /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct ovs_key_ct_tuple_ipv4 {
	ovs_be32                   ipv4_src;             /*     0     4 */
	ovs_be32                   ipv4_dst;             /*     4     4 */
	ovs_be16                   src_port;             /*     8     2 */
	ovs_be16                   dst_port;             /*    10     2 */
	uint8_t                    ipv4_proto;           /*    12     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ovs_key_ct_tuple_ipv6 {
	struct in6_addr            ipv6_src;             /*     0    16 */
	struct in6_addr            ipv6_dst;             /*    16    16 */
	ovs_be16                   src_port;             /*    32     2 */
	ovs_be16                   dst_port;             /*    34     2 */
	uint8_t                    ipv6_proto;           /*    36     1 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 40 bytes */
};
struct pkt_metadata {
	union {
		OVS_CACHE_LINE_MARKER cacheline0;        /*           1 */
		struct {
			uint32_t   recirc_id;            /*     0     4 */
			uint32_t   dp_hash;              /*     4     4 */
			uint32_t   skb_priority;         /*     8     4 */
			uint32_t   pkt_mark;             /*    12     4 */
			uint8_t    ct_state;             /*    16     1 */
			_Bool      ct_orig_tuple_ipv6;   /*    17     1 */
			uint16_t   ct_zone;              /*    18     2 */
			uint32_t   ct_mark;              /*    20     4 */
			ovs_u128   ct_label;             /*    24    16 */
			union flow_in_port in_port;      /*    40     4 */
		};                                       /*          48 */
		uint8_t            pad0[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline1;        /*           1 */
		struct {
			union {
				struct ovs_key_ct_tuple_ipv4 ipv4; /*          16 */
				struct ovs_key_ct_tuple_ipv6 ipv6; /*          40 */
			} ct_orig_tuple;                 /*    64    40 */
		};                                       /*          40 */
		uint8_t            pad1[64];             /*          64 */
	};                                               /*    64    64 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline2;        /*           1 */
		struct {
			struct flow_tnl tunnel;          /*   128   344 */
			/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
		};                                       /*         344 */
		uint8_t            pad2[384];            /*         384 */
	};                                               /*   128   384 */
	/* --- cacheline 8 boundary (512 bytes) --- */

	/* size: 512, cachelines: 8, members: 3 */
};
struct dp_packet {
	void *                     base_;                /*     0     8 */
	uint16_t                   allocated_;           /*     8     2 */
	uint16_t                   data_ofs;             /*    10     2 */
	uint32_t                   size_;                /*    12     4 */
	uint32_t                   rss_hash;             /*    16     4 */
	_Bool                      rss_hash_valid;       /*    20     1 */
	enum dp_packet_source      source;               /*    21     1 */
	uint8_t                    l2_pad_size;          /*    22     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   l2_5_ofs;             /*    24     2 */
	uint16_t                   l3_ofs;               /*    26     2 */
	uint16_t                   l4_ofs;               /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   cutlen;               /*    32     4 */
	ovs_be32                   packet_type;          /*    36     4 */
	union {
		struct pkt_metadata md;                  /*         512 */
		uint64_t           data[8];              /*          64 */
	};                                               /*    40   512 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */

	/* size: 552, cachelines: 9, members: 14 */
	/* sum members: 549, holes: 2, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct guarded_list {
	struct ovs_mutex           mutex;                /*     0    48 */
	struct ovs_list            list;                 /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	size_t                     n;                    /*    64     8 */

	/* size: 72, cachelines: 2, members: 3 */
	/* last cacheline: 8 bytes */
};
struct latch {
	int                        fds[2];               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct lldp_aa_element_system_id {
	struct eth_addr            system_mac;           /*     0     6 */
	uint16_t                   conn_type;            /*     6     2 */
	uint16_t                   rsvd;                 /*     8     2 */
	uint8_t                    rsvd2[2];             /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct lldpd_aa_element_tlv {
	uint16_t                   type;                 /*     0     2 */
	uint16_t                   vlan_tagging;         /*     2     2 */
	uint16_t                   auto_prov_mode;       /*     4     2 */
	uint16_t                   mgmt_vlan;            /*     6     2 */
	struct lldp_aa_element_system_id system_id;      /*     8    12 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct lldpd_chassis {
	struct ovs_list            list;                 /*     0    16 */
	u_int16_t                  c_refcount;           /*    16     2 */
	u_int16_t                  c_index;              /*    18     2 */
	u_int8_t                   c_protocol;           /*    20     1 */
	u_int8_t                   c_id_subtype;         /*    21     1 */

	/* XXX 2 bytes hole, try to pack */

	uint8_t *                  c_id;                 /*    24     8 */
	int                        c_id_len;             /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     c_name;               /*    40     8 */
	char *                     c_descr;              /*    48     8 */
	u_int16_t                  c_cap_available;      /*    56     2 */
	u_int16_t                  c_cap_enabled;        /*    58     2 */
	u_int16_t                  c_ttl;                /*    60     2 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            c_mgmt;               /*    64    16 */

	/* size: 80, cachelines: 2, members: 13 */
	/* sum members: 72, holes: 3, sum holes: 8 */
	/* last cacheline: 16 bytes */
};
struct lldpd_port {
	struct ovs_list            p_entries;            /*     0    16 */
	struct lldpd_chassis *     p_chassis;            /*    16     8 */
	time_t                     p_lastchange;         /*    24     8 */
	time_t                     p_lastupdate;         /*    32     8 */
	struct lldpd_frame *       p_lastframe;          /*    40     8 */
	u_int8_t                   p_protocol;           /*    48     1 */
	u_int8_t                   p_hidden_in:1;        /*    49: 7  1 */
	u_int8_t                   p_hidden_out:1;       /*    49: 6  1 */

	/* XXX 6 bits hole, try to pack */

	u_int8_t                   p_id_subtype;         /*    50     1 */

	/* XXX 5 bytes hole, try to pack */

	char *                     p_id;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        p_id_len;             /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     p_descr;              /*    72     8 */
	u_int16_t                  p_mfs;                /*    80     2 */
	struct lldpd_aa_element_tlv p_element;           /*    82    20 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_list            p_isid_vlan_maps;     /*   104    16 */

	/* size: 120, cachelines: 2, members: 15 */
	/* sum members: 109, holes: 3, sum holes: 11 */
	/* bit holes: 1, sum bit holes: 6 bits */
	/* last cacheline: 56 bytes */
};
struct lldpd_frame {
	int                        size;                 /*     0     4 */
	unsigned char              frame[0];             /*     4     0 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct lldpd_config {
	int                        c_paused;             /*     0     4 */
	int                        c_tx_interval;        /*     4     4 */
	int                        c_smart;              /*     8     4 */
	int                        c_receiveonly;        /*    12     4 */
	int                        c_max_neighbors;      /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     c_mgmt_pattern;       /*    24     8 */
	char *                     c_cid_pattern;        /*    32     8 */
	char *                     c_iface_pattern;      /*    40     8 */
	char *                     c_platform;           /*    48     8 */
	char *                     c_description;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     c_hostname;           /*    64     8 */
	int                        c_advertise_version;  /*    72     4 */
	int                        c_set_ifdescr;        /*    76     4 */
	int                        c_promisc;            /*    80     4 */
	int                        c_tx_hold;            /*    84     4 */
	int                        c_bond_slave_src_mac_type; /*    88     4 */
	int                        c_lldp_portid_type;   /*    92     4 */

	/* size: 96, cachelines: 2, members: 17 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct lldpd_ops {
	int                        (*send)(struct lldpd *, struct lldpd_hardware *, char *, size_t); /*     0     8 */
	int                        (*recv)(struct lldpd *, struct lldpd_hardware *, int, char *, size_t); /*     8     8 */
	int                        (*cleanup)(struct lldpd *, struct lldpd_hardware *); /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct lldpd {
	struct lldpd_config        g_config;             /*     0    96 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	struct protocol *          g_protocols;          /*    96     8 */
	int                        g_lastrid;            /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            g_chassis;            /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct ovs_list            g_hardware;           /*   128    16 */

	/* size: 144, cachelines: 3, members: 5 */
	/* sum members: 140, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct lldpd_hardware {
	struct ovs_list            h_entries;            /*     0    16 */
	struct lldpd *             h_cfg;                /*    16     8 */
	void *                     h_recv;               /*    24     8 */
	int                        h_sendfd;             /*    32     4 */
	int                        h_mangle;             /*    36     4 */
	struct lldpd_ops *         h_ops;                /*    40     8 */
	void *                     h_data;               /*    48     8 */
	void *                     h_timer;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        h_mtu;                /*    64     4 */
	int                        h_flags;              /*    68     4 */
	int                        h_ifindex;            /*    72     4 */
	char                       h_ifname[16];         /*    76    16 */
	struct eth_addr            h_lladdr;             /*    92     6 */

	/* XXX 6 bytes hole, try to pack */

	u_int64_t                  h_tx_cnt;             /*   104     8 */
	u_int64_t                  h_rx_cnt;             /*   112     8 */
	u_int64_t                  h_rx_discarded_cnt;   /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	u_int64_t                  h_rx_unrecognized_cnt; /*   128     8 */
	u_int64_t                  h_ageout_cnt;         /*   136     8 */
	u_int64_t                  h_insert_cnt;         /*   144     8 */
	u_int64_t                  h_delete_cnt;         /*   152     8 */
	u_int64_t                  h_drop_cnt;           /*   160     8 */
	u_int16_t                  h_lport_cksum;        /*   168     2 */

	/* XXX 6 bytes hole, try to pack */

	struct lldpd_port          h_lport;              /*   176   120 */
	/* --- cacheline 4 boundary (256 bytes) was 40 bytes ago --- */
	struct ovs_list            h_rports;             /*   296    16 */

	/* size: 312, cachelines: 5, members: 24 */
	/* sum members: 300, holes: 2, sum holes: 12 */
	/* last cacheline: 56 bytes */
};
struct protocol {
	int                        mode;                 /*     0     4 */
	int                        enabled;              /*     4     4 */
	char *                     name;                 /*     8     8 */
	char                       arg;                  /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	int                        (*send)(struct lldpd *, struct lldpd_hardware *, struct dp_packet *); /*    24     8 */
	int                        (*decode)(struct lldpd *, char *, int, struct lldpd_hardware *, struct lldpd_chassis * *, struct lldpd_port * *); /*    32     8 */
	int                        (*guess)(char *, int); /*    40     8 */
	struct eth_addr            mac;                  /*    48     6 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 47, holes: 1, sum holes: 7 */
	/* padding: 2 */
	/* last cacheline: 56 bytes */
};
struct timer {
	long long int              t;                    /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct lldp {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct lldpd *             lldpd;                /*    16     8 */
	char *                     name;                 /*    24     8 */
	struct timer               tx_timer;             /*    32     8 */
	struct hmap                mappings_by_isid;     /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct hmap                mappings_by_aux;      /*    72    32 */
	struct ovs_list            active_mapping_queue; /*   104    16 */
	struct ovs_refcount        ref_cnt;              /*   120     4 */
	_Bool                      enabled;              /*   124     1 */

	/* size: 128, cachelines: 2, members: 9 */
	/* padding: 3 */
};
struct mport {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct heap_node           heap_node;            /*    16    16 */
	const struct ofport_dpif  * ofport;              /*    32     8 */
	struct cfm *               cfm;                  /*    40     8 */
	struct bfd *               bfd;                  /*    48     8 */
	struct lldp *              lldp;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct eth_addr            hw_addr;              /*    64     6 */

	/* size: 72, cachelines: 2, members: 7 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct send_soon_entry {
	struct ovs_list            list_node;            /*     0    16 */
	const struct ofport_dpif  * ofport;              /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct ovs_action_push_tnl {
	odp_port_t                 tnl_port;             /*     0     4 */
	odp_port_t                 out_port;             /*     4     4 */
	uint32_t                   header_len;           /*     8     4 */
	uint32_t                   tnl_type;             /*    12     4 */
	uint32_t                   header[128];          /*    16   512 */
	/* --- cacheline 8 boundary (512 bytes) was 16 bytes ago --- */

	/* size: 528, cachelines: 9, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ds {
	char *                     string;               /*     0     8 */
	size_t                     length;               /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct netdev_tunnel_config {
	ovs_be64                   in_key;               /*     0     8 */
	_Bool                      in_key_present;       /*     8     1 */
	_Bool                      in_key_flow;          /*     9     1 */
	_Bool                      out_key_present;      /*    10     1 */
	_Bool                      out_key_flow;         /*    11     1 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   out_key;              /*    16     8 */
	ovs_be16                   dst_port;             /*    24     2 */
	_Bool                      ip_src_flow;          /*    26     1 */
	_Bool                      ip_dst_flow;          /*    27     1 */
	struct in6_addr            ipv6_src;             /*    28    16 */
	struct in6_addr            ipv6_dst;             /*    44    16 */
	uint32_t                   exts;                 /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint32_t                   egress_pkt_mark;      /*    64     4 */
	_Bool                      set_egress_pkt_mark;  /*    68     1 */
	uint8_t                    ttl;                  /*    69     1 */
	_Bool                      ttl_inherit;          /*    70     1 */
	uint8_t                    tos;                  /*    71     1 */
	_Bool                      tos_inherit;          /*    72     1 */
	_Bool                      csum;                 /*    73     1 */
	_Bool                      dont_fragment;        /*    74     1 */

	/* XXX 1 byte hole, try to pack */

	enum netdev_pt_mode        pt_mode;              /*    76     4 */
	ovs_be32                   erspan_idx;           /*    80     4 */
	uint8_t                    erspan_ver;           /*    84     1 */
	uint8_t                    erspan_dir;           /*    85     1 */
	uint8_t                    erspan_hwid;          /*    86     1 */

	/* size: 88, cachelines: 2, members: 25 */
	/* sum members: 82, holes: 2, sum holes: 5 */
	/* padding: 1 */
	/* last cacheline: 24 bytes */
};
struct netdev_tnl_build_header_params {
	const struct flow  *       flow;                 /*     0     8 */
	const struct in6_addr  *   s_ip;                 /*     8     8 */
	struct eth_addr            dmac;                 /*    16     6 */
	struct eth_addr            smac;                 /*    22     6 */
	_Bool                      is_ipv6;              /*    28     1 */

	/* size: 32, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct ovsthread_once {
	_Bool                      done;                 /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct fat_rwlock {
	ovsthread_key_t            key;                  /*     0     8 */
	struct ovs_list            threads;              /*     8    16 */
	struct ovs_mutex           mutex;                /*    24    48 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 3 */
	/* last cacheline: 8 bytes */
};
struct token_bucket {
	unsigned int               rate;                 /*     0     4 */
	unsigned int               burst;                /*     4     4 */
	unsigned int               tokens;               /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_fill;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct vlog_rate_limit {
	struct token_bucket        token_bucket;         /*     0    24 */
	time_t                     first_dropped;        /*    24     8 */
	time_t                     last_dropped;         /*    32     8 */
	unsigned int               n_dropped;            /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    48    48 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 5 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct tnl_match {
	ovs_be64                   in_key;               /*     0     8 */
	struct in6_addr            ipv6_src;             /*     8    16 */
	struct in6_addr            ipv6_dst;             /*    24    16 */
	odp_port_t                 odp_port;             /*    40     4 */
	_Bool                      in_key_flow;          /*    44     1 */
	_Bool                      ip_src_flow;          /*    45     1 */
	_Bool                      ip_dst_flow;          /*    46     1 */

	/* XXX 1 byte hole, try to pack */

	enum netdev_pt_mode        pt_mode;              /*    48     4 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 51, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct tnl_port {
	struct hmap_node           ofport_node;          /*     0    16 */
	struct hmap_node           match_node;           /*    16    16 */
	const struct ofport_dpif  * ofport;              /*    32     8 */
	uint64_t                   change_seq;           /*    40     8 */
	struct netdev *            netdev;               /*    48     8 */
	struct tnl_match           match;                /*    56    56 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 6 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 48 bytes */
};
struct sset_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	char                       name[1];              /*    16     1 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 24 bytes */
};
struct collectors {
	int *                      fds;                  /*     0     8 */
	size_t                     n_fds;                /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct sockaddr_storage {
	sa_family_t                ss_family;            /*     0     2 */
	char                       __ss_padding[118];    /*     2   118 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */
	long unsigned int          __ss_align;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 3 */
};
struct sockaddr_in {
	sa_family_t                sin_family;           /*     0     2 */
	in_port_t                  sin_port;             /*     2     2 */
	struct in_addr             sin_addr;             /*     4     4 */
	unsigned char              sin_zero[8];          /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct in_addr {
	in_addr_t                  s_addr;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ofpbuf {
	void *                     base;                 /*     0     8 */
	void *                     data;                 /*     8     8 */
	uint32_t                   size;                 /*    16     4 */
	uint32_t                   allocated;            /*    20     4 */
	void *                     header;               /*    24     8 */
	void *                     msg;                  /*    32     8 */
	struct ovs_list            list_node;            /*    40    16 */
	enum ofpbuf_source         source;               /*    56     1 */

	/* size: 64, cachelines: 1, members: 8 */
	/* padding: 7 */
};
struct ofputil_flow_removed {
	struct match               match;                /*     0  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */
	ovs_be64                   cookie;               /*  3400     8 */
	uint16_t                   priority;             /*  3408     2 */
	uint8_t                    reason;               /*  3410     1 */
	uint8_t                    table_id;             /*  3411     1 */
	uint32_t                   duration_sec;         /*  3412     4 */
	uint32_t                   duration_nsec;        /*  3416     4 */
	uint16_t                   idle_timeout;         /*  3420     2 */
	uint16_t                   hard_timeout;         /*  3422     2 */
	uint64_t                   packet_count;         /*  3424     8 */
	uint64_t                   byte_count;           /*  3432     8 */

	/* size: 3440, cachelines: 54, members: 11 */
	/* last cacheline: 48 bytes */
};
struct ofputil_port_status {
	enum ofp_port_reason       reason;               /*     0     4 */
	struct ofputil_phy_port    desc;                 /*     4   116 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */

	/* size: 120, cachelines: 2, members: 2 */
	/* last cacheline: 56 bytes */
};
struct ofputil_table_mod_prop_vacancy {
	uint8_t                    vacancy_down;         /*     0     1 */
	uint8_t                    vacancy_up;           /*     1     1 */
	uint8_t                    vacancy;              /*     2     1 */

	/* size: 3, cachelines: 1, members: 3 */
	/* last cacheline: 3 bytes */
};
struct ofputil_table_desc {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofputil_table_eviction eviction;            /*     4     4 */
	uint32_t                   eviction_flags;       /*     8     4 */
	enum ofputil_table_vacancy vacancy;              /*    12     4 */
	struct ofputil_table_mod_prop_vacancy table_vacancy; /*    16     3 */

	/* size: 20, cachelines: 1, members: 5 */
	/* sum members: 16, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 20 bytes */
};
struct ofputil_meter_mod {
	uint16_t                   command;              /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofputil_meter_config meter;               /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 18, holes: 1, sum holes: 6 */
	/* last cacheline: 24 bytes */
};
struct ofputil_role_status {
	enum ofp12_controller_role role;                 /*     0     4 */
	enum ofp14_controller_role_reason reason;        /*     4     4 */
	uint64_t                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_flow_monitor_request {
	uint32_t                   id;                   /*     0     4 */
	enum nx_flow_monitor_flags flags;                /*     4     4 */
	ofp_port_t                 out_port;             /*     8     4 */
	uint8_t                    table_id;             /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */

	/* size: 3416, cachelines: 54, members: 5 */
	/* sum members: 3413, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ofputil_flow_update {
	enum nx_flow_update_event  event;                /*     0     4 */
	enum ofp_flow_removed_reason reason;             /*     4     4 */
	uint16_t                   idle_timeout;         /*     8     2 */
	uint16_t                   hard_timeout;         /*    10     2 */
	uint8_t                    table_id;             /*    12     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   priority;             /*    14     2 */
	ovs_be64                   cookie;               /*    16     8 */
	struct match               match;                /*    24  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 32 bytes ago --- */
	const struct ofpact  *     ofpacts;              /*  3424     8 */
	size_t                     ofpacts_len;          /*  3432     8 */
	ovs_be32                   xid;                  /*  3440     4 */

	/* size: 3448, cachelines: 54, members: 11 */
	/* sum members: 3443, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct ofputil_async_cfg {
	uint32_t                   master[6];            /*     0    24 */
	uint32_t                   slave[6];             /*    24    24 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ofputil_requestforward {
	ovs_be32                   xid;                  /*     0     4 */
	enum ofp14_requestforward_reason reason;         /*     4     4 */
	union {
		struct {
			struct ofputil_meter_mod * meter_mod; /*     8     8 */
			struct ofpbuf bands;             /*    16    64 */

			/* XXX last struct has 7 bytes of padding */

			/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
		};                                       /*          72 */
		struct ofputil_group_mod * group_mod;    /*           8 */
	};                                               /*     8    72 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */

	/* size: 80, cachelines: 2, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_table_status {
	enum ofp14_table_reason    reason;               /*     0     4 */
	struct ofputil_table_desc  desc;                 /*     4    20 */

	/* XXX last struct has 1 byte of padding */

	/* size: 24, cachelines: 1, members: 2 */
	/* paddings: 1, sum paddings: 1 */
	/* last cacheline: 24 bytes */
};
struct ofproto_controller_info {
	_Bool                      is_connected;         /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofp12_controller_role role;                 /*     4     4 */
	struct smap                pairs;                /*     8    32 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct ofproto_controller {
	char *                     target;               /*     0     8 */
	int                        max_backoff;          /*     8     4 */
	int                        probe_interval;       /*    12     4 */
	enum ofproto_band          band;                 /*    16     4 */
	_Bool                      enable_async_msgs;    /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        rate_limit;           /*    24     4 */
	int                        burst_limit;          /*    28     4 */
	uint8_t                    dscp;                 /*    32     1 */

	/* size: 40, cachelines: 1, members: 8 */
	/* sum members: 30, holes: 1, sum holes: 3 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct ofpact_output {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint16_t                   max_len;              /*     8     2 */

	/* size: 12, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct shash_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	void *                     data;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct connmgr {
	struct ofproto *           ofproto;              /*     0     8 */
	char *                     name;                 /*     8     8 */
	char *                     local_port_name;      /*    16     8 */
	struct hmap                controllers;          /*    24    32 */
	struct ovs_list            all_conns;            /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	uint64_t                   master_election_id;   /*    72     8 */
	_Bool                      master_election_id_defined; /*    80     1 */

	/* XXX 7 bytes hole, try to pack */

	struct hmap                services;             /*    88    32 */
	struct pvconn * *          snoops;               /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	size_t                     n_snoops;             /*   128     8 */
	struct fail_open *         fail_open;            /*   136     8 */
	enum ofproto_fail_mode     fail_mode;            /*   144     4 */

	/* XXX 4 bytes hole, try to pack */

	struct in_band *           in_band;              /*   152     8 */
	struct sockaddr_in *       extra_in_band_remotes; /*   160     8 */
	size_t                     n_extra_remotes;      /*   168     8 */
	int                        in_band_queue;        /*   176     4 */
	int                        want_packet_in_on_miss; /*   180     4 */

	/* size: 184, cachelines: 3, members: 17 */
	/* sum members: 173, holes: 2, sum holes: 11 */
	/* last cacheline: 56 bytes */
};
struct ofproto_async_msg {
	struct ovs_list            list_node;            /*     0    16 */
	uint16_t                   controller_id;        /*    16     2 */

	/* XXX 2 bytes hole, try to pack */

	enum ofputil_async_msg_type oam;                 /*    20     4 */
	struct {
		struct ofputil_packet_in_private up;     /*    24  3520 */
		/* --- cacheline 55 boundary (3520 bytes) --- */
		int                max_len;              /*  3544     4 */
	} pin;                                           /*    24  3528 */
	/* --- cacheline 55 boundary (3520 bytes) was 32 bytes ago --- */

	/* size: 3552, cachelines: 56, members: 4 */
	/* sum members: 3550, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct ofmonitor {
	struct ofconn *            ofconn;               /*     0     8 */
	struct hmap_node           ofconn_node;          /*     8    16 */
	uint32_t                   id;                   /*    24     4 */
	enum nx_flow_monitor_flags flags;                /*    28     4 */
	ofp_port_t                 out_port;             /*    32     4 */
	uint8_t                    table_id;             /*    36     1 */

	/* XXX 3 bytes hole, try to pack */

	struct minimatch           match;                /*    40    16 */

	/* size: 56, cachelines: 1, members: 7 */
	/* sum members: 53, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct ofconn {
	struct ovs_list            node;                 /*     0    16 */
	struct hmap_node           hmap_node;            /*    16    16 */
	struct connmgr *           connmgr;              /*    32     8 */
	struct rconn *             rconn;                /*    40     8 */
	enum ofconn_type           type;                 /*    48     4 */
	enum ofproto_band          band;                 /*    52     4 */
	_Bool                      enable_async_msgs;    /*    56     1 */
	_Bool                      want_packet_in_on_miss; /*    57     1 */

	/* XXX 2 bytes hole, try to pack */

	enum ofp12_controller_role role;                 /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	enum ofputil_protocol      protocol;             /*    64     4 */
	enum nx_packet_in_format   packet_in_format;     /*    68     4 */
	struct rconn_packet_counter * packet_in_counter; /*    72     8 */
	struct pinsched *          schedulers[2];        /*    80    16 */
	int                        miss_send_len;        /*    96     4 */
	uint16_t                   controller_id;        /*   100     2 */

	/* XXX 2 bytes hole, try to pack */

	struct rconn_packet_counter * reply_counter;     /*   104     8 */
	struct ofputil_async_cfg * async_cfg;            /*   112     8 */
	int                        n_add;                /*   120     4 */
	int                        n_delete;             /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        n_modify;             /*   128     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              first_op;             /*   136     8 */
	long long int              last_op;              /*   144     8 */
	long long int              next_op_report;       /*   152     8 */
	long long int              op_backoff;           /*   160     8 */
	struct hmap                monitors;             /*   168    32 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	uint64_t                   monitor_paused;       /*   200     8 */
	struct rconn_packet_counter * monitor_counter;   /*   208     8 */
	struct ovs_list            updates;              /*   216    16 */
	_Bool                      sent_abbrev_update;   /*   232     1 */

	/* XXX 7 bytes hole, try to pack */

	struct hmap                bundles;              /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	long long int              next_bundle_expiry_check; /*   272     8 */

	/* size: 280, cachelines: 5, members: 31 */
	/* sum members: 265, holes: 4, sum holes: 15 */
	/* last cacheline: 24 bytes */
};
struct coverage_counter {
	const char  *const         name;                 /*     0     8 */
	unsigned int ()(void) *const count;              /*     8     8 */
	long long unsigned int     total;                /*    16     8 */
	long long unsigned int     last_total;           /*    24     8 */
	unsigned int               min[12];              /*    32    48 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               hr[60];               /*    80   240 */
	/* --- cacheline 5 boundary (320 bytes) --- */

	/* size: 320, cachelines: 5, members: 6 */
};
struct pinsched_stats {
	unsigned int               n_queued;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     n_normal;             /*     8     8 */
	long long unsigned int     n_limited;            /*    16     8 */
	long long unsigned int     n_queue_dropped;      /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct ofservice {
	struct hmap_node           node;                 /*     0    16 */
	struct pvconn *            pvconn;               /*    16     8 */
	int                        probe_interval;       /*    24     4 */
	int                        rate_limit;           /*    28     4 */
	int                        burst_limit;          /*    32     4 */
	_Bool                      enable_async_msgs;    /*    36     1 */
	uint8_t                    dscp;                 /*    37     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   allowed_versions;     /*    40     4 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 42, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct atomic_count {
	atomic_uint                count;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_rwlock {
	pthread_rwlock_t           lock;                 /*     0    56 */
	const char  *              where;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 2 */
};
struct bond_settings {
	char *                     name;                 /*     0     8 */
	uint32_t                   basis;                /*     8     4 */
	enum bond_mode             balance;              /*    12     4 */
	int                        rebalance_interval;   /*    16     4 */
	int                        up_delay;             /*    20     4 */
	int                        down_delay;           /*    24     4 */
	_Bool                      lacp_fallback_ab_cfg; /*    28     1 */

	/* XXX 1 byte hole, try to pack */

	struct eth_addr            active_slave_mac;     /*    30     6 */

	/* size: 40, cachelines: 1, members: 8 */
	/* sum members: 35, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct odp_support {
	size_t                     max_vlan_headers;     /*     0     8 */
	size_t                     max_mpls_depth;       /*     8     8 */
	_Bool                      recirc;               /*    16     1 */
	_Bool                      ct_state;             /*    17     1 */
	_Bool                      ct_zone;              /*    18     1 */
	_Bool                      ct_mark;              /*    19     1 */
	_Bool                      ct_label;             /*    20     1 */
	_Bool                      ct_state_nat;         /*    21     1 */
	_Bool                      ct_orig_tuple;        /*    22     1 */
	_Bool                      ct_orig_tuple6;       /*    23     1 */

	/* size: 24, cachelines: 1, members: 10 */
	/* last cacheline: 24 bytes */
};
struct dpif_flow_stats {
	uint64_t                   n_packets;            /*     0     8 */
	uint64_t                   n_bytes;              /*     8     8 */
	long long int              used;                 /*    16     8 */
	uint16_t                   tcp_flags;            /*    24     2 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct rule_dpif {
	struct rule                up;                   /*     0   288 */
	/* --- cacheline 4 boundary (256 bytes) was 32 bytes ago --- */
	struct ovs_mutex           stats_mutex;          /*   288    48 */
	/* --- cacheline 5 boundary (320 bytes) was 16 bytes ago --- */
	struct dpif_flow_stats     stats;                /*   336    32 */

	/* XXX last struct has 6 bytes of padding */

	struct rule_dpif *         new_rule;             /*   368     8 */
	_Bool                      forward_counts;       /*   376     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   recirc_id;            /*   380     4 */
	/* --- cacheline 6 boundary (384 bytes) --- */

	/* size: 384, cachelines: 6, members: 6 */
	/* sum members: 381, holes: 1, sum holes: 3 */
	/* paddings: 1, sum paddings: 6 */
};
struct dpif_backer_support {
	_Bool                      variable_length_userdata; /*     0     1 */
	_Bool                      masked_set_action;    /*     1     1 */
	_Bool                      tnl_push_pop;         /*     2     1 */
	_Bool                      ufid;                 /*     3     1 */
	_Bool                      trunc;                /*     4     1 */
	_Bool                      clone;                /*     5     1 */

	/* XXX 2 bytes hole, try to pack */

	size_t                     sample_nesting;       /*     8     8 */
	_Bool                      ct_eventmask;         /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	struct odp_support         odp;                  /*    24    24 */

	/* size: 48, cachelines: 1, members: 9 */
	/* sum members: 39, holes: 2, sum holes: 9 */
	/* last cacheline: 48 bytes */
};
struct dpif_backer {
	char *                     type;                 /*     0     8 */
	int                        refcount;             /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct dpif *              dpif;                 /*    16     8 */
	struct udpif *             udpif;                /*    24     8 */
	struct ovs_rwlock          odp_to_ofport_lock;   /*    32    64 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	struct hmap                odp_to_ofport_map;    /*    96    32 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct simap               tnl_backers;          /*   128    32 */
	enum revalidate_reason     need_revalidate;      /*   160     4 */
	_Bool                      recv_set_enable;      /*   164     1 */

	/* XXX 3 bytes hole, try to pack */

	struct id_pool *           meter_ids;            /*   168     8 */
	char *                     dp_version_string;    /*   176     8 */
	struct dpif_backer_support bt_support;           /*   184    48 */
	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	struct dpif_backer_support rt_support;           /*   232    48 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	struct atomic_count        tnl_count;            /*   280     4 */

	/* size: 288, cachelines: 5, members: 14 */
	/* sum members: 277, holes: 2, sum holes: 7 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct ofproto_dpif {
	struct hmap_node           all_ofproto_dpifs_node; /*     0    16 */
	struct ofproto             up;                   /*    16   584 */
	/* --- cacheline 9 boundary (576 bytes) was 24 bytes ago --- */
	struct dpif_backer *       backer;               /*   600     8 */
	struct uuid                uuid;                 /*   608    16 */
	ovs_version_t              tables_version;       /*   624     8 */
	uint64_t                   dump_seq;             /*   632     8 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	struct rule_dpif *         miss_rule;            /*   640     8 */
	struct rule_dpif *         no_packet_in_rule;    /*   648     8 */
	struct rule_dpif *         drop_frags_rule;      /*   656     8 */
	struct netflow *           netflow;              /*   664     8 */
	struct dpif_sflow *        sflow;                /*   672     8 */
	struct dpif_ipfix *        ipfix;                /*   680     8 */
	struct hmap                bundles;              /*   688    32 */
	/* --- cacheline 11 boundary (704 bytes) was 16 bytes ago --- */
	struct mac_learning *      ml;                   /*   720     8 */
	struct mcast_snooping *    ms;                   /*   728     8 */
	_Bool                      has_bonded_bundles;   /*   736     1 */
	_Bool                      lacp_enabled;         /*   737     1 */

	/* XXX 6 bytes hole, try to pack */

	struct mbridge *           mbridge;              /*   744     8 */
	struct ovs_mutex           stats_mutex;          /*   752    48 */
	/* --- cacheline 12 boundary (768 bytes) was 32 bytes ago --- */
	struct netdev_stats        stats;                /*   800   336 */
	/* --- cacheline 17 boundary (1088 bytes) was 48 bytes ago --- */
	struct stp *               stp;                  /*  1136     8 */
	long long int              stp_last_tick;        /*  1144     8 */
	/* --- cacheline 18 boundary (1152 bytes) --- */
	struct rstp *              rstp;                 /*  1152     8 */
	long long int              rstp_last_tick;       /*  1160     8 */
	struct sset                ports;                /*  1168    32 */
	struct sset                ghost_ports;          /*  1200    32 */
	/* --- cacheline 19 boundary (1216 bytes) was 16 bytes ago --- */
	struct sset                port_poll_set;        /*  1232    32 */
	int                        port_poll_errno;      /*  1264     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   change_seq;           /*  1272     8 */
	/* --- cacheline 20 boundary (1280 bytes) --- */
	struct guarded_list        ams;                  /*  1280    72 */
	/* --- cacheline 21 boundary (1344 bytes) was 8 bytes ago --- */
	struct seq *               ams_seq;              /*  1352     8 */
	uint64_t                   ams_seqno;            /*  1360     8 */

	/* size: 1368, cachelines: 22, members: 32 */
	/* sum members: 1358, holes: 2, sum holes: 10 */
	/* last cacheline: 24 bytes */
};
struct bond_entry {
	struct bond_slave *        slave;                /*     0     8 */
	uint64_t                   tx_bytes;             /*     8     8 */
	struct ovs_list            list_node;            /*    16    16 */
	struct rule *              pr_rule;              /*    32     8 */
	uint64_t                   pr_tx_bytes;          /*    40     8 */

	/* size: 48, cachelines: 1, members: 5 */
	/* last cacheline: 48 bytes */
};
struct bond_slave {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovs_list            list_node;            /*    16    16 */
	struct bond *              bond;                 /*    32     8 */
	void *                     aux;                  /*    40     8 */
	struct netdev *            netdev;               /*    48     8 */
	uint64_t                   change_seq;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     name;                 /*    64     8 */
	ofp_port_t                 ofp_port;             /*    72     4 */
	_Bool                      enabled;              /*    76     1 */
	_Bool                      may_enable;           /*    77     1 */

	/* XXX 2 bytes hole, try to pack */

	long long int              delay_expires;        /*    80     8 */
	struct ovs_list            bal_node;             /*    88    16 */
	struct ovs_list            entries;              /*   104    16 */
	uint64_t                   tx_bytes;             /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 14 */
	/* sum members: 126, holes: 1, sum holes: 2 */
};
struct bond {
	struct hmap_node           hmap_node;            /*     0    16 */
	char *                     name;                 /*    16     8 */
	struct ofproto_dpif *      ofproto;              /*    24     8 */
	struct hmap                slaves;               /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_mutex           mutex;                /*    64    48 */
	struct ovs_list            enabled_slaves;       /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	enum bond_mode             balance;              /*   128     4 */

	/* XXX 4 bytes hole, try to pack */

	struct bond_slave *        active_slave;         /*   136     8 */
	int                        updelay;              /*   144     4 */
	int                        downdelay;            /*   148     4 */
	enum lacp_status           lacp_status;          /*   152     4 */
	_Bool                      bond_revalidate;      /*   156     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   basis;                /*   160     4 */

	/* XXX 4 bytes hole, try to pack */

	struct bond_entry *        hash;                 /*   168     8 */
	int                        rebalance_interval;   /*   176     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              next_rebalance;       /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	_Bool                      send_learning_packets; /*   192     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   recirc_id;            /*   196     4 */
	struct hmap                pr_rule_ops;          /*   200    32 */
	_Bool                      active_slave_changed; /*   232     1 */

	/* XXX 1 byte hole, try to pack */

	struct eth_addr            active_slave_mac;     /*   234     6 */
	_Bool                      lacp_fallback_ab;     /*   240     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ovs_refcount        ref_cnt;              /*   244     4 */

	/* size: 248, cachelines: 4, members: 23 */
	/* sum members: 226, holes: 7, sum holes: 22 */
	/* last cacheline: 56 bytes */
};
struct bond_pr_rule_op {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	ofp_port_t                 out_ofport;           /*  3416     4 */
	enum bond_op               op;                   /*  3420     4 */
	struct rule * *            pr_rule;              /*  3424     8 */

	/* size: 3432, cachelines: 54, members: 5 */
	/* last cacheline: 40 bytes */
};
struct ofpact_queue {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct in_band_remote {
	struct sockaddr_in         remote_addr;          /*     0    16 */
	struct eth_addr            remote_mac;           /*    16     6 */
	struct eth_addr            last_remote_mac;      /*    22     6 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev *            remote_netdev;        /*    32     8 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct in_band_rule {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	int                        priority;             /*  3416     4 */
	enum in_band_op            op;                   /*  3420     4 */

	/* size: 3424, cachelines: 54, members: 4 */
	/* last cacheline: 32 bytes */
};
struct in_band {
	struct ofproto *           ofproto;              /*     0     8 */
	int                        queue_id;             /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	time_t                     next_remote_refresh;  /*    16     8 */
	struct in_band_remote *    remotes;              /*    24     8 */
	size_t                     n_remotes;            /*    32     8 */
	time_t                     next_local_refresh;   /*    40     8 */
	struct eth_addr            local_mac;            /*    48     6 */

	/* XXX 2 bytes hole, try to pack */

	struct netdev *            local_netdev;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct hmap                rules;                /*    64    32 */

	/* size: 96, cachelines: 2, members: 9 */
	/* sum members: 90, holes: 2, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct cmap_cursor {
	const struct cmap_impl  *  impl;                 /*     0     8 */
	uint32_t                   bucket_idx;           /*     8     4 */
	int                        entry_idx;            /*    12     4 */
	struct cmap_node *         node;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct ofp_desc_stats {
	char                       mfr_desc[256];        /*     0   256 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	char                       hw_desc[256];         /*   256   256 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	char                       sw_desc[256];         /*   512   256 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	char                       serial_num[32];       /*   768    32 */
	char                       dp_desc[256];         /*   800   256 */
	/* --- cacheline 16 boundary (1024 bytes) was 32 bytes ago --- */

	/* size: 1056, cachelines: 17, members: 5 */
	/* last cacheline: 32 bytes */
};
struct nx_flow_mod_table_id {
	uint8_t                    set;                  /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nx_set_packet_in_format {
	ovs_be32                   format;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_set_flow_format {
	ovs_be32                   format;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_controller_id {
	uint8_t                    zero[6];              /*     0     6 */
	ovs_be16                   controller_id;        /*     6     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nx_zone_id {
	uint8_t                    zero[6];              /*     0     6 */
	ovs_be16                   zone_id;              /*     6     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct pvector_cursor {
	size_t                     size;                 /*     0     8 */
	size_t                     entry_idx;            /*     8     8 */
	const struct pvector_entry  * vector;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct cls_cursor {
	const struct classifier  * cls;                  /*     0     8 */
	const struct cls_subtable  * subtable;           /*     8     8 */
	const struct cls_rule  *   target;               /*    16     8 */
	ovs_version_t              version;              /*    24     8 */
	struct pvector_cursor      subtables;            /*    32    24 */
	const struct cls_rule  *   rule;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
};
struct ofputil_flow_mod {
	struct ovs_list            list_node;            /*     0    16 */
	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	int                        priority;             /*  3416     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   cookie;               /*  3424     8 */
	ovs_be64                   cookie_mask;          /*  3432     8 */
	ovs_be64                   new_cookie;           /*  3440     8 */
	_Bool                      modify_cookie;        /*  3448     1 */
	uint8_t                    table_id;             /*  3449     1 */
	uint16_t                   command;              /*  3450     2 */
	uint16_t                   idle_timeout;         /*  3452     2 */
	uint16_t                   hard_timeout;         /*  3454     2 */
	/* --- cacheline 54 boundary (3456 bytes) --- */
	uint32_t                   buffer_id;            /*  3456     4 */
	ofp_port_t                 out_port;             /*  3460     4 */
	uint32_t                   out_group;            /*  3464     4 */
	enum ofputil_flow_mod_flags flags;               /*  3468     4 */
	uint16_t                   importance;           /*  3472     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofpact *            ofpacts;              /*  3480     8 */
	size_t                     ofpacts_len;          /*  3488     8 */
	uint64_t                   ofpacts_tlv_bitmap;   /*  3496     8 */

	/* size: 3504, cachelines: 55, members: 19 */
	/* sum members: 3494, holes: 2, sum holes: 10 */
	/* last cacheline: 48 bytes */
};
struct ofputil_flow_stats_request {
	_Bool                      aggregate;            /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct match               match;                /*     8  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 16 bytes ago --- */
	ovs_be64                   cookie;               /*  3408     8 */
	ovs_be64                   cookie_mask;          /*  3416     8 */
	ofp_port_t                 out_port;             /*  3424     4 */
	uint32_t                   out_group;            /*  3428     4 */
	uint8_t                    table_id;             /*  3432     1 */

	/* size: 3440, cachelines: 54, members: 7 */
	/* sum members: 3426, holes: 1, sum holes: 7 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct ofputil_flow_stats {
	struct match               match;                /*     0  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */
	ovs_be64                   cookie;               /*  3400     8 */
	uint8_t                    table_id;             /*  3408     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   priority;             /*  3410     2 */
	uint16_t                   idle_timeout;         /*  3412     2 */
	uint16_t                   hard_timeout;         /*  3414     2 */
	uint32_t                   duration_sec;         /*  3416     4 */
	uint32_t                   duration_nsec;        /*  3420     4 */
	int                        idle_age;             /*  3424     4 */
	int                        hard_age;             /*  3428     4 */
	uint64_t                   packet_count;         /*  3432     8 */
	uint64_t                   byte_count;           /*  3440     8 */
	const struct ofpact  *     ofpacts;              /*  3448     8 */
	/* --- cacheline 54 boundary (3456 bytes) --- */
	size_t                     ofpacts_len;          /*  3456     8 */
	enum ofputil_flow_mod_flags flags;               /*  3464     4 */
	uint16_t                   importance;           /*  3468     2 */

	/* size: 3472, cachelines: 55, members: 16 */
	/* sum members: 3469, holes: 1, sum holes: 1 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_aggregate_stats {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */
	uint32_t                   flow_count;           /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofputil_packet_out {
	const void  *              packet;               /*     0     8 */
	size_t                     packet_len;           /*     8     8 */
	uint32_t                   buffer_id;            /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct match               flow_metadata;        /*    24  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 32 bytes ago --- */
	struct ofpact *            ofpacts;              /*  3424     8 */
	size_t                     ofpacts_len;          /*  3432     8 */

	/* size: 3440, cachelines: 54, members: 6 */
	/* sum members: 3436, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofputil_switch_config {
	enum ofputil_frag_handling frag;                 /*     0     4 */
	int                        invalid_ttl_to_controller; /*     4     4 */
	uint16_t                   miss_send_len;        /*     8     2 */

	/* size: 12, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofputil_switch_features {
	uint64_t                   datapath_id;          /*     0     8 */
	uint32_t                   n_buffers;            /*     8     4 */
	uint8_t                    n_tables;             /*    12     1 */
	uint8_t                    auxiliary_id;         /*    13     1 */

	/* XXX 2 bytes hole, try to pack */

	enum ofputil_capabilities  capabilities;         /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   ofpacts;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 26, holes: 2, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_mod {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofputil_table_miss    miss;                 /*     4     4 */
	enum ofputil_table_eviction eviction;            /*     8     4 */
	uint32_t                   eviction_flags;       /*    12     4 */
	enum ofputil_table_vacancy vacancy;              /*    16     4 */
	struct ofputil_table_mod_prop_vacancy table_vacancy; /*    20     3 */

	/* size: 24, cachelines: 1, members: 6 */
	/* sum members: 20, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 24 bytes */
};
struct ofputil_role_request {
	enum ofp12_controller_role role;                 /*     0     4 */
	_Bool                      have_generation_id;   /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	uint64_t                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_queue_config {
	ofp_port_t                 port;                 /*     0     4 */
	uint32_t                   queue;                /*     4     4 */
	uint16_t                   min_rate;             /*     8     2 */
	uint16_t                   max_rate;             /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct ofputil_port_stats {
	ofp_port_t                 port_no;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev_stats        stats;                /*     8   336 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	uint32_t                   duration_sec;         /*   344     4 */
	uint32_t                   duration_nsec;        /*   348     4 */

	/* size: 352, cachelines: 6, members: 4 */
	/* sum members: 348, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct ofputil_queue_stats_request {
	ofp_port_t                 port_no;              /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofputil_queue_stats {
	ofp_port_t                 port_no;              /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */
	uint64_t                   tx_bytes;             /*     8     8 */
	uint64_t                   tx_packets;           /*    16     8 */
	uint64_t                   tx_errors;            /*    24     8 */
	uint32_t                   duration_sec;         /*    32     4 */
	uint32_t                   duration_nsec;        /*    36     4 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ofputil_bucket {
	struct ovs_list            list_node;            /*     0    16 */
	uint16_t                   weight;               /*    16     2 */

	/* XXX 2 bytes hole, try to pack */

	ofp_port_t                 watch_port;           /*    20     4 */
	uint32_t                   watch_group;          /*    24     4 */
	uint32_t                   bucket_id;            /*    28     4 */
	struct ofpact *            ofpacts;              /*    32     8 */
	size_t                     ofpacts_len;          /*    40     8 */
	struct bucket_counter      stats;                /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
	/* sum members: 62, holes: 1, sum holes: 2 */
};
struct ofputil_group_desc {
	uint8_t                    type;                 /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   group_id;             /*     4     4 */
	struct ovs_list            buckets;              /*     8    16 */
	struct ofputil_group_props props;                /*    24    64 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 4 */
	/* sum members: 85, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ofputil_bundle_ctrl_msg {
	uint32_t                   bundle_id;            /*     0     4 */
	uint16_t                   type;                 /*     4     2 */
	uint16_t                   flags;                /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofputil_bundle_add_msg {
	uint32_t                   bundle_id;            /*     0     4 */
	uint16_t                   flags;                /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	const struct ofp_header  * msg;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 14, holes: 1, sum holes: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_tlv_table_mod {
	uint16_t                   command;              /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ovs_list            mappings;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 18, holes: 1, sum holes: 6 */
	/* last cacheline: 24 bytes */
};
struct ofputil_tlv_table_reply {
	uint32_t                   max_option_space;     /*     0     4 */
	uint16_t                   max_fields;           /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_list            mappings;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 22, holes: 1, sum holes: 2 */
	/* last cacheline: 24 bytes */
};
struct iface_hint {
	char *                     br_name;              /*     0     8 */
	char *                     br_type;              /*     8     8 */
	ofp_port_t                 ofp_port;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto_port_dump {
	const struct ofproto  *    ofproto;              /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofproto_table_settings {
	char *                     name;                 /*     0     8 */
	unsigned int               max_flows;            /*     8     4 */
	_Bool                      enable_eviction;      /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	struct mf_subfield *       groups;               /*    16     8 */
	size_t                     n_groups;             /*    24     8 */
	unsigned int               n_prefix_fields;      /*    32     4 */
	enum mf_field_id           prefix_fields[3];     /*    36     3 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 36, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 40 bytes */
};
struct ofpact_meter {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   meter_id;             /*     4     4 */
	uint32_t                   provider_meter_id;    /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_learn_spec {
	union {
		struct {
			struct mf_subfield src;          /*     0    16 */
			struct mf_subfield dst;          /*    16    16 */
			uint16_t   src_type;             /*    32     2 */
			uint16_t   dst_type;             /*    34     2 */
			uint8_t    n_bits;               /*    36     1 */
		};                                       /*          40 */
		uint8_t            pad7[40];             /*          40 */
	};                                               /*     0    40 */

	/* size: 40, cachelines: 1, members: 1 */
	/* last cacheline: 40 bytes */
};
struct ofpact_learn {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   idle_timeout;         /*     4     2 */
			uint16_t   hard_timeout;         /*     6     2 */
			uint16_t   priority;             /*     8     2 */
			uint8_t    table_id;             /*    10     1 */
			enum nx_learn_flags flags;       /*    12     4 */
			ovs_be64   cookie;               /*    16     8 */
			uint16_t   fin_idle_timeout;     /*    24     2 */
			uint16_t   fin_hard_timeout;     /*    26     2 */
			uint32_t   limit;                /*    28     4 */
			struct mf_subfield result_dst;   /*    32    16 */
		};                                       /*          48 */
		uint8_t            pad8[48];             /*          48 */
	};                                               /*     0    48 */
	struct ofpact_learn_spec   specs[0];             /*    48     0 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ofpact_conjunction {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    clause;               /*     4     1 */
	uint8_t                    n_clauses;            /*     5     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   id;                   /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* sum members: 10, holes: 1, sum holes: 2 */
	/* last cacheline: 12 bytes */
};
struct ofpact_group {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   group_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct simap_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	unsigned int               data;                 /*    24     4 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct eviction_group {
	struct hmap_node           id_node;              /*     0    16 */
	struct heap_node           size_node;            /*    16    16 */
	struct heap                rules;                /*    32    24 */

	/* size: 56, cachelines: 1, members: 3 */
	/* last cacheline: 56 bytes */
};
struct netdev_queue_stats {
	uint64_t                   tx_bytes;             /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   tx_errors;            /*    16     8 */
	long long int              created;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct netdev_queue_dump {
	struct netdev *            netdev;               /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct learned_cookie {
	union {
		struct hmap_node   hmap_node;            /*          16 */
		struct ovs_list    list_node;            /*          16 */
	} u;                                             /*     0    16 */
	ovs_be64                   cookie;               /*    16     8 */
	uint8_t                    table_id;             /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        n;                    /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 29, holes: 1, sum holes: 3 */
	/* last cacheline: 32 bytes */
};
struct ofport_usage {
	struct hmap_node           hmap_node;            /*     0    16 */
	ofp_port_t                 ofp_port;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_used;            /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct openflow_mod_requester {
	struct ofconn *            ofconn;               /*     0     8 */
	const struct ofp_header  * request;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct queue_stats_cbdata {
	struct ofport *            ofport;               /*     0     8 */
	struct ovs_list            replies;              /*     8    16 */
	long long int              now;                  /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct meter {
	struct hmap_node           node;                 /*     0    16 */
	long long int              created;              /*    16     8 */
	struct ovs_list            rules;                /*    24    16 */
	uint32_t                   id;                   /*    40     4 */
	ofproto_meter_id           provider_meter_id;    /*    44     4 */
	uint16_t                   flags;                /*    48     2 */
	uint16_t                   n_bands;              /*    50     2 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_meter_band * bands;               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct timeval {
	__time_t                   tv_sec;               /*     0     8 */
	__suseconds_t              tv_usec;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct genevehdr {
	uint8_t                    opt_len:6;            /*     0: 2  1 */
	uint8_t                    ver:2;                /*     0: 0  1 */
	uint8_t                    rsvd1:6;              /*     1: 2  1 */
	uint8_t                    critical:1;           /*     1: 1  1 */
	uint8_t                    oam:1;                /*     1: 0  1 */
	ovs_be16                   proto_type;           /*     2     2 */
	ovs_16aligned_be32         vni;                  /*     4     4 */
	struct geneve_opt          options[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 8 */
	/* last cacheline: 8 bytes */
};
struct ovs_key_mpls {
	ovs_be32                   mpls_lse;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_key_ipv4 {
	ovs_be32                   ipv4_src;             /*     0     4 */
	ovs_be32                   ipv4_dst;             /*     4     4 */
	uint8_t                    ipv4_proto;           /*     8     1 */
	uint8_t                    ipv4_tos;             /*     9     1 */
	uint8_t                    ipv4_ttl;             /*    10     1 */
	uint8_t                    ipv4_frag;            /*    11     1 */

	/* size: 12, cachelines: 1, members: 6 */
	/* last cacheline: 12 bytes */
};
struct ovs_key_tcp {
	ovs_be16                   tcp_src;              /*     0     2 */
	ovs_be16                   tcp_dst;              /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ovs_action_push_mpls {
	ovs_be32                   mpls_lse;             /*     0     4 */
	ovs_be16                   mpls_ethertype;       /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct nlattr {
	__u16                      nla_len;              /*     0     2 */
	__u16                      nla_type;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct eth_header {
	struct eth_addr            eth_dst;              /*     0     6 */
	struct eth_addr            eth_src;              /*     6     6 */
	ovs_be16                   eth_type;             /*    12     2 */

	/* size: 14, cachelines: 1, members: 3 */
	/* last cacheline: 14 bytes */
};
struct ip_header {
	uint8_t                    ip_ihl_ver;           /*     0     1 */
	uint8_t                    ip_tos;               /*     1     1 */
	ovs_be16                   ip_tot_len;           /*     2     2 */
	ovs_be16                   ip_id;                /*     4     2 */
	ovs_be16                   ip_frag_off;          /*     6     2 */
	uint8_t                    ip_ttl;               /*     8     1 */
	uint8_t                    ip_proto;             /*     9     1 */
	ovs_be16                   ip_csum;              /*    10     2 */
	ovs_16aligned_be32         ip_src;               /*    12     4 */
	ovs_16aligned_be32         ip_dst;               /*    16     4 */

	/* size: 20, cachelines: 1, members: 10 */
	/* last cacheline: 20 bytes */
};
struct udp_header {
	ovs_be16                   udp_src;              /*     0     2 */
	ovs_be16                   udp_dst;              /*     2     2 */
	ovs_be16                   udp_len;              /*     4     2 */
	ovs_be16                   udp_csum;             /*     6     2 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct gre_base_hdr {
	ovs_be16                   flags;                /*     0     2 */
	ovs_be16                   protocol;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct vxlanhdr {
	union {
		ovs_16aligned_be32 vx_flags;             /*           4 */
		struct {
			uint8_t    flags;                /*     0     1 */
			uint8_t    reserved[2];          /*     1     2 */
			uint8_t    next_protocol;        /*     3     1 */
		} vx_gpe;                                /*           4 */
	};                                               /*     0     4 */
	ovs_16aligned_be32         vx_vni;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct dpif_sflow_actions {
	odp_port_t                 out_port;             /*     0     4 */
	uint32_t                   encap_depth;          /*     4     4 */
	struct flow_tnl            tunnel;               /*     8   344 */
	/* --- cacheline 5 boundary (320 bytes) was 32 bytes ago --- */
	uint8_t                    tunnel_ipproto;       /*   352     1 */
	_Bool                      tunnel_err;           /*   353     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   mpls_lse[3];          /*   356    12 */
	uint32_t                   mpls_stack_depth;     /*   368     4 */
	_Bool                      mpls_err;             /*   372     1 */

	/* size: 376, cachelines: 6, members: 8 */
	/* sum members: 371, holes: 1, sum holes: 2 */
	/* padding: 3 */
	/* last cacheline: 56 bytes */
};
struct rusage {
	struct timeval             ru_utime;             /*     0    16 */
	struct timeval             ru_stime;             /*    16    16 */
	union {
		long int           ru_maxrss;            /*           8 */
		__syscall_slong_t  __ru_maxrss_word;     /*           8 */
	};                                               /*    32     8 */
	union {
		long int           ru_ixrss;             /*           8 */
		__syscall_slong_t  __ru_ixrss_word;      /*           8 */
	};                                               /*    40     8 */
	union {
		long int           ru_idrss;             /*           8 */
		__syscall_slong_t  __ru_idrss_word;      /*           8 */
	};                                               /*    48     8 */
	union {
		long int           ru_isrss;             /*           8 */
		__syscall_slong_t  __ru_isrss_word;      /*           8 */
	};                                               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		long int           ru_minflt;            /*           8 */
		__syscall_slong_t  __ru_minflt_word;     /*           8 */
	};                                               /*    64     8 */
	union {
		long int           ru_majflt;            /*           8 */
		__syscall_slong_t  __ru_majflt_word;     /*           8 */
	};                                               /*    72     8 */
	union {
		long int           ru_nswap;             /*           8 */
		__syscall_slong_t  __ru_nswap_word;      /*           8 */
	};                                               /*    80     8 */
	union {
		long int           ru_inblock;           /*           8 */
		__syscall_slong_t  __ru_inblock_word;    /*           8 */
	};                                               /*    88     8 */
	union {
		long int           ru_oublock;           /*           8 */
		__syscall_slong_t  __ru_oublock_word;    /*           8 */
	};                                               /*    96     8 */
	union {
		long int           ru_msgsnd;            /*           8 */
		__syscall_slong_t  __ru_msgsnd_word;     /*           8 */
	};                                               /*   104     8 */
	union {
		long int           ru_msgrcv;            /*           8 */
		__syscall_slong_t  __ru_msgrcv_word;     /*           8 */
	};                                               /*   112     8 */
	union {
		long int           ru_nsignals;          /*           8 */
		__syscall_slong_t  __ru_nsignals_word;   /*           8 */
	};                                               /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	union {
		long int           ru_nvcsw;             /*           8 */
		__syscall_slong_t  __ru_nvcsw_word;      /*           8 */
	};                                               /*   128     8 */
	union {
		long int           ru_nivcsw;            /*           8 */
		__syscall_slong_t  __ru_nivcsw_word;     /*           8 */
	};                                               /*   136     8 */

	/* size: 144, cachelines: 3, members: 16 */
	/* last cacheline: 16 bytes */
};
struct dpif_dp_stats {
	uint64_t                   n_hit;                /*     0     8 */
	uint64_t                   n_missed;             /*     8     8 */
	uint64_t                   n_lost;               /*    16     8 */
	uint64_t                   n_flows;              /*    24     8 */
	uint64_t                   n_mask_hit;           /*    32     8 */
	uint32_t                   n_masks;              /*    40     4 */

	/* size: 48, cachelines: 1, members: 6 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct _SFLAddress {
	u_int32_t                  type;                 /*     0     4 */
	SFLAddress_value           address;              /*     4    16 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct _SFLSampled_header {
	u_int32_t                  header_protocol;      /*     0     4 */
	u_int32_t                  frame_length;         /*     4     4 */
	u_int32_t                  stripped;             /*     8     4 */
	u_int32_t                  header_length;        /*    12     4 */
	u_int8_t *                 header_bytes;         /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct _SFLSampled_ethernet {
	u_int32_t                  eth_len;              /*     0     4 */
	struct eth_addr            src_mac;              /*     4     6 */
	u_int8_t                   pad1[2];              /*    10     2 */
	struct eth_addr            dst_mac;              /*    12     6 */
	u_int8_t                   pad2[2];              /*    18     2 */
	u_int32_t                  eth_type;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct _SFLSampled_ipv4 {
	u_int32_t                  length;               /*     0     4 */
	u_int32_t                  protocol;             /*     4     4 */
	SFLIPv4                    src_ip;               /*     8     4 */
	SFLIPv4                    dst_ip;               /*    12     4 */
	u_int32_t                  src_port;             /*    16     4 */
	u_int32_t                  dst_port;             /*    20     4 */
	u_int32_t                  tcp_flags;            /*    24     4 */
	u_int32_t                  tos;                  /*    28     4 */

	/* size: 32, cachelines: 1, members: 8 */
	/* last cacheline: 32 bytes */
};
struct _SFLSampled_ipv6 {
	u_int32_t                  length;               /*     0     4 */
	u_int32_t                  protocol;             /*     4     4 */
	SFLIPv6                    src_ip;               /*     8    16 */
	SFLIPv6                    dst_ip;               /*    24    16 */
	u_int32_t                  src_port;             /*    40     4 */
	u_int32_t                  dst_port;             /*    44     4 */
	u_int32_t                  tcp_flags;            /*    48     4 */
	u_int32_t                  priority;             /*    52     4 */

	/* size: 56, cachelines: 1, members: 8 */
	/* last cacheline: 56 bytes */
};
struct _SFLExtended_switch {
	u_int32_t                  src_vlan;             /*     0     4 */
	u_int32_t                  src_priority;         /*     4     4 */
	u_int32_t                  dst_vlan;             /*     8     4 */
	u_int32_t                  dst_priority;         /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_router {
	SFLAddress                 nexthop;              /*     0    20 */
	u_int32_t                  src_mask;             /*    20     4 */
	u_int32_t                  dst_mask;             /*    24     4 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct _SFLExtended_as_path_segment {
	u_int32_t                  type;                 /*     0     4 */
	u_int32_t                  length;               /*     4     4 */
	union {
		u_int32_t *        set;                  /*           8 */
		u_int32_t *        seq;                  /*           8 */
	} as;                                            /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_gateway {
	SFLAddress                 nexthop;              /*     0    20 */
	u_int32_t                  as;                   /*    20     4 */
	u_int32_t                  src_as;               /*    24     4 */
	u_int32_t                  src_peer_as;          /*    28     4 */
	u_int32_t                  dst_as_path_segments; /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLExtended_as_path_segment * dst_as_path;       /*    40     8 */
	u_int32_t                  communities_length;   /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int32_t *                communities;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  localpref;            /*    64     4 */

	/* size: 72, cachelines: 2, members: 9 */
	/* sum members: 60, holes: 2, sum holes: 8 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct _SFLString {
	u_int32_t                  len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     str;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_user {
	u_int32_t                  src_charset;          /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  src_user;             /*     8    16 */
	u_int32_t                  dst_charset;          /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  dst_user;             /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 40, holes: 2, sum holes: 8 */
	/* last cacheline: 48 bytes */
};
struct _SFLExtended_url {
	u_int32_t                  direction;            /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  url;                  /*     8    16 */
	SFLString                  host;                 /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct _SFLLabelStack {
	u_int32_t                  depth;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int32_t *                stack;                /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_mpls {
	SFLAddress                 nextHop;              /*     0    20 */

	/* XXX 4 bytes hole, try to pack */

	SFLLabelStack              in_stack;             /*    24    16 */
	SFLLabelStack              out_stack;            /*    40    16 */

	/* size: 56, cachelines: 1, members: 3 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct _SFLExtended_nat {
	SFLAddress                 src;                  /*     0    20 */
	SFLAddress                 dst;                  /*    20    20 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct _SFLExtended_mpls_tunnel {
	SFLString                  tunnel_lsp_name;      /*     0    16 */
	u_int32_t                  tunnel_id;            /*    16     4 */
	u_int32_t                  tunnel_cos;           /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_vc {
	SFLString                  vc_instance_name;     /*     0    16 */
	u_int32_t                  vll_vc_id;            /*    16     4 */
	u_int32_t                  vc_label_cos;         /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_FTN {
	SFLString                  mplsFTNDescr;         /*     0    16 */
	u_int32_t                  mplsFTNMask;          /*    16     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_LDP_FEC {
	u_int32_t                  mplsFecAddrPrefixLength; /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct _SFLExtended_vlan_tunnel {
	SFLVlanStack               stack;                /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_vni {
	uint32_t                   vni;                  /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct _SFLFlow_sample_element {
	struct _SFLFlow_sample_element * nxt;            /*     0     8 */
	u_int32_t                  tag;                  /*     8     4 */
	u_int32_t                  length;               /*    12     4 */
	SFLFlow_type               flowType;             /*    16    72 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLFlow_sample {
	u_int32_t                  sequence_number;      /*     0     4 */
	u_int32_t                  source_id;            /*     4     4 */
	u_int32_t                  sampling_rate;        /*     8     4 */
	u_int32_t                  sample_pool;          /*    12     4 */
	u_int32_t                  drops;                /*    16     4 */
	u_int32_t                  input;                /*    20     4 */
	u_int32_t                  output;               /*    24     4 */
	u_int32_t                  num_elements;         /*    28     4 */
	SFLFlow_sample_element *   elements;             /*    32     8 */

	/* size: 40, cachelines: 1, members: 9 */
	/* last cacheline: 40 bytes */
};
struct _SFLIf_counters {
	u_int32_t                  ifIndex;              /*     0     4 */
	u_int32_t                  ifType;               /*     4     4 */
	u_int64_t                  ifSpeed;              /*     8     8 */
	u_int32_t                  ifDirection;          /*    16     4 */
	u_int32_t                  ifStatus;             /*    20     4 */
	u_int64_t                  ifInOctets;           /*    24     8 */
	u_int32_t                  ifInUcastPkts;        /*    32     4 */
	u_int32_t                  ifInMulticastPkts;    /*    36     4 */
	u_int32_t                  ifInBroadcastPkts;    /*    40     4 */
	u_int32_t                  ifInDiscards;         /*    44     4 */
	u_int32_t                  ifInErrors;           /*    48     4 */
	u_int32_t                  ifInUnknownProtos;    /*    52     4 */
	u_int64_t                  ifOutOctets;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  ifOutUcastPkts;       /*    64     4 */
	u_int32_t                  ifOutMulticastPkts;   /*    68     4 */
	u_int32_t                  ifOutBroadcastPkts;   /*    72     4 */
	u_int32_t                  ifOutDiscards;        /*    76     4 */
	u_int32_t                  ifOutErrors;          /*    80     4 */
	u_int32_t                  ifPromiscuousMode;    /*    84     4 */

	/* size: 88, cachelines: 2, members: 19 */
	/* last cacheline: 24 bytes */
};
struct _SFLEthernet_counters {
	u_int32_t                  dot3StatsAlignmentErrors; /*     0     4 */
	u_int32_t                  dot3StatsFCSErrors;   /*     4     4 */
	u_int32_t                  dot3StatsSingleCollisionFrames; /*     8     4 */
	u_int32_t                  dot3StatsMultipleCollisionFrames; /*    12     4 */
	u_int32_t                  dot3StatsSQETestErrors; /*    16     4 */
	u_int32_t                  dot3StatsDeferredTransmissions; /*    20     4 */
	u_int32_t                  dot3StatsLateCollisions; /*    24     4 */
	u_int32_t                  dot3StatsExcessiveCollisions; /*    28     4 */
	u_int32_t                  dot3StatsInternalMacTransmitErrors; /*    32     4 */
	u_int32_t                  dot3StatsCarrierSenseErrors; /*    36     4 */
	u_int32_t                  dot3StatsFrameTooLongs; /*    40     4 */
	u_int32_t                  dot3StatsInternalMacReceiveErrors; /*    44     4 */
	u_int32_t                  dot3StatsSymbolErrors; /*    48     4 */

	/* size: 52, cachelines: 1, members: 13 */
	/* last cacheline: 52 bytes */
};
struct _SFLTokenring_counters {
	u_int32_t                  dot5StatsLineErrors;  /*     0     4 */
	u_int32_t                  dot5StatsBurstErrors; /*     4     4 */
	u_int32_t                  dot5StatsACErrors;    /*     8     4 */
	u_int32_t                  dot5StatsAbortTransErrors; /*    12     4 */
	u_int32_t                  dot5StatsInternalErrors; /*    16     4 */
	u_int32_t                  dot5StatsLostFrameErrors; /*    20     4 */
	u_int32_t                  dot5StatsReceiveCongestions; /*    24     4 */
	u_int32_t                  dot5StatsFrameCopiedErrors; /*    28     4 */
	u_int32_t                  dot5StatsTokenErrors; /*    32     4 */
	u_int32_t                  dot5StatsSoftErrors;  /*    36     4 */
	u_int32_t                  dot5StatsHardErrors;  /*    40     4 */
	u_int32_t                  dot5StatsSignalLoss;  /*    44     4 */
	u_int32_t                  dot5StatsTransmitBeacons; /*    48     4 */
	u_int32_t                  dot5StatsRecoverys;   /*    52     4 */
	u_int32_t                  dot5StatsLobeWires;   /*    56     4 */
	u_int32_t                  dot5StatsRemoves;     /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  dot5StatsSingles;     /*    64     4 */
	u_int32_t                  dot5StatsFreqErrors;  /*    68     4 */

	/* size: 72, cachelines: 2, members: 18 */
	/* last cacheline: 8 bytes */
};
struct _SFLVg_counters {
	u_int32_t                  dot12InHighPriorityFrames; /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12InHighPriorityOctets; /*     8     8 */
	u_int32_t                  dot12InNormPriorityFrames; /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12InNormPriorityOctets; /*    24     8 */
	u_int32_t                  dot12InIPMErrors;     /*    32     4 */
	u_int32_t                  dot12InOversizeFrameErrors; /*    36     4 */
	u_int32_t                  dot12InDataErrors;    /*    40     4 */
	u_int32_t                  dot12InNullAddressedFrames; /*    44     4 */
	u_int32_t                  dot12OutHighPriorityFrames; /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12OutHighPriorityOctets; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  dot12TransitionIntoTrainings; /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12HCInHighPriorityOctets; /*    72     8 */
	u_int64_t                  dot12HCInNormPriorityOctets; /*    80     8 */
	u_int64_t                  dot12HCOutHighPriorityOctets; /*    88     8 */

	/* size: 96, cachelines: 2, members: 14 */
	/* sum members: 80, holes: 4, sum holes: 16 */
	/* last cacheline: 32 bytes */
};
struct _SFLVlan_counters {
	u_int32_t                  vlan_id;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  octets;               /*     8     8 */
	u_int32_t                  ucastPkts;            /*    16     4 */
	u_int32_t                  multicastPkts;        /*    20     4 */
	u_int32_t                  broadcastPkts;        /*    24     4 */
	u_int32_t                  discards;             /*    28     4 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct _SFLLACP_counters {
	struct eth_addr            actorSystemID;        /*     0     6 */
	uint8_t                    pad1[2];              /*     6     2 */
	struct eth_addr            partnerSystemID;      /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	uint32_t                   attachedAggID;        /*    16     4 */
	SFLLACP_portState          portState;            /*    20     4 */
	uint32_t                   LACPDUsRx;            /*    24     4 */
	uint32_t                   markerPDUsRx;         /*    28     4 */
	uint32_t                   markerResponsePDUsRx; /*    32     4 */
	uint32_t                   unknownRx;            /*    36     4 */
	uint32_t                   illegalRx;            /*    40     4 */
	uint32_t                   LACPDUsTx;            /*    44     4 */
	uint32_t                   markerPDUsTx;         /*    48     4 */
	uint32_t                   markerResponsePDUsTx; /*    52     4 */

	/* size: 56, cachelines: 1, members: 14 */
	/* last cacheline: 56 bytes */
};
struct _SFLAPPResources_counters {
	uint32_t                   user_time;            /*     0     4 */
	uint32_t                   system_time;          /*     4     4 */
	uint64_t                   mem_used;             /*     8     8 */
	uint64_t                   mem_max;              /*    16     8 */
	uint32_t                   fd_open;              /*    24     4 */
	uint32_t                   fd_max;               /*    28     4 */
	uint32_t                   conn_open;            /*    32     4 */
	uint32_t                   conn_max;             /*    36     4 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct _SFLOVSDP_counters {
	uint32_t                   n_hit;                /*     0     4 */
	uint32_t                   n_missed;             /*     4     4 */
	uint32_t                   n_lost;               /*     8     4 */
	uint32_t                   n_mask_hit;           /*    12     4 */
	uint32_t                   n_flows;              /*    16     4 */
	uint32_t                   n_masks;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct _SFLCounters_sample_element {
	struct _SFLCounters_sample_element * nxt;        /*     0     8 */
	u_int32_t                  tag;                  /*     8     4 */
	u_int32_t                  length;               /*    12     4 */
	SFLCounters_type           counterBlock;         /*    16    96 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 4 */
	/* last cacheline: 48 bytes */
};
struct _SFLCounters_sample {
	u_int32_t                  sequence_number;      /*     0     4 */
	u_int32_t                  source_id;            /*     4     4 */
	u_int32_t                  num_elements;         /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLCounters_sample_element * elements;           /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLDataSource_instance {
	u_int32_t                  ds_class;             /*     0     4 */
	u_int32_t                  ds_index;             /*     4     4 */
	u_int32_t                  ds_instance;          /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct _SFLSampleCollector {
	u_int32_t                  data[475];            /*     0  1900 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 29 boundary (1856 bytes) was 48 bytes ago --- */
	u_int32_t *                datap;                /*  1904     8 */
	u_int32_t                  pktlen;               /*  1912     4 */
	u_int32_t                  packetSeqNo;          /*  1916     4 */
	/* --- cacheline 30 boundary (1920 bytes) --- */
	u_int32_t                  numSamples;           /*  1920     4 */

	/* size: 1928, cachelines: 31, members: 5 */
	/* sum members: 1920, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct _SFLReceiver {
	struct _SFLReceiver *      nxt;                  /*     0     8 */
	char *                     sFlowRcvrOwner;       /*     8     8 */
	time_t                     sFlowRcvrTimeout;     /*    16     8 */
	u_int32_t                  sFlowRcvrMaximumDatagramSize; /*    24     4 */
	SFLAddress                 sFlowRcvrAddress;     /*    28    20 */
	u_int32_t                  sFlowRcvrPort;        /*    48     4 */
	u_int32_t                  sFlowRcvrDatagramVersion; /*    52     4 */
	struct _SFLAgent *         agent;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	SFLSampleCollector         sampleCollector;      /*    64  1928 */
	/* --- cacheline 31 boundary (1984 bytes) was 8 bytes ago --- */

	/* size: 1992, cachelines: 32, members: 9 */
	/* last cacheline: 8 bytes */
};
struct _SFLAgent {
	SFLSampler *               jumpTable[199];       /*     0  1592 */
	/* --- cacheline 24 boundary (1536 bytes) was 56 bytes ago --- */
	SFLSampler *               samplers;             /*  1592     8 */
	/* --- cacheline 25 boundary (1600 bytes) --- */
	SFLPoller *                pollers;              /*  1600     8 */
	SFLReceiver *              receivers;            /*  1608     8 */
	time_t                     bootTime;             /*  1616     8 */
	time_t                     now;                  /*  1624     8 */
	SFLAddress                 myIP;                 /*  1632    20 */
	u_int32_t                  subId;                /*  1652     4 */
	void *                     magic;                /*  1656     8 */
	/* --- cacheline 26 boundary (1664 bytes) --- */
	allocFn_t                  allocFn;              /*  1664     8 */
	freeFn_t                   freeFn;               /*  1672     8 */
	errorFn_t                  errorFn;              /*  1680     8 */
	sendFn_t                   sendFn;               /*  1688     8 */

	/* size: 1696, cachelines: 27, members: 13 */
	/* last cacheline: 32 bytes */
};
struct _SFLSampler {
	struct _SFLSampler *       nxt;                  /*     0     8 */
	struct _SFLSampler *       hash_nxt;             /*     8     8 */
	SFLDataSource_instance     dsi;                  /*    16    12 */
	u_int32_t                  sFlowFsReceiver;      /*    28     4 */
	u_int32_t                  sFlowFsPacketSamplingRate; /*    32     4 */
	u_int32_t                  sFlowFsMaximumHeaderSize; /*    36     4 */
	struct _SFLAgent *         agent;                /*    40     8 */
	SFLReceiver *              myReceiver;           /*    48     8 */
	u_int32_t                  skip;                 /*    56     4 */
	u_int32_t                  samplePool;           /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  flowSampleSeqNo;      /*    64     4 */
	u_int32_t                  samplesThisTick;      /*    68     4 */
	u_int32_t                  samplesLastTick;      /*    72     4 */
	u_int32_t                  backoffThreshold;     /*    76     4 */

	/* size: 80, cachelines: 2, members: 14 */
	/* last cacheline: 16 bytes */
};
struct _SFLPoller {
	struct _SFLPoller *        nxt;                  /*     0     8 */
	SFLDataSource_instance     dsi;                  /*     8    12 */
	u_int32_t                  sFlowCpReceiver;      /*    20     4 */
	time_t                     sFlowCpInterval;      /*    24     8 */
	struct _SFLAgent *         agent;                /*    32     8 */
	void *                     magic;                /*    40     8 */
	getCountersFn_t            getCountersFn;        /*    48     8 */
	u_int32_t                  bridgePort;           /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	SFLReceiver *              myReceiver;           /*    64     8 */
	time_t                     countersCountdown;    /*    72     8 */
	u_int32_t                  countersSampleSeqNo;  /*    80     4 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 80, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct dpif_sflow_port {
	struct hmap_node           hmap_node;            /*     0    16 */
	SFLDataSource_instance     dsi;                  /*    16    12 */

	/* XXX 4 bytes hole, try to pack */

	struct ofport *            ofport;               /*    32     8 */
	odp_port_t                 odp_port;             /*    40     4 */
	enum dpif_sflow_tunnel_type tunnel_type;         /*    44     4 */

	/* size: 48, cachelines: 1, members: 5 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct dpif_sflow {
	struct collectors *        collectors;           /*     0     8 */
	SFLAgent *                 sflow_agent;          /*     8     8 */
	struct ofproto_sflow_options * options;          /*    16     8 */
	time_t                     next_tick;            /*    24     8 */
	size_t                     n_flood;              /*    32     8 */
	size_t                     n_all;                /*    40     8 */
	struct hmap                ports;                /*    48    32 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	uint32_t                   probability;          /*    80     4 */
	struct ovs_refcount        ref_cnt;              /*    84     4 */

	/* size: 88, cachelines: 2, members: 9 */
	/* last cacheline: 24 bytes */
};
struct timespec {
	__time_t                   tv_sec;               /*     0     8 */
	__syscall_slong_t          tv_nsec;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct netflow_v5_header {
	ovs_be16                   version;              /*     0     2 */
	ovs_be16                   count;                /*     2     2 */
	ovs_be32                   sysuptime;            /*     4     4 */
	ovs_be32                   unix_secs;            /*     8     4 */
	ovs_be32                   unix_nsecs;           /*    12     4 */
	ovs_be32                   flow_seq;             /*    16     4 */
	uint8_t                    engine_type;          /*    20     1 */
	uint8_t                    engine_id;            /*    21     1 */
	ovs_be16                   sampling_interval;    /*    22     2 */

	/* size: 24, cachelines: 1, members: 9 */
	/* last cacheline: 24 bytes */
};
struct netflow_v5_record {
	ovs_be32                   src_addr;             /*     0     4 */
	ovs_be32                   dst_addr;             /*     4     4 */
	ovs_be32                   nexthop;              /*     8     4 */
	ovs_be16                   input;                /*    12     2 */
	ovs_be16                   output;               /*    14     2 */
	ovs_be32                   packet_count;         /*    16     4 */
	ovs_be32                   byte_count;           /*    20     4 */
	ovs_be32                   init_time;            /*    24     4 */
	ovs_be32                   used_time;            /*    28     4 */
	ovs_be16                   src_port;             /*    32     2 */
	ovs_be16                   dst_port;             /*    34     2 */
	uint8_t                    pad1;                 /*    36     1 */
	uint8_t                    tcp_flags;            /*    37     1 */
	uint8_t                    ip_proto;             /*    38     1 */
	uint8_t                    ip_tos;               /*    39     1 */
	ovs_be16                   src_as;               /*    40     2 */
	ovs_be16                   dst_as;               /*    42     2 */
	uint8_t                    src_mask;             /*    44     1 */
	uint8_t                    dst_mask;             /*    45     1 */
	uint8_t                    pad[2];               /*    46     2 */

	/* size: 48, cachelines: 1, members: 20 */
	/* last cacheline: 48 bytes */
};
struct netflow {
	uint8_t                    engine_type;          /*     0     1 */
	uint8_t                    engine_id;            /*     1     1 */

	/* XXX 6 bytes hole, try to pack */

	long long int              boot_time;            /*     8     8 */
	struct collectors *        collectors;           /*    16     8 */
	_Bool                      add_id_to_iface;      /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   netflow_cnt;          /*    28     4 */
	struct ofpbuf              packet;               /*    32    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	long long int              active_timeout;       /*    96     8 */
	long long int              next_timeout;         /*   104     8 */
	long long int              reconfig_time;        /*   112     8 */
	struct hmap                flows;                /*   120    32 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	struct ovs_refcount        ref_cnt;              /*   152     4 */

	/* size: 160, cachelines: 3, members: 12 */
	/* sum members: 147, holes: 2, sum holes: 9 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 32 bytes */
};
struct netflow_flow {
	struct hmap_node           hmap_node;            /*     0    16 */
	long long int              last_expired;         /*    16     8 */
	long long int              created;              /*    24     8 */
	ofp_port_t                 output_iface;         /*    32     4 */
	uint16_t                   tcp_flags;            /*    36     2 */

	/* XXX 2 bytes hole, try to pack */

	ofp_port_t                 in_port;              /*    40     4 */
	ovs_be32                   nw_src;               /*    44     4 */
	ovs_be32                   nw_dst;               /*    48     4 */
	uint8_t                    nw_tos;               /*    52     1 */
	uint8_t                    nw_proto;             /*    53     1 */
	ovs_be16                   tp_src;               /*    54     2 */
	ovs_be16                   tp_dst;               /*    56     2 */

	/* XXX 6 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   packet_count;         /*    64     8 */
	uint64_t                   byte_count;           /*    72     8 */
	long long int              used;                 /*    80     8 */

	/* size: 88, cachelines: 2, members: 15 */
	/* sum members: 80, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct frozen_metadata {
	struct flow_tnl            tunnel;               /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	ovs_be64                   metadata;             /*   344     8 */
	uint64_t                   regs[8];              /*   352    64 */
	/* --- cacheline 6 boundary (384 bytes) was 32 bytes ago --- */
	ofp_port_t                 in_port;              /*   416     4 */

	/* size: 424, cachelines: 7, members: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct frozen_state {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	struct uuid                ofproto_uuid;         /*     4    16 */

	/* XXX 4 bytes hole, try to pack */

	struct frozen_metadata     metadata;             /*    24   424 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 7 boundary (448 bytes) --- */
	uint8_t *                  stack;                /*   448     8 */
	size_t                     stack_size;           /*   456     8 */
	mirror_mask_t              mirrors;              /*   464     4 */
	_Bool                      conntracked;          /*   468     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ofpact *            ofpacts;              /*   472     8 */
	size_t                     ofpacts_len;          /*   480     8 */
	struct ofpact *            action_set;           /*   488     8 */
	size_t                     action_set_len;       /*   496     8 */

	/* size: 504, cachelines: 8, members: 11 */
	/* sum members: 494, holes: 3, sum holes: 10 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 56 bytes */
};
struct recirc_id_node {
	struct ovs_list            exp_node;             /*     0    16 */
	struct cmap_node           id_node;              /*    16     8 */
	struct cmap_node           metadata_node;        /*    24     8 */
	uint32_t                   id;                   /*    32     4 */
	uint32_t                   hash;                 /*    36     4 */
	struct ovs_refcount        refcount;             /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct frozen_stateconst   state;                /*    48   504 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */

	/* size: 552, cachelines: 9, members: 7 */
	/* sum members: 548, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct pinqueue {
	struct hmap_node           node;                 /*     0    16 */
	ofp_port_t                 port_no;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            packets;              /*    24    16 */
	int                        n;                    /*    40     4 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 40, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct pinsched {
	struct token_bucket        token_bucket;         /*     0    24 */
	struct hmap                queues;               /*    24    32 */
	unsigned int               n_queued;             /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct pinqueue *          next_txq;             /*    64     8 */
	long long unsigned int     n_normal;             /*    72     8 */
	long long unsigned int     n_limited;            /*    80     8 */
	long long unsigned int     n_queue_dropped;      /*    88     8 */

	/* size: 96, cachelines: 2, members: 7 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct nsh_md2_tlv {
	ovs_be16                   md_class;             /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    length;               /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ovs_action_trunc {
	uint32_t                   max_len;              /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_action_hash {
	uint32_t                   hash_alg;             /*     0     4 */
	uint32_t                   hash_basis;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct igmp_header {
	uint8_t                    igmp_type;            /*     0     1 */
	uint8_t                    igmp_code;            /*     1     1 */
	ovs_be16                   igmp_csum;            /*     2     2 */
	ovs_16aligned_be32         group;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct mld_header {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    code;                 /*     1     1 */
	ovs_be16                   csum;                 /*     2     2 */
	ovs_be16                   mrd;                  /*     4     2 */
	ovs_be16                   ngrp;                 /*     6     2 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct dp_packet_batch {
	size_t                     count;                /*     0     8 */
	_Bool                      trunc;                /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	struct dp_packet *         packets[32];          /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 3 */
	/* sum members: 265, holes: 1, sum holes: 7 */
	/* last cacheline: 16 bytes */
};
struct ofpact_ed_prop {
	uint16_t                   prop_class;           /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    len;                  /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofpact_ed_prop_nsh_md_type {
	struct ofpact_ed_prop      header;               /*     0     4 */
	uint8_t                    md_type;              /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_ed_prop_nsh_tlv {
	struct ofpact_ed_prop      header;               /*     0     4 */
	ovs_be16                   tlv_class;            /*     4     2 */
	uint8_t                    tlv_type;             /*     6     1 */
	uint8_t                    tlv_len;              /*     7     1 */
	uint8_t                    data[0];              /*     8     0 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct ofpact_controller {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   max_len;              /*     4     2 */
			uint16_t   controller_id;        /*     6     2 */
			enum ofp_packet_in_reason reason; /*     8     4 */
			_Bool      pause;                /*    12     1 */
			uint16_t   userdata_len;         /*    14     2 */
		};                                       /*          16 */
		uint8_t            pad3[16];             /*          16 */
	};                                               /*     0    16 */
	uint8_t                    userdata[0];          /*    16     0 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofpact_enqueue {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint32_t                   queue;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_output_reg {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   max_len;              /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct mf_subfield         src;                  /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 22, holes: 1, sum holes: 2 */
	/* last cacheline: 24 bytes */
};
struct ofpact_output_trunc {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint32_t                   max_len;              /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_bundle {
	struct ofpact              ofpact;               /*     0     4 */
	enum nx_bd_algorithm       algorithm;            /*     4     4 */
	enum nx_hash_fields        fields;               /*     8     4 */
	uint16_t                   basis;                /*    12     2 */

	/* XXX 2 bytes hole, try to pack */

	struct mf_subfield         dst;                  /*    16    16 */
	unsigned int               n_slaves;             /*    32     4 */
	ofp_port_t                 slaves[0];            /*    36     0 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 34, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_vlan_vid {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   vlan_vid;             /*     4     2 */
	_Bool                      push_vlan_if_needed;  /*     6     1 */
	_Bool                      flow_has_vlan;        /*     7     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofpact_vlan_pcp {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    vlan_pcp;             /*     4     1 */
	_Bool                      push_vlan_if_needed;  /*     5     1 */
	_Bool                      flow_has_vlan;        /*     6     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* padding: 1 */
	/* last cacheline: 8 bytes */
};
struct ofpact_push_vlan {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_mac {
	struct ofpact              ofpact;               /*     0     4 */
	struct eth_addr            mac;                  /*     4     6 */

	/* size: 10, cachelines: 1, members: 2 */
	/* last cacheline: 10 bytes */
};
struct ofpact_ipv4 {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   ipv4;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_dscp {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    dscp;                 /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_ecn {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ecn;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_ip_ttl {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ttl;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_l4_port {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   port;                 /*     4     2 */
	uint8_t                    flow_ip_proto;        /*     6     1 */

	/* size: 8, cachelines: 1, members: 3 */
	/* padding: 1 */
	/* last cacheline: 8 bytes */
};
struct ofpact_reg_move {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct mf_subfield         src;                  /*     8    16 */
	struct mf_subfield         dst;                  /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_stack {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct mf_subfield         subfield;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofpact_set_field {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			_Bool      flow_has_vlan;        /*     4     1 */
			const struct mf_field  * field;  /*     8     8 */
		};                                       /*          16 */
		uint8_t            pad4[16];             /*          16 */
	};                                               /*     0    16 */
	union mf_value             value[0];             /*    16     0 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofpact_push_mpls {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_pop_mpls {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_tunnel {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   tun_id;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ofpact_fin_timeout {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   fin_idle_timeout;     /*     4     2 */
	uint16_t                   fin_hard_timeout;     /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_metadata {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   metadata;             /*     8     8 */
	ovs_be64                   mask;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofpact_nest {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
		};                                       /*           4 */
		uint8_t            pad5[8];              /*           8 */
	};                                               /*     0     8 */
	struct ofpact              actions[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_conntrack {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   flags;                /*     4     2 */
			uint16_t   zone_imm;             /*     6     2 */
			struct mf_subfield zone_src;     /*     8    16 */
			uint16_t   alg;                  /*    24     2 */
			uint8_t    recirc_table;         /*    26     1 */
		};                                       /*          32 */
		uint8_t            pad6[32];             /*          32 */
	};                                               /*     0    32 */
	struct ofpact              actions[0];           /*    32     0 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct ofpact_nat {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    range_af;             /*     4     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   flags;                /*     6     2 */
	struct {
		struct {
			uint16_t   min;                  /*     8     2 */
			uint16_t   max;                  /*    10     2 */
		} proto;                                 /*     8     4 */
		union {
			struct {
				ovs_be32 min;            /*    12     4 */
				ovs_be32 max;            /*    16     4 */
			} ipv4;                          /*           8 */
			struct {
				struct in6_addr min;     /*    12    16 */
				struct in6_addr max;     /*    28    16 */
			} ipv6;                          /*          32 */
		} addr;                                  /*    12    32 */
	} range;                                         /*     8    36 */

	/* size: 44, cachelines: 1, members: 4 */
	/* sum members: 43, holes: 1, sum holes: 1 */
	/* last cacheline: 44 bytes */
};
struct ofpact_resubmit {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 in_port;              /*     4     4 */
	uint8_t                    table_id;             /*     8     1 */
	_Bool                      with_ct_orig;         /*     9     1 */

	/* size: 12, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofpact_multipath {
	struct ofpact              ofpact;               /*     0     4 */
	enum nx_hash_fields        fields;               /*     4     4 */
	uint16_t                   basis;                /*     8     2 */

	/* XXX 2 bytes hole, try to pack */

	enum nx_mp_algorithm       algorithm;            /*    12     4 */
	uint16_t                   max_link;             /*    16     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   arg;                  /*    20     4 */
	struct mf_subfield         dst;                  /*    24    16 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 36, holes: 2, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_note {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     length;               /*     8     8 */
	uint8_t                    data[0];              /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ofpact_sample {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   probability;          /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   collector_set_id;     /*     8     4 */
	uint32_t                   obs_domain_id;        /*    12     4 */
	uint32_t                   obs_point_id;         /*    16     4 */
	ofp_port_t                 sampling_port;        /*    20     4 */
	enum nx_action_sample_direction direction;       /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct ofpact_cnt_ids {
	struct ofpact              ofpact;               /*     0     4 */
	unsigned int               n_controllers;        /*     4     4 */
	uint16_t                   cnt_ids[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_mpls_label {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   label;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_mpls_tc {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    tc;                   /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_mpls_ttl {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ttl;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_goto_table {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    table_id;             /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_unroll_xlate {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    rule_table_id;        /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	ovs_be64                   rule_cookie;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct ofpact_encap {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   new_pkt_type;         /*     4     4 */
	uint16_t                   hdr_size;             /*     8     2 */
	uint16_t                   n_props;              /*    10     2 */
	struct ofpact_ed_prop      props[0];             /*    12     0 */

	/* size: 12, cachelines: 1, members: 5 */
	/* last cacheline: 12 bytes */
};
struct ofpact_decap {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   new_pkt_type;         /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct recirc_refs {
	unsigned int               n_recircs;            /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		uint32_t           recirc[2];            /*           8 */
		uint32_t *         recircs;              /*           8 */
	};                                               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct aa_settings {
	char *                     system_description;   /*     0     8 */
	char *                     system_name;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct aa_mapping_settings {
	uint32_t                   isid;                 /*     0     4 */
	uint16_t                   vlan;                 /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct group_dpif {
	struct ofgroup             up;                   /*     0   224 */
	/* --- cacheline 3 boundary (192 bytes) was 32 bytes ago --- */
	struct ovs_mutex           stats_mutex;          /*   224    48 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	uint64_t                   packet_count;         /*   272     8 */
	uint64_t                   byte_count;           /*   280     8 */

	/* size: 288, cachelines: 5, members: 4 */
	/* last cacheline: 32 bytes */
};
struct mac_learning {
	struct hmap                table;                /*     0    32 */
	struct ovs_list            lrus;                 /*    32    16 */
	uint32_t                   secret;               /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int *        flood_vlans;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               idle_time;            /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     max_entries;          /*    72     8 */
	struct ovs_refcount        ref_cnt;              /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_rwlock          rwlock;               /*    88    64 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	_Bool                      need_revalidate;      /*   152     1 */

	/* XXX 7 bytes hole, try to pack */

	struct hmap                ports_by_ptr;         /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct heap                ports_by_usage;       /*   192    24 */

	/* size: 216, cachelines: 4, members: 11 */
	/* sum members: 197, holes: 4, sum holes: 19 */
	/* last cacheline: 24 bytes */
};
struct mcast_snooping {
	struct hmap                table;                /*     0    32 */
	struct ovs_list            group_lru;            /*    32    16 */
	struct ovs_list            mrouter_lru;          /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            fport_list;           /*    64    16 */
	struct ovs_list            rport_list;           /*    80    16 */
	uint32_t                   secret;               /*    96     4 */
	unsigned int               idle_time;            /*   100     4 */
	size_t                     max_entries;          /*   104     8 */
	_Bool                      need_revalidate;      /*   112     1 */
	_Bool                      flood_unreg;          /*   113     1 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_refcount        ref_cnt;              /*   116     4 */
	struct ovs_rwlock          rwlock;               /*   120    64 */
	/* --- cacheline 2 boundary (128 bytes) was 56 bytes ago --- */

	/* size: 184, cachelines: 3, members: 12 */
	/* sum members: 182, holes: 1, sum holes: 2 */
	/* last cacheline: 56 bytes */
};
struct xlate_out {
	enum slow_path_reason      slow;                 /*     0     4 */
	_Bool                      avoid_caching;        /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	struct recirc_refs         recircs;              /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct xlate_in {
	struct ofproto_dpif *      ofproto;              /*     0     8 */
	ovs_version_t              tables_version;       /*     8     8 */
	struct flow                flow;                 /*    16   672 */
	/* --- cacheline 10 boundary (640 bytes) was 48 bytes ago --- */
	const struct flow  *       upcall_flow;          /*   688     8 */
	const struct dp_packet  *  packet;               /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	_Bool                      allow_side_effects;   /*   704     1 */

	/* XXX 7 bytes hole, try to pack */

	struct rule_dpif *         rule;                 /*   712     8 */
	const struct ofpact  *     ofpacts;              /*   720     8 */
	size_t                     ofpacts_len;          /*   728     8 */
	uint16_t                   tcp_flags;            /*   736     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ovs_list *          trace;                /*   744     8 */
	const struct dpif_flow_stats  * resubmit_stats;  /*   752     8 */
	int                        depth;                /*   760     4 */
	int                        resubmits;            /*   764     4 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	struct xlate_cache *       xcache;               /*   768     8 */
	struct ofpbuf *            odp_actions;          /*   776     8 */
	struct flow_wildcards *    wc;                   /*   784     8 */
	const struct frozen_state  * frozen_state;       /*   792     8 */
	_Bool                      in_packet_out;        /*   800     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_list *          recirc_queue;         /*   808     8 */

	/* size: 816, cachelines: 13, members: 20 */
	/* sum members: 796, holes: 3, sum holes: 20 */
	/* last cacheline: 48 bytes */
};
struct xlate_cache {
	struct ofpbuf              entries;              /*     0    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
	/* paddings: 1, sum paddings: 7 */
};
struct mac_entry {
	struct hmap_node           hmap_node;            /*     0    16 */
	time_t                     expires;              /*    16     8 */
	time_t                     grat_arp_lock;        /*    24     8 */
	struct eth_addr            mac;                  /*    32     6 */
	uint16_t                   vlan;                 /*    38     2 */
	struct ovs_list            lru_node;             /*    40    16 */
	struct mac_learning_port * mlport;               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            port_lru_node;        /*    64    16 */

	/* size: 80, cachelines: 2, members: 8 */
	/* last cacheline: 16 bytes */
};
struct mac_learning_port {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct heap_node           heap_node;            /*    16    16 */
	void *                     port;                 /*    32     8 */
	struct ovs_list            port_lrus;            /*    40    16 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct mcast_group {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct in6_addr            addr;                 /*    16    16 */
	uint16_t                   vlan;                 /*    32     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ovs_list            group_node;           /*    40    16 */
	struct ovs_list            bundle_lru;           /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 5 */
	/* sum members: 66, holes: 1, sum holes: 6 */
	/* last cacheline: 8 bytes */
};
struct mcast_group_bundle {
	struct ovs_list            bundle_node;          /*     0    16 */
	time_t                     expires;              /*    16     8 */
	void *                     port;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct mcast_mrouter_bundle {
	struct ovs_list            mrouter_node;         /*     0    16 */
	time_t                     expires;              /*    16     8 */
	uint16_t                   vlan;                 /*    24     2 */

	/* XXX 6 bytes hole, try to pack */

	void *                     port;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 34, holes: 1, sum holes: 6 */
	/* last cacheline: 40 bytes */
};
struct mcast_port_bundle {
	struct ovs_list            node;                 /*     0    16 */
	uint16_t                   vlan;                 /*    16     2 */

	/* XXX 6 bytes hole, try to pack */

	void *                     port;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 26, holes: 1, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct xc_entry {
	enum xc_type               type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		struct {
			struct ofproto_dpif * ofproto;   /*     8     8 */
			uint8_t    id;                   /*    16     1 */
			_Bool      match;                /*    17     1 */
		} table;                                 /*          16 */
		struct rule_dpif * rule;                 /*           8 */
		struct {
			struct netdev * tx;              /*     8     8 */
			struct netdev * rx;              /*    16     8 */
			struct bfd * bfd;                /*    24     8 */
		} dev;                                   /*          24 */
		struct {
			struct netflow * netflow;        /*     8     8 */
			struct flow * flow;              /*    16     8 */
			ofp_port_t iface;                /*    24     4 */
		} nf;                                    /*          24 */
		struct {
			struct mbridge * mbridge;        /*     8     8 */
			mirror_mask_t mirrors;           /*    16     4 */
		} mirror;                                /*          16 */
		struct {
			struct bond * bond;              /*     8     8 */
			struct flow * flow;              /*    16     8 */
			uint16_t   vid;                  /*    24     2 */
		} bond;                                  /*          24 */
		struct {
			struct ofproto_flow_mod * ofm;   /*     8     8 */
			unsigned int limit;              /*    16     4 */
		} learn;                                 /*          16 */
		struct {
			struct ofproto_dpif * ofproto;   /*     8     8 */
			ofp_port_t in_port;              /*    16     4 */
			struct eth_addr dl_src;          /*    20     6 */
			int        vlan;                 /*    28     4 */
			_Bool      is_gratuitous_arp;    /*    32     1 */
		} normal;                                /*          32 */
		struct {
			struct rule_dpif * rule;         /*     8     8 */
			uint16_t   idle;                 /*    16     2 */
			uint16_t   hard;                 /*    18     2 */
		} fin;                                   /*          16 */
		struct {
			struct group_dpif * group;       /*     8     8 */
			struct ofputil_bucket * bucket;  /*    16     8 */
		} group;                                 /*          16 */
		struct {
			char       br_name[16];          /*     8    16 */
			struct in6_addr d_ipv6;          /*    24    16 */
		} tnl_neigh_cache;                       /*          32 */
		struct {
			struct ofproto_dpif * ofproto;   /*     8     8 */
			struct ofproto_async_msg * am;   /*    16     8 */
		} controller;                            /*          16 */
		struct {
			enum {
				ADD = 0,
				REMOVE = 1,
			} operation;                     /*     8     4 */
			uint16_t   hdr_size;             /*    12     2 */
		} tunnel_hdr;                            /*           8 */
	};                                               /*     8    32 */

	/* size: 40, cachelines: 1, members: 2 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct xbridge {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofproto_dpif *      ofproto;              /*    16     8 */
	struct ovs_list            xbundles;             /*    24    16 */
	struct hmap                xports;               /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	char *                     name;                 /*    72     8 */
	struct dpif *              dpif;                 /*    80     8 */
	struct mac_learning *      ml;                   /*    88     8 */
	struct mcast_snooping *    ms;                   /*    96     8 */
	struct mbridge *           mbridge;              /*   104     8 */
	struct dpif_sflow *        sflow;                /*   112     8 */
	struct dpif_ipfix *        ipfix;                /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct netflow *           netflow;              /*   128     8 */
	struct stp *               stp;                  /*   136     8 */
	struct rstp *              rstp;                 /*   144     8 */
	_Bool                      has_in_band;          /*   152     1 */
	_Bool                      forward_bpdu;         /*   153     1 */

	/* XXX 6 bytes hole, try to pack */

	struct dpif_backer_support support;              /*   160    48 */
	/* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */

	/* size: 208, cachelines: 4, members: 17 */
	/* sum members: 202, holes: 1, sum holes: 6 */
	/* last cacheline: 16 bytes */
};
struct xbundle {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofbundle *          ofbundle;             /*    16     8 */
	struct ovs_list            list_node;            /*    24    16 */
	struct xbridge *           xbridge;              /*    40     8 */
	struct ovs_list            xports;               /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     name;                 /*    64     8 */
	struct bond *              bond;                 /*    72     8 */
	struct lacp *              lacp;                 /*    80     8 */
	enum port_vlan_mode        vlan_mode;            /*    88     4 */
	uint16_t                   qinq_ethtype;         /*    92     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        vlan;                 /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int *        trunks;               /*   104     8 */
	long unsigned int *        cvlans;               /*   112     8 */
	_Bool                      use_priority_tags;    /*   120     1 */
	_Bool                      floodable;            /*   121     1 */
	_Bool                      protected;            /*   122     1 */

	/* size: 128, cachelines: 2, members: 16 */
	/* sum members: 117, holes: 2, sum holes: 6 */
	/* padding: 5 */
};
struct xport {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofport_dpif *       ofport;               /*    16     8 */
	struct hmap_node           ofp_node;             /*    24    16 */
	ofp_port_t                 ofp_port;             /*    40     4 */
	odp_port_t                 odp_port;             /*    44     4 */
	struct ovs_list            bundle_node;          /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct xbundle *           xbundle;              /*    64     8 */
	struct netdev *            netdev;               /*    72     8 */
	struct xbridge *           xbridge;              /*    80     8 */
	struct xport *             peer;                 /*    88     8 */
	enum ofputil_port_config   config;               /*    96     4 */
	enum ofputil_port_state    state;                /*   100     4 */
	int                        stp_port_no;          /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	struct rstp_port *         rstp_port;            /*   112     8 */
	struct hmap                skb_priorities;       /*   120    32 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	_Bool                      may_enable;           /*   152     1 */
	_Bool                      is_tunnel;            /*   153     1 */

	/* XXX 2 bytes hole, try to pack */

	enum netdev_pt_mode        pt_mode;              /*   156     4 */
	struct cfm *               cfm;                  /*   160     8 */
	struct bfd *               bfd;                  /*   168     8 */
	struct lldp *              lldp;                 /*   176     8 */

	/* size: 184, cachelines: 3, members: 21 */
	/* sum members: 178, holes: 2, sum holes: 6 */
	/* last cacheline: 56 bytes */
};
struct xlate_ctx {
	struct xlate_in *          xin;                  /*     0     8 */
	struct xlate_out *         xout;                 /*     8     8 */
	const struct xbridge  *    xbridge;              /*    16     8 */
	struct flow                base_flow;            /*    24   672 */
	/* --- cacheline 10 boundary (640 bytes) was 56 bytes ago --- */
	struct in6_addr            orig_tunnel_ipv6_dst; /*   696    16 */
	/* --- cacheline 11 boundary (704 bytes) was 8 bytes ago --- */
	struct ofpbuf              stack;                /*   712    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 12 boundary (768 bytes) was 8 bytes ago --- */
	struct rule_dpif *         rule;                 /*   776     8 */
	struct flow_wildcards *    wc;                   /*   784     8 */
	struct ofpbuf *            odp_actions;          /*   792     8 */
	int                        depth;                /*   800     4 */
	int                        resubmits;            /*   804     4 */
	_Bool                      in_group;             /*   808     1 */
	_Bool                      in_action_set;        /*   809     1 */
	_Bool                      in_packet_out;        /*   810     1 */
	_Bool                      pending_encap;        /*   811     1 */

	/* XXX 4 bytes hole, try to pack */

	struct ofpbuf *            encap_data;           /*   816     8 */
	uint8_t                    table_id;             /*   824     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 13 boundary (832 bytes) --- */
	ovs_be64                   rule_cookie;          /*   832     8 */
	uint32_t                   orig_skb_priority;    /*   840     4 */
	uint32_t                   sflow_n_outputs;      /*   844     4 */
	odp_port_t                 sflow_odp_port;       /*   848     4 */
	ofp_port_t                 nf_output_iface;      /*   852     4 */
	_Bool                      exit;                 /*   856     1 */

	/* XXX 3 bytes hole, try to pack */

	mirror_mask_t              mirrors;              /*   860     4 */
	int                        mirror_snaplen;       /*   864     4 */
	_Bool                      freezing;             /*   868     1 */
	_Bool                      recirc_update_dp_hash; /*   869     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   dp_hash_alg;          /*   872     4 */
	uint32_t                   dp_hash_basis;        /*   876     4 */
	struct ofpbuf              frozen_actions;       /*   880    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 14 boundary (896 bytes) was 48 bytes ago --- */
	const struct ofpact_controller  * pause;         /*   944     8 */
	struct flow *              paused_flow;          /*   952     8 */
	/* --- cacheline 15 boundary (960 bytes) --- */
	_Bool                      was_mpls;             /*   960     1 */
	_Bool                      conntracked;          /*   961     1 */

	/* XXX 6 bytes hole, try to pack */

	struct ofpact_nat *        ct_nat_action;        /*   968     8 */
	_Bool                      action_set_has_group; /*   976     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ofpbuf              action_set;           /*   984    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 16 boundary (1024 bytes) was 24 bytes ago --- */
	enum xlate_error           error;                /*  1048     4 */

	/* size: 1056, cachelines: 17, members: 38 */
	/* sum members: 1023, holes: 6, sum holes: 29 */
	/* padding: 4 */
	/* paddings: 3, sum paddings: 21 */
	/* last cacheline: 32 bytes */
};
struct xvlan_single {
	uint16_t                   tpid;                 /*     0     2 */
	uint16_t                   vid;                  /*     2     2 */
	uint16_t                   pcp;                  /*     4     2 */

	/* size: 6, cachelines: 1, members: 3 */
	/* last cacheline: 6 bytes */
};
struct xvlan {
	struct xvlan_single        v[2];                 /*     0    12 */

	/* size: 12, cachelines: 1, members: 1 */
	/* last cacheline: 12 bytes */
};
struct skb_priority_to_dscp {
	struct hmap_node           hmap_node;            /*     0    16 */
	uint32_t                   skb_priority;         /*    16     4 */
	uint8_t                    dscp;                 /*    20     1 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 3 */
	/* last cacheline: 24 bytes */
};
struct xlate_cfg {
	struct hmap                xbridges;             /*     0    32 */
	struct hmap                xbundles;             /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct hmap                xports;               /*    64    32 */

	/* size: 96, cachelines: 2, members: 3 */
	/* last cacheline: 32 bytes */
};
struct xlate_bond_recirc {
	uint32_t                   recirc_id;            /*     0     4 */
	uint8_t                    hash_alg;             /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   hash_basis;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* sum members: 9, holes: 1, sum holes: 3 */
	/* last cacheline: 12 bytes */
};
struct fail_open {
	struct ofproto *           ofproto;              /*     0     8 */
	struct connmgr *           connmgr;              /*     8     8 */
	int                        last_disconn_secs;    /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              next_bogus_packet_in; /*    24     8 */
	struct rconn_packet_counter * bogus_packet_counter; /*    32     8 */
	_Bool                      fail_open_active;     /*    40     1 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 37, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct hmapx {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct mbridge {
	struct mirror *            mirrors[32];          /*     0   256 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct cmap                mbundles;             /*   256     8 */
	_Bool                      need_revalidate;      /*   264     1 */
	_Bool                      has_mirrors;          /*   265     1 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_refcount        ref_cnt;              /*   268     4 */

	/* size: 272, cachelines: 5, members: 5 */
	/* sum members: 270, holes: 1, sum holes: 2 */
	/* last cacheline: 16 bytes */
};
struct mirror {
	struct mbridge *           mbridge;              /*     0     8 */
	size_t                     idx;                  /*     8     8 */
	void *                     aux;                  /*    16     8 */
	struct hmapx               srcs;                 /*    24    32 */
	struct hmapx               dsts;                 /*    56    32 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	struct {
		long unsigned int * p;                   /*    88     8 */
	} vlans;                                         /*    88     8 */
	struct mbundle *           out;                  /*    96     8 */
	int                        out_vlan;             /*   104     4 */
	uint16_t                   snaplen;              /*   108     2 */

	/* XXX 2 bytes hole, try to pack */

	mirror_mask_t              dup_mirrors;          /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	int64_t                    packet_count;         /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int64_t                    byte_count;           /*   128     8 */

	/* size: 136, cachelines: 3, members: 12 */
	/* sum members: 130, holes: 2, sum holes: 6 */
	/* last cacheline: 8 bytes */
};
struct mbundle {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct ofbundle *          ofbundle;             /*     8     8 */
	mirror_mask_t              src_mirrors;          /*    16     4 */
	mirror_mask_t              dst_mirrors;          /*    20     4 */
	mirror_mask_t              mirror_out;           /*    24     4 */

	/* size: 32, cachelines: 1, members: 5 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct oftrace_node {
	struct ovs_list            node;                 /*     0    16 */
	struct ovs_list            subs;                 /*    16    16 */
	enum oftrace_node_type     type;                 /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     text;                 /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct oftrace_recirc_node {
	struct ovs_list            node;                 /*     0    16 */
	enum oftrace_recirc_type   type;                 /*    16     4 */
	uint32_t                   recirc_id;            /*    20     4 */
	struct flow                flow;                 /*    24   672 */
	/* --- cacheline 10 boundary (640 bytes) was 56 bytes ago --- */
	struct dp_packet *         packet;               /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */

	/* size: 704, cachelines: 11, members: 5 */
};
struct oftrace_next_ct_state {
	struct ovs_list            node;                 /*     0    16 */
	uint32_t                   state;                /*    16     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofputil_port_map {
	struct hmap                by_name;              /*     0    32 */
	struct hmap                by_number;            /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 2 */
};
struct dpif_port {
	char *                     name;                 /*     0     8 */
	char *                     type;                 /*     8     8 */
	odp_port_t                 port_no;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct dpif_port_dump {
	const struct dpif  *       dpif;                 /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovs_barrier {
	uint32_t                   size;                 /*     0     4 */
	atomic_count               count;                /*     4     4 */
	struct seq *               seq;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct dpif_flow {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const struct nlattr  *     mask;                 /*    16     8 */
	size_t                     mask_len;             /*    24     8 */
	const struct nlattr  *     actions;              /*    32     8 */
	size_t                     actions_len;          /*    40     8 */
	ovs_u128                   ufid;                 /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	_Bool                      ufid_present;         /*    64     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               pmd_id;               /*    68     4 */
	struct dpif_flow_stats     stats;                /*    72    32 */

	/* XXX last struct has 6 bytes of padding */

	_Bool                      offloaded;            /*   104     1 */

	/* size: 112, cachelines: 2, members: 11 */
	/* sum members: 102, holes: 1, sum holes: 3 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct dpif_flow_put {
	enum dpif_flow_put_flags   flags;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct nlattr  *     key;                  /*     8     8 */
	size_t                     key_len;              /*    16     8 */
	const struct nlattr  *     mask;                 /*    24     8 */
	size_t                     mask_len;             /*    32     8 */
	const struct nlattr  *     actions;              /*    40     8 */
	size_t                     actions_len;          /*    48     8 */
	const ovs_u128  *          ufid;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               pmd_id;               /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	struct dpif_flow_stats *   stats;                /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* sum members: 72, holes: 2, sum holes: 8 */
	/* last cacheline: 16 bytes */
};
struct dpif_flow_del {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const ovs_u128  *          ufid;                 /*    16     8 */
	_Bool                      terse;                /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               pmd_id;               /*    28     4 */
	struct dpif_flow_stats *   stats;                /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct dpif_execute {
	const struct nlattr  *     actions;              /*     0     8 */
	size_t                     actions_len;          /*     8     8 */
	_Bool                      needs_help;           /*    16     1 */
	_Bool                      probe;                /*    17     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               mtu;                  /*    20     4 */
	const struct flow  *       flow;                 /*    24     8 */
	struct dp_packet *         packet;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 38, holes: 1, sum holes: 2 */
	/* last cacheline: 40 bytes */
};
struct dpif_flow_get {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const ovs_u128  *          ufid;                 /*    16     8 */
	unsigned int               pmd_id;               /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofpbuf *            buffer;               /*    32     8 */
	struct dpif_flow *         flow;                 /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct dpif_op {
	enum dpif_op_type          type;                 /*     0     4 */
	int                        error;                /*     4     4 */
	union {
		struct dpif_flow_put flow_put;           /*          80 */
		struct dpif_flow_del flow_del;           /*          40 */
		struct dpif_execute execute;             /*          40 */
		struct dpif_flow_get flow_get;           /*          48 */
	} u;                                             /*     8    80 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 3 */
	/* last cacheline: 24 bytes */
};
struct dpif_upcall {
	struct dp_packet           packet;               /*     0   552 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */
	enum dpif_upcall_type      type;                 /*   552     4 */

	/* XXX 4 bytes hole, try to pack */

	struct nlattr *            key;                  /*   560     8 */
	size_t                     key_len;              /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	ovs_u128                   ufid;                 /*   576    16 */
	struct nlattr *            mru;                  /*   592     8 */
	struct nlattr *            cutlen;               /*   600     8 */
	struct nlattr *            userdata;             /*   608     8 */
	struct nlattr *            out_tun_key;          /*   616     8 */
	struct nlattr *            actions;              /*   624     8 */

	/* size: 632, cachelines: 10, members: 10 */
	/* sum members: 628, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct odputil_keybuf {
	uint32_t                   keybuf[160];          /*     0   640 */
	/* --- cacheline 10 boundary (640 bytes) --- */

	/* size: 640, cachelines: 10, members: 1 */
};
struct odp_flow_key_parms {
	const struct flow  *       flow;                 /*     0     8 */
	const struct flow  *       mask;                 /*     8     8 */
	struct odp_support         support;              /*    16    24 */
	_Bool                      probe;                /*    40     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct ofpbuf  *     key_buf;              /*    48     8 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct dpif_ipfix_actions {
	_Bool                      output_action;        /*     0     1 */

	/* size: 1, cachelines: 1, members: 1 */
	/* last cacheline: 1 bytes */
};
struct udpif {
	struct ovs_list            list_node;            /*     0    16 */
	struct dpif *              dpif;                 /*    16     8 */
	struct dpif_backer *       backer;               /*    24     8 */
	struct handler *           handlers;             /*    32     8 */
	size_t                     n_handlers;           /*    40     8 */
	struct revalidator *       revalidators;         /*    48     8 */
	size_t                     n_revalidators;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct latch               exit_latch;           /*    64     8 */
	struct seq *               reval_seq;            /*    72     8 */
	_Bool                      reval_exit;           /*    80     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_barrier         reval_barrier;        /*    88    16 */
	struct dpif_flow_dump *    dump;                 /*   104     8 */
	long long int              dump_duration;        /*   112     8 */
	struct seq *               dump_seq;             /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	atomic_bool                enable_ufid;          /*   128     1 */
	_Bool                      pause;                /*   129     1 */

	/* XXX 2 bytes hole, try to pack */

	struct latch               pause_latch;          /*   132     8 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_barrier         pause_barrier;        /*   144    16 */
	struct umap *              ukeys;                /*   160     8 */
	unsigned int               max_n_flows;          /*   168     4 */
	unsigned int               avg_n_flows;          /*   172     4 */
	unsigned int               flow_limit;           /*   176     4 */
	unsigned int               n_flows;              /*   180     4 */
	atomic_llong               n_flows_timestamp;    /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovs_mutex           n_flows_mutex;        /*   192    48 */
	struct unixctl_conn * *    conns;                /*   240     8 */
	uint64_t                   conn_seq;             /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	size_t                     n_conns;              /*   256     8 */

	/* size: 264, cachelines: 5, members: 28 */
	/* sum members: 251, holes: 3, sum holes: 13 */
	/* last cacheline: 8 bytes */
};
struct handler {
	struct udpif *             udpif;                /*     0     8 */
	pthread_t                  thread;               /*     8     8 */
	uint32_t                   handler_id;           /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct umap {
	struct ovs_mutex           mutex;                /*     0    48 */
	struct cmap                cmap;                 /*    48     8 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct revalidator {
	struct udpif *             udpif;                /*     0     8 */
	pthread_t                  thread;               /*     8     8 */
	unsigned int               id;                   /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct upcall {
	struct ofproto_dpif *      ofproto;              /*     0     8 */
	const struct recirc_id_node  * recirc;           /*     8     8 */
	_Bool                      have_recirc_ref;      /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct flow  *       flow;                 /*    24     8 */
	const ovs_u128  *          ufid;                 /*    32     8 */
	unsigned int               pmd_id;               /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct dp_packet  *  packet;               /*    48     8 */
	ofp_port_t                 in_port;              /*    56     4 */
	uint16_t                   mru;                  /*    60     2 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	enum dpif_upcall_type      type;                 /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct nlattr  *     userdata;             /*    72     8 */
	const struct nlattr  *     actions;              /*    80     8 */
	_Bool                      xout_initialized;     /*    88     1 */

	/* XXX 7 bytes hole, try to pack */

	struct xlate_out           xout;                 /*    96    24 */
	struct ofpbuf              odp_actions;          /*   120    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 56 bytes ago --- */
	struct flow_wildcards      wc;                   /*   184   672 */
	/* --- cacheline 13 boundary (832 bytes) was 24 bytes ago --- */
	struct ofpbuf              put_actions;          /*   856    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 14 boundary (896 bytes) was 24 bytes ago --- */
	struct dpif_ipfix *        ipfix;                /*   920     8 */
	struct dpif_sflow *        sflow;                /*   928     8 */
	struct udpif_key *         ukey;                 /*   936     8 */
	_Bool                      ukey_persists;        /*   944     1 */

	/* XXX 7 bytes hole, try to pack */

	uint64_t                   dump_seq;             /*   952     8 */
	/* --- cacheline 15 boundary (960 bytes) --- */
	uint64_t                   reval_seq;            /*   960     8 */
	const struct nlattr  *     key;                  /*   968     8 */
	size_t                     key_len;              /*   976     8 */
	const struct nlattr  *     out_tun_key;          /*   984     8 */
	uint64_t                   odp_actions_stub[128]; /*   992  1024 */
	/* --- cacheline 31 boundary (1984 bytes) was 32 bytes ago --- */

	/* size: 2016, cachelines: 32, members: 27 */
	/* sum members: 1985, holes: 6, sum holes: 31 */
	/* paddings: 2, sum paddings: 14 */
	/* last cacheline: 32 bytes */
};
struct udpif_key {
	struct cmap_node           cmap_node;            /*     0     8 */
	const struct nlattr  *     key;                  /*     8     8 */
	size_t                     key_len;              /*    16     8 */
	const struct nlattr  *     mask;                 /*    24     8 */
	size_t                     mask_len;             /*    32     8 */
	ovs_u128                   ufid;                 /*    40    16 */
	_Bool                      ufid_present;         /*    56     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   hash;                 /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               pmd_id;               /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    72    48 */
	struct dpif_flow_stats     stats;                /*   120    32 */

	/* XXX last struct has 6 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	long long int              created;              /*   152     8 */
	uint64_t                   dump_seq;             /*   160     8 */
	uint64_t                   reval_seq;            /*   168     8 */
	enum ukey_state            state;                /*   176     4 */
	unsigned int               state_thread;         /*   180     4 */
	const char  *              state_where;          /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct {
		struct ofpbuf *    p;                    /*   192     8 */
	} actions;                                       /*   192     8 */
	struct xlate_cache *       xcache;               /*   200     8 */
	union {
		struct odputil_keybuf buf;               /*         640 */
		struct nlattr      nla;                  /*           4 */
	} keybuf;                                        /*   208   640 */
	/* --- cacheline 13 boundary (832 bytes) was 16 bytes ago --- */
	union {
		struct odputil_keybuf buf;               /*         640 */
		struct nlattr      nla;                  /*           4 */
	} maskbuf;                                       /*   848   640 */
	/* --- cacheline 23 boundary (1472 bytes) was 16 bytes ago --- */
	uint32_t                   key_recirc_id;        /*  1488     4 */

	/* XXX 4 bytes hole, try to pack */

	struct recirc_refs         recircs;              /*  1496    16 */

	/* size: 1512, cachelines: 24, members: 23 */
	/* sum members: 1501, holes: 3, sum holes: 11 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 40 bytes */
};
struct ukey_op {
	struct udpif_key *         ukey;                 /*     0     8 */
	struct dpif_flow_stats     stats;                /*     8    32 */

	/* XXX last struct has 6 bytes of padding */

	struct dpif_op             dop;                  /*    40    88 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 3 */
	/* paddings: 1, sum paddings: 6 */
};
struct reval_context {
	struct flow_wildcards *    wc;                   /*     0     8 */
	struct ofpbuf *            odp_actions;          /*     8     8 */
	struct netflow * *         netflow;              /*    16     8 */
	struct xlate_cache *       xcache;               /*    24     8 */
	struct xlate_out           xout;                 /*    32    24 */
	struct flow                flow;                 /*    56   672 */
	/* --- cacheline 11 boundary (704 bytes) was 24 bytes ago --- */

	/* size: 728, cachelines: 12, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ofputil_ipfix_stats {
	uint32_t                   collector_set_id;     /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   total_flows;          /*     8     8 */
	uint64_t                   current_flows;        /*    16     8 */
	uint64_t                   pkts;                 /*    24     8 */
	uint64_t                   ipv4_pkts;            /*    32     8 */
	uint64_t                   ipv6_pkts;            /*    40     8 */
	uint64_t                   error_pkts;           /*    48     8 */
	uint64_t                   ipv4_error_pkts;      /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   ipv6_error_pkts;      /*    64     8 */
	uint64_t                   tx_pkts;              /*    72     8 */
	uint64_t                   tx_errors;            /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 84, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct dpif_ipfix {
	struct dpif_ipfix_bridge_exporter bridge_exporter; /*     0   360 */
	/* --- cacheline 5 boundary (320 bytes) was 40 bytes ago --- */
	struct hmap                flow_exporter_map;    /*   360    32 */
	/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */
	struct hmap                tunnel_ports;         /*   392    32 */
	struct ovs_refcount        ref_cnt;              /*   424     4 */

	/* size: 432, cachelines: 7, members: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct dpif_ipfix_global_stats {
	uint64_t                   dropped_packet_total_count; /*     0     8 */
	uint64_t                   dropped_octet_total_count; /*     8     8 */
	uint64_t                   packet_total_count;   /*    16     8 */
	uint64_t                   octet_total_count;    /*    24     8 */
	uint64_t                   octet_total_sum_of_squares; /*    32     8 */
	uint64_t                   layer2_octet_total_count; /*    40     8 */
	uint64_t                   tcp_ack_total_count;  /*    48     8 */
	uint64_t                   tcp_fin_total_count;  /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   tcp_psh_total_count;  /*    64     8 */
	uint64_t                   tcp_rst_total_count;  /*    72     8 */
	uint64_t                   tcp_syn_total_count;  /*    80     8 */
	uint64_t                   tcp_urg_total_count;  /*    88     8 */
	uint64_t                   post_mcast_packet_total_count; /*    96     8 */
	uint64_t                   post_mcast_octet_total_count; /*   104     8 */
	uint64_t                   in_ucast_packet_total_count; /*   112     8 */
	uint64_t                   in_mcast_packet_total_count; /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint64_t                   in_bcast_packet_total_count; /*   128     8 */
	uint64_t                   out_ucast_packet_total_count; /*   136     8 */
	uint64_t                   out_bcast_packet_total_count; /*   144     8 */

	/* size: 152, cachelines: 3, members: 19 */
	/* last cacheline: 24 bytes */
};
struct dpif_ipfix_port {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofport *            ofport;               /*    16     8 */
	odp_port_t                 odp_port;             /*    24     4 */
	enum dpif_ipfix_tunnel_type tunnel_type;         /*    28     4 */
	uint8_t                    tunnel_key_length;    /*    32     1 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct dpif_ipfix_exporter {
	uint32_t                   exporter_id;          /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct collectors *        collectors;           /*     8     8 */
	uint32_t                   seq_number;           /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	time_t                     last_template_set_time; /*    24     8 */
	struct hmap                cache_flow_key_map;   /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            cache_flow_start_timestamp_list; /*    64    16 */
	uint32_t                   cache_active_timeout; /*    80     4 */
	uint32_t                   cache_max_flows;      /*    84     4 */
	char *                     virtual_obs_id;       /*    88     8 */
	uint8_t                    virtual_obs_len;      /*    96     1 */

	/* XXX 7 bytes hole, try to pack */

	ofproto_ipfix_stats        ofproto_stats;        /*   104    88 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct dpif_ipfix_global_stats ipfix_global_stats; /*   192   152 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 12 */
	/* sum members: 329, holes: 3, sum holes: 15 */
	/* last cacheline: 24 bytes */
};
struct dpif_ipfix_bridge_exporter {
	struct dpif_ipfix_exporter exporter;             /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	struct ofproto_ipfix_bridge_exporter_options * options; /*   344     8 */
	uint32_t                   probability;          /*   352     4 */

	/* size: 360, cachelines: 6, members: 3 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct dpif_ipfix_flow_exporter {
	struct dpif_ipfix_exporter exporter;             /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	struct ofproto_ipfix_flow_exporter_options * options; /*   344     8 */

	/* size: 352, cachelines: 6, members: 2 */
	/* last cacheline: 32 bytes */
};
struct dpif_ipfix_flow_exporter_map_node {
	struct hmap_node           node;                 /*     0    16 */
	struct dpif_ipfix_flow_exporter exporter;        /*    16   352 */
	/* --- cacheline 5 boundary (320 bytes) was 48 bytes ago --- */

	/* size: 368, cachelines: 6, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ipfix_header {
	ovs_be16                   version;              /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	ovs_be32                   export_time;          /*     4     4 */
	ovs_be32                   seq_number;           /*     8     4 */
	ovs_be32                   obs_domain_id;        /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ipfix_set_header {
	ovs_be16                   set_id;               /*     0     2 */
	ovs_be16                   length;               /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ipfix_template_record_header {
	ovs_be16                   template_id;          /*     0     2 */
	ovs_be16                   field_count;          /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ipfix_options_template_record_header {
	ovs_be16                   template_id;          /*     0     2 */
	ovs_be16                   field_count;          /*     2     2 */
	ovs_be16                   scope_field_count;    /*     4     2 */

	/* size: 6, cachelines: 1, members: 3 */
	/* last cacheline: 6 bytes */
};
struct ipfix_template_field_specifier {
	ovs_be16                   element_id;           /*     0     2 */
	ovs_be16                   field_length;         /*     2     2 */
	ovs_be32                   enterprise;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ipfix_data_record_flow_key_common {
	ovs_be32                   observation_point_id; /*     0     4 */
	uint8_t                    flow_direction;       /*     4     1 */
	struct eth_addr            source_mac_address;   /*     5     6 */
	struct eth_addr            destination_mac_address; /*    11     6 */
	ovs_be16                   ethernet_type;        /*    17     2 */
	uint8_t                    ethernet_header_length; /*    19     1 */

	/* size: 20, cachelines: 1, members: 6 */
	/* last cacheline: 20 bytes */
};
struct ipfix_data_record_flow_key_vlan {
	ovs_be16                   vlan_id;              /*     0     2 */
	ovs_be16                   dot1q_vlan_id;        /*     2     2 */
	uint8_t                    dot1q_priority;       /*     4     1 */

	/* size: 5, cachelines: 1, members: 3 */
	/* last cacheline: 5 bytes */
};
struct ipfix_data_record_flow_key_ip {
	uint8_t                    ip_version;           /*     0     1 */
	uint8_t                    ip_ttl;               /*     1     1 */
	uint8_t                    protocol_identifier;  /*     2     1 */
	uint8_t                    ip_diff_serv_code_point; /*     3     1 */
	uint8_t                    ip_precedence;        /*     4     1 */
	uint8_t                    ip_class_of_service;  /*     5     1 */

	/* size: 6, cachelines: 1, members: 6 */
	/* last cacheline: 6 bytes */
};
struct ipfix_data_record_flow_key_ipv4 {
	ovs_be32                   source_ipv4_address;  /*     0     4 */
	ovs_be32                   destination_ipv4_address; /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ipfix_data_record_flow_key_ipv6 {
	uint8_t                    source_ipv6_address[16]; /*     0    16 */
	uint8_t                    destination_ipv6_address[16]; /*    16    16 */
	ovs_be32                   flow_label_ipv6;      /*    32     4 */

	/* size: 36, cachelines: 1, members: 3 */
	/* last cacheline: 36 bytes */
};
struct ipfix_data_record_flow_key_transport {
	ovs_be16                   source_transport_port; /*     0     2 */
	ovs_be16                   destination_transport_port; /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ipfix_data_record_flow_key_icmp {
	uint8_t                    icmp_type;            /*     0     1 */
	uint8_t                    icmp_code;            /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ipfix_data_record_flow_key_tunnel {
	ovs_be32                   tunnel_source_ipv4_address; /*     0     4 */
	ovs_be32                   tunnel_destination_ipv4_address; /*     4     4 */
	uint8_t                    tunnel_protocol_identifier; /*     8     1 */
	ovs_be16                   tunnel_source_transport_port; /*     9     2 */
	ovs_be16                   tunnel_destination_transport_port; /*    11     2 */
	uint8_t                    tunnel_type;          /*    13     1 */
	uint8_t                    tunnel_key_length;    /*    14     1 */
	uint8_t                    tunnel_key[0];        /*    15     0 */

	/* size: 15, cachelines: 1, members: 8 */
	/* last cacheline: 15 bytes */
};
struct ipfix_data_record_exporter_stats {
	ovs_be32                   exporting_process_id; /*     0     4 */
	ovs_be64                   not_sent_packet_total_count; /*     4     8 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct ipfix_data_record_aggregated_common {
	ovs_be32                   flow_start_delta_microseconds; /*     0     4 */
	ovs_be32                   flow_end_delta_microseconds; /*     4     4 */
	ovs_be64                   dropped_packet_delta_count; /*     8     8 */
	ovs_be64                   dropped_packet_total_count; /*    16     8 */
	ovs_be64                   packet_delta_count;   /*    24     8 */
	ovs_be64                   packet_total_count;   /*    32     8 */
	ovs_be64                   in_ucast_packet_total_count; /*    40     8 */
	ovs_be64                   in_mcast_packet_total_count; /*    48     8 */
	ovs_be64                   in_bcast_packet_total_count; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   out_ucast_packet_total_count; /*    64     8 */
	ovs_be64                   out_bcast_packet_total_count; /*    72     8 */
	ovs_be64                   post_mcast_packet_delta_count; /*    80     8 */
	ovs_be64                   post_mcast_packet_total_count; /*    88     8 */
	ovs_be64                   layer2_octet_delta_count; /*    96     8 */
	ovs_be64                   layer2_octet_total_count; /*   104     8 */
	uint8_t                    flow_end_reason;      /*   112     1 */

	/* size: 113, cachelines: 2, members: 16 */
	/* last cacheline: 49 bytes */
};
struct ipfix_data_record_aggregated_ip {
	ovs_be64                   dropped_octet_delta_count; /*     0     8 */
	ovs_be64                   dropped_octet_total_count; /*     8     8 */
	ovs_be64                   octet_delta_count;    /*    16     8 */
	ovs_be64                   octet_total_count;    /*    24     8 */
	ovs_be64                   octet_delta_sum_of_squares; /*    32     8 */
	ovs_be64                   octet_total_sum_of_squares; /*    40     8 */
	ovs_be64                   minimum_ip_total_length; /*    48     8 */
	ovs_be64                   maximum_ip_total_length; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   post_mcast_octet_delta_count; /*    64     8 */
	ovs_be64                   post_mcast_octet_total_count; /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* last cacheline: 16 bytes */
};
struct ipfix_data_record_aggregated_tcp {
	ovs_be64                   tcp_ack_total_count;  /*     0     8 */
	ovs_be64                   tcp_fin_total_count;  /*     8     8 */
	ovs_be64                   tcp_psh_total_count;  /*    16     8 */
	ovs_be64                   tcp_rst_total_count;  /*    24     8 */
	ovs_be64                   tcp_syn_total_count;  /*    32     8 */
	ovs_be64                   tcp_urg_total_count;  /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct ipfix_flow_key {
	uint32_t                   obs_domain_id;        /*     0     4 */
	uint16_t                   template_id;          /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	size_t                     flow_key_msg_part_size; /*     8     8 */
	uint64_t                   flow_key_msg_part[12]; /*    16    96 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 4 */
	/* sum members: 110, holes: 1, sum holes: 2 */
	/* last cacheline: 48 bytes */
};
struct ipfix_flow_cache_entry {
	struct hmap_node           flow_key_map_node;    /*     0    16 */
	struct ovs_list            cache_flow_start_timestamp_list_node; /*    16    16 */
	struct ipfix_flow_key      flow_key;             /*    32   112 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	uint64_t                   flow_start_timestamp_usec; /*   144     8 */
	uint64_t                   flow_end_timestamp_usec; /*   152     8 */
	uint64_t                   dropped_packet_delta_count; /*   160     8 */
	uint64_t                   dropped_packet_total_count; /*   168     8 */
	uint64_t                   packet_delta_count;   /*   176     8 */
	uint64_t                   packet_total_count;   /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	uint64_t                   in_ucast_packet_total_count; /*   192     8 */
	uint64_t                   in_mcast_packet_total_count; /*   200     8 */
	uint64_t                   in_bcast_packet_total_count; /*   208     8 */
	uint64_t                   out_ucast_packet_total_count; /*   216     8 */
	uint64_t                   out_bcast_packet_total_count; /*   224     8 */
	uint64_t                   post_mcast_packet_total_count; /*   232     8 */
	uint64_t                   post_mcast_packet_delta_count; /*   240     8 */
	uint64_t                   post_mcast_octet_total_count; /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	uint64_t                   post_mcast_octet_delta_count; /*   256     8 */
	uint64_t                   layer2_octet_delta_count; /*   264     8 */
	uint64_t                   layer2_octet_total_count; /*   272     8 */
	uint64_t                   dropped_octet_delta_count; /*   280     8 */
	uint64_t                   dropped_octet_total_count; /*   288     8 */
	uint64_t                   octet_delta_count;    /*   296     8 */
	uint64_t                   octet_total_count;    /*   304     8 */
	uint64_t                   octet_delta_sum_of_squares; /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	uint64_t                   octet_total_sum_of_squares; /*   320     8 */
	uint16_t                   minimum_ip_total_length; /*   328     2 */
	uint16_t                   maximum_ip_total_length; /*   330     2 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   tcp_packet_delta_count; /*   336     8 */
	uint64_t                   tcp_ack_total_count;  /*   344     8 */
	uint64_t                   tcp_fin_total_count;  /*   352     8 */
	uint64_t                   tcp_psh_total_count;  /*   360     8 */
	uint64_t                   tcp_rst_total_count;  /*   368     8 */
	uint64_t                   tcp_syn_total_count;  /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	uint64_t                   tcp_urg_total_count;  /*   384     8 */

	/* size: 392, cachelines: 7, members: 35 */
	/* sum members: 388, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct option {
	const char  *              name;                 /*     0     8 */
	int                        has_arg;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	int *                      flag;                 /*    16     8 */
	int                        val;                  /*    24     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 24, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovs_list {
	struct ovs_list *          prev;                 /*     0     8 */
	struct ovs_list *          next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct vlan_ioctl_args {
	int                        cmd;                  /*     0     4 */
	char                       device1[24];          /*     4    24 */
	union {
		char               device2[24];          /*          24 */
		int                VID;                  /*           4 */
		unsigned int       skb_priority;         /*           4 */
		unsigned int       name_type;            /*           4 */
		unsigned int       bind_type;            /*           4 */
		unsigned int       flag;                 /*           4 */
	} u;                                             /*    28    24 */
	short int                  vlan_qos;             /*    52     2 */

	/* size: 56, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 56 bytes */
};
struct uuid {
	uint32_t                   parts[4];             /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_integer_constraints {
	int64_t                    min;                  /*     0     8 */
	int64_t                    max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_real_constraints {
	double                     min;                  /*     0     8 */
	double                     max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_string_constraints {
	unsigned int               minLen;               /*     0     4 */
	unsigned int               maxLen;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_uuid_constraints {
	char *                     refTableName;         /*     0     8 */
	struct ovsdb_table *       refTable;             /*     8     8 */
	enum ovsdb_ref_type        refType;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_table {
	struct ovsdb_table_schema * schema;              /*     0     8 */
	struct ovsdb_txn_table *   txn_table;            /*     8     8 */
	struct hmap                rows;                 /*    16    32 */
	struct hmap *              indexes;              /*    48     8 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_base_type {
	enum ovsdb_atomic_type     type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_datum *       enum_;                /*     8     8 */
	union {
		struct ovsdb_integer_constraints integer; /*          16 */
		struct ovsdb_real_constraints real;      /*          16 */
		struct ovsdb_string_constraints string;  /*           8 */
		struct ovsdb_uuid_constraints uuid;      /*          24 */
	} u;                                             /*    16    24 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_datum {
	unsigned int               n;                    /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union ovsdb_atom *         keys;                 /*     8     8 */
	union ovsdb_atom *         values;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_type {
	struct ovsdb_base_type     key;                  /*     0    40 */
	struct ovsdb_base_type     value;                /*    40    40 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               n_min;                /*    80     4 */
	unsigned int               n_max;                /*    84     4 */

	/* size: 88, cachelines: 2, members: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_column {
	unsigned int               index;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     name;                 /*     8     8 */
	_Bool                      mutable;              /*    16     1 */
	_Bool                      persistent;           /*    17     1 */

	/* XXX 6 bytes hole, try to pack */

	struct ovsdb_type          type;                 /*    24    88 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 5 */
	/* sum members: 102, holes: 2, sum holes: 10 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_column_set {
	const struct ovsdb_column  * * columns;          /*     0     8 */
	size_t                     n_columns;            /*     8     8 */
	size_t                     allocated_columns;    /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hmap_node {
	size_t                     hash;                 /*     0     8 */
	struct hmap_node *         next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct hmap {
	struct hmap_node * *       buckets;              /*     0     8 */
	struct hmap_node *         one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n;                    /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct ovs_list {
	struct ovs_list *          prev;                 /*     0     8 */
	struct ovs_list *          next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct shash_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	void *                     data;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct shash {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_symbol_table {
	struct shash               sh;                   /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_weak_ref {
	struct ovs_list            src_node;             /*     0    16 */
	struct ovs_list            dst_node;             /*    16    16 */
	struct ovsdb_row *         src;                  /*    32     8 */
	struct ovsdb_table *       dst_table;            /*    40     8 */
	struct uuid                dst;                  /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 5 */
};
struct ovsdb_row {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovsdb_table *       table;                /*    16     8 */
	struct ovsdb_txn_row *     txn_row;              /*    24     8 */
	struct ovs_list            src_refs;             /*    32    16 */
	struct ovs_list            dst_refs;             /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	size_t                     n_refs;               /*    64     8 */
	struct ovsdb_datum         fields[0];            /*    72     0 */

	/* size: 72, cachelines: 2, members: 7 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_row_set {
	const struct ovsdb_row  * * rows;                /*     0     8 */
	size_t                     n_rows;               /*     8     8 */
	size_t                     allocated_rows;       /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_row_hash {
	struct hmap                rows;                 /*     0    32 */
	struct ovsdb_column_set    columns;              /*    32    24 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_row_hash_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	const struct ovsdb_row  *  row;                  /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ds {
	char *                     string;               /*     0     8 */
	size_t                     length;               /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct json_array {
	size_t                     n;                    /*     0     8 */
	size_t                     n_allocated;          /*     8     8 */
	struct json * *            elems;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct json {
	enum json_type             type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     count;                /*     8     8 */
	union {
		struct shash *     object;               /*           8 */
		struct json_array  array;                /*          24 */
		long long int      integer;              /*           8 */
		double             real;                 /*           8 */
		char *             string;               /*           8 */
	} u;                                             /*    16    24 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_table_schema {
	char *                     name;                 /*     0     8 */
	_Bool                      mutable;              /*     8     1 */
	_Bool                      is_root;              /*     9     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               max_rows;             /*    12     4 */
	struct shash               columns;              /*    16    32 */
	struct ovsdb_column_set *  indexes;              /*    48     8 */
	size_t                     n_indexes;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 7 */
	/* sum members: 62, holes: 1, sum holes: 2 */
};
struct ovsdb_row_set_sort_cbdata {
	struct ovsdb_row_set *     set;                  /*     0     8 */
	const struct ovsdb_column_set  * columns;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct __pthread_internal_list {
	struct __pthread_internal_list * __prev;         /*     0     8 */
	struct __pthread_internal_list * __next;         /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct __pthread_mutex_s {
	int                        __lock;               /*     0     4 */
	unsigned int               __count;              /*     4     4 */
	int                        __owner;              /*     8     4 */
	unsigned int               __nusers;             /*    12     4 */
	int                        __kind;               /*    16     4 */
	short int                  __spins;              /*    20     2 */
	short int                  __elision;            /*    22     2 */
	__pthread_list_t           __list;               /*    24    16 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_clause {
	enum ovsdb_function        function;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct ovsdb_column  * column;             /*     8     8 */
	unsigned int               index;                /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_datum         arg;                  /*    24    24 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 40, holes: 2, sum holes: 8 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_condition {
	struct ovsdb_clause *      clauses;              /*     0     8 */
	size_t                     n_clauses;            /*     8     8 */
	_Bool                      optimized;            /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	struct shash               o_columns;            /*    24    32 */

	/* size: 56, cachelines: 1, members: 4 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_mutation {
	enum ovsdb_mutator         mutator;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct ovsdb_column  * column;             /*     8     8 */
	struct ovsdb_datum         arg;                  /*    16    24 */
	struct ovsdb_type          type;                 /*    40    88 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 4 */
	/* sum members: 124, holes: 1, sum holes: 4 */
};
struct ovsdb_mutation_set {
	struct ovsdb_mutation *    mutations;            /*     0     8 */
	size_t                     n_mutations;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovs_mutex {
	pthread_mutex_t            lock;                 /*     0    40 */
	const char  *              where;                /*    40     8 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct token_bucket {
	unsigned int               rate;                 /*     0     4 */
	unsigned int               burst;                /*     4     4 */
	unsigned int               tokens;               /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_fill;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct vlog_module {
	struct ovs_list            list;                 /*     0    16 */
	const char  *              name;                 /*    16     8 */
	int                        levels[3];            /*    24    12 */
	int                        min_level;            /*    36     4 */
	_Bool                      honor_rate_limits;    /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct vlog_rate_limit {
	struct token_bucket        token_bucket;         /*     0    24 */
	time_t                     first_dropped;        /*    24     8 */
	time_t                     last_dropped;         /*    32     8 */
	unsigned int               n_dropped;            /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    48    48 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 5 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_schema {
	char *                     name;                 /*     0     8 */
	char *                     version;              /*     8     8 */
	char *                     cksum;                /*    16     8 */
	struct shash               tables;               /*    24    32 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct ovsdb {
	struct ovsdb_schema *      schema;               /*     0     8 */
	struct ovs_list            replicas;             /*     8    16 */
	struct shash               tables;               /*    24    32 */
	struct ovs_list            triggers;             /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	_Bool                      run_triggers;         /*    72     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsdb_table *       rbac_role;            /*    80     8 */

	/* size: 88, cachelines: 2, members: 6 */
	/* sum members: 81, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct rbac_delete_cbdata {
	const struct ovsdb_table  * table;               /*     0     8 */
	const struct ovsdb_row  *  perms;                /*     8     8 */
	const char  *              role;                 /*    16     8 */
	const char  *              id;                   /*    24     8 */
	_Bool                      permitted;            /*    32     1 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct rbac_update_cbdata {
	const struct ovsdb_table  * table;               /*     0     8 */
	const struct ovsdb_column_set  * columns;        /*     8     8 */
	const struct ovsdb_datum  * modifiable;          /*    16     8 */
	const struct ovsdb_row  *  perms;                /*    24     8 */
	const char  *              role;                 /*    32     8 */
	const char  *              id;                   /*    40     8 */
	_Bool                      permitted;            /*    48     1 */

	/* size: 56, cachelines: 1, members: 7 */
	/* padding: 7 */
	/* last cacheline: 56 bytes */
};
struct rbac_mutate_cbdata {
	const struct ovsdb_table  * table;               /*     0     8 */
	const struct ovsdb_mutation_set  * mutations;    /*     8     8 */
	const struct ovsdb_datum  * modifiable;          /*    16     8 */
	const struct ovsdb_row  *  perms;                /*    24     8 */
	const char  *              role;                 /*    32     8 */
	const char  *              id;                   /*    40     8 */
	_Bool                      permitted;            /*    48     1 */

	/* size: 56, cachelines: 1, members: 7 */
	/* padding: 7 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_replica {
	struct ovs_list            node;                 /*     0    16 */
	const struct ovsdb_replica_class  * class;       /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_replica_class {
	struct ovsdb_error *       (*commit)(struct ovsdb_replica *, const struct ovsdb_txn  *, _Bool); /*     0     8 */
	void                       (*destroy)(struct ovsdb_replica *); /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_file_txn {
	struct json *              json;                 /*     0     8 */
	struct json *              table_json;           /*     8     8 */
	struct ovsdb_table *       table;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_file {
	struct ovsdb_replica       replica;              /*     0    24 */
	struct ovsdb *             db;                   /*    24     8 */
	struct ovsdb_log *         log;                  /*    32     8 */
	char *                     file_name;            /*    40     8 */
	long long int              last_compact;         /*    48     8 */
	long long int              next_compact;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               n_transactions;       /*    64     4 */

	/* size: 72, cachelines: 2, members: 7 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_o_column {
	const struct ovsdb_column  * column;             /*     0     8 */
	struct hmap                o_clauses;            /*     8    32 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_o_clause {
	struct ovsdb_datum *       arg;                  /*     0     8 */
	struct hmap_node           hmap_node;            /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct sset {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_parser {
	char *                     name;                 /*     0     8 */
	struct sset                used;                 /*     8    32 */
	const struct json  *       json;                 /*    40     8 */
	struct ovsdb_error *       error;                /*    48     8 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct timespec {
	__time_t                   tv_sec;               /*     0     8 */
	__syscall_slong_t          tv_nsec;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct stat {
	__dev_t                    st_dev;               /*     0     8 */
	__ino_t                    st_ino;               /*     8     8 */
	__nlink_t                  st_nlink;             /*    16     8 */
	__mode_t                   st_mode;              /*    24     4 */
	__uid_t                    st_uid;               /*    28     4 */
	__gid_t                    st_gid;               /*    32     4 */
	int                        __pad0;               /*    36     4 */
	__dev_t                    st_rdev;              /*    40     8 */
	__off_t                    st_size;              /*    48     8 */
	__blksize_t                st_blksize;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__blkcnt_t                 st_blocks;            /*    64     8 */
	struct timespec            st_atim;              /*    72    16 */
	struct timespec            st_mtim;              /*    88    16 */
	struct timespec            st_ctim;              /*   104    16 */
	__syscall_slong_t          __glibc_reserved[3];  /*   120    24 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */

	/* size: 144, cachelines: 3, members: 15 */
	/* last cacheline: 16 bytes */
};
struct sha1_ctx {
	uint32_t                   digest[5];            /*     0    20 */
	uint32_t                   count_lo;             /*    20     4 */
	uint32_t                   count_hi;             /*    24     4 */
	uint32_t                   data[16];             /*    28    64 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */
	int                        local;                /*    92     4 */

	/* size: 96, cachelines: 2, members: 5 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_log {
	enum ovsdb_log_state       state;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_error *       error;                /*     8     8 */
	off_t                      prev_offset;          /*    16     8 */
	off_t                      offset;               /*    24     8 */
	char *                     name;                 /*    32     8 */
	char *                     display_name;         /*    40     8 */
	char *                     magic;                /*    48     8 */
	struct lockfile *          lockfile;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	FILE *                     stream;               /*    64     8 */
	off_t                      base;                 /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* sum members: 76, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_txn {
	struct ovsdb *             db;                   /*     0     8 */
	struct ovs_list            txn_tables;           /*     8    16 */
	struct ds                  comment;              /*    24    24 */

	/* size: 48, cachelines: 1, members: 3 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_txn_row {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovsdb_row *         old;                  /*    16     8 */
	struct ovsdb_row *         new;                  /*    24     8 */
	size_t                     n_refs;               /*    32     8 */
	struct uuid                uuid;                 /*    40    16 */
	struct ovsdb_table *       table;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               serial;               /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          changed[0];           /*    72     0 */

	/* size: 72, cachelines: 2, members: 8 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_txn_table {
	struct ovs_list            node;                 /*     0    16 */
	struct ovsdb_table *       table;                /*    16     8 */
	struct hmap                txn_rows;             /*    24    32 */
	struct hmap *              txn_indexes;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               serial;               /*    64     4 */
	unsigned int               n_processed;          /*    68     4 */

	/* size: 72, cachelines: 2, members: 6 */
	/* last cacheline: 8 bytes */
};
struct perf_counter {
	const char  *              name;                 /*     0     8 */
	_Bool                      once;                 /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	uint64_t                   n_events;             /*    16     8 */
	uint64_t                   total_count;          /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 25, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_symbol {
	struct uuid                uuid;                 /*     0    16 */
	_Bool                      created;              /*    16     1 */
	_Bool                      strong_ref;           /*    17     1 */
	_Bool                      weak_ref;             /*    18     1 */

	/* size: 20, cachelines: 1, members: 4 */
	/* padding: 1 */
	/* last cacheline: 20 bytes */
};
struct ovsdb_session {
	struct ovsdb_server *      server;               /*     0     8 */
	struct ovs_list            completions;          /*     8    16 */
	struct hmap                waiters;              /*    24    32 */

	/* size: 56, cachelines: 1, members: 3 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_server {
	struct shash               dbs;                  /*     0    32 */
	struct hmap                locks;                /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct uuid                uuid;                 /*    64    16 */

	/* size: 80, cachelines: 2, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_lock {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovsdb_server *      server;               /*    16     8 */
	char *                     name;                 /*    24     8 */
	struct ovs_list            waiters;              /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_lock_waiter {
	struct hmap_node           session_node;         /*     0    16 */
	struct ovsdb_lock *        lock;                 /*    16     8 */
	enum ovsdb_lock_mode       mode;                 /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     lock_name;            /*    32     8 */
	struct ovsdb_session *     session;              /*    40     8 */
	struct ovs_list            lock_node;            /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct ovsdb_execution {
	struct ovsdb *             db;                   /*     0     8 */
	const struct ovsdb_session  * session;           /*     8     8 */
	struct ovsdb_txn *         txn;                  /*    16     8 */
	struct ovsdb_symbol_table * symtab;              /*    24     8 */
	_Bool                      durable;              /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	const char  *              role;                 /*    40     8 */
	const char  *              id;                   /*    48     8 */
	long long int              elapsed_msec;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long long int              timeout_msec;         /*    64     8 */

	/* size: 72, cachelines: 2, members: 9 */
	/* sum members: 65, holes: 1, sum holes: 7 */
	/* last cacheline: 8 bytes */
};
struct update_row_cbdata {
	size_t                     n_matches;            /*     0     8 */
	struct ovsdb_txn *         txn;                  /*     8     8 */
	const struct ovsdb_row  *  row;                  /*    16     8 */
	const struct ovsdb_column_set  * columns;        /*    24     8 */
	const char  *              role;                 /*    32     8 */
	const char  *              id;                   /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct mutate_row_cbdata {
	size_t                     n_matches;            /*     0     8 */
	struct ovsdb_txn *         txn;                  /*     8     8 */
	const struct ovsdb_mutation_set  * mutations;    /*    16     8 */
	struct ovsdb_error * *     error;                /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct delete_row_cbdata {
	size_t                     n_matches;            /*     0     8 */
	const struct ovsdb_table  * table;               /*     8     8 */
	struct ovsdb_txn *         txn;                  /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct wait_auxdata {
	struct ovsdb_row_hash *    actual;               /*     0     8 */
	struct ovsdb_row_hash *    expected;             /*     8     8 */
	_Bool *                    equal;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_scalar_mutation {
	int                        (*mutate_integer)(int64_t *, int64_t); /*     0     8 */
	int                        (*mutate_real)(double *, double); /*     8     8 */
	enum ovsdb_mutator         mutator;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct simap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_jsonrpc_options {
	int                        max_backoff;          /*     0     4 */
	int                        probe_interval;       /*     4     4 */
	_Bool                      read_only;            /*     8     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        dscp;                 /*    12     4 */
	char *                     role;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_jsonrpc_remote_status {
	const char  *              state;                /*     0     8 */
	int                        last_error;           /*     8     4 */
	unsigned int               sec_since_connect;    /*    12     4 */
	unsigned int               sec_since_disconnect; /*    16     4 */
	_Bool                      is_connected;         /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	char *                     locks_held;           /*    24     8 */
	char *                     locks_waiting;        /*    32     8 */
	char *                     locks_lost;           /*    40     8 */
	int                        n_connections;        /*    48     4 */
	ovs_be16                   bound_port;           /*    52     2 */

	/* size: 56, cachelines: 1, members: 10 */
	/* sum members: 51, holes: 1, sum holes: 3 */
	/* padding: 2 */
	/* last cacheline: 56 bytes */
};
struct jsonrpc_msg {
	enum jsonrpc_msg_type      type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     method;               /*     8     8 */
	struct json *              params;               /*    16     8 */
	struct json *              result;               /*    24     8 */
	struct json *              error;                /*    32     8 */
	struct json *              id;                   /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct reconnect_stats {
	long long int              creation_time;        /*     0     8 */
	long long int              last_activity;        /*     8     8 */
	long long int              last_connected;       /*    16     8 */
	long long int              last_disconnected;    /*    24     8 */
	int                        backoff;              /*    32     4 */
	unsigned int               seqno;                /*    36     4 */
	_Bool                      is_connected;         /*    40     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               msec_since_connect;   /*    44     4 */
	unsigned int               msec_since_disconnect; /*    48     4 */
	unsigned int               total_connected_duration; /*    52     4 */
	unsigned int               n_attempted_connections; /*    56     4 */
	unsigned int               n_successful_connections; /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	const char  *              state;                /*    64     8 */
	unsigned int               state_elapsed;        /*    72     4 */

	/* size: 80, cachelines: 2, members: 14 */
	/* sum members: 73, holes: 1, sum holes: 3 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_trigger {
	struct ovsdb_session *     session;              /*     0     8 */
	struct ovsdb *             db;                   /*     8     8 */
	struct ovs_list            node;                 /*    16    16 */
	struct json *              request;              /*    32     8 */
	struct json *              result;               /*    40     8 */
	long long int              created;              /*    48     8 */
	long long int              timeout_msec;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	_Bool                      read_only;            /*    64     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     role;                 /*    72     8 */
	char *                     id;                   /*    80     8 */

	/* size: 88, cachelines: 2, members: 10 */
	/* sum members: 81, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_jsonrpc_server {
	struct ovsdb_server        up;                   /*     0    80 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               n_sessions;           /*    80     4 */
	_Bool                      read_only;            /*    84     1 */

	/* XXX 3 bytes hole, try to pack */

	struct shash               remotes;              /*    88    32 */

	/* size: 120, cachelines: 2, members: 4 */
	/* sum members: 117, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_jsonrpc_remote {
	struct ovsdb_jsonrpc_server * server;            /*     0     8 */
	struct pstream *           listener;             /*     8     8 */
	struct ovs_list            sessions;             /*    16    16 */
	uint8_t                    dscp;                 /*    32     1 */
	_Bool                      read_only;            /*    33     1 */

	/* XXX 6 bytes hole, try to pack */

	char *                     role;                 /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_jsonrpc_session {
	struct ovs_list            node;                 /*     0    16 */
	struct ovsdb_session       up;                   /*    16    56 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ovsdb_jsonrpc_remote * remote;            /*    72     8 */
	struct hmap                triggers;             /*    80    32 */
	struct hmap                monitors;             /*   112    32 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct jsonrpc_session *   js;                   /*   144     8 */
	unsigned int               js_seqno;             /*   152     4 */
	_Bool                      read_only;            /*   156     1 */

	/* size: 160, cachelines: 3, members: 8 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_jsonrpc_trigger {
	struct ovsdb_trigger       trigger;              /*     0    88 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	struct hmap_node           hmap_node;            /*    88    16 */
	struct json *              id;                   /*   104     8 */

	/* size: 112, cachelines: 2, members: 3 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_jsonrpc_monitor {
	struct hmap_node           node;                 /*     0    16 */
	struct ovsdb_jsonrpc_session * session;          /*    16     8 */
	struct ovsdb *             db;                   /*    24     8 */
	struct json *              monitor_id;           /*    32     8 */
	struct ovsdb_monitor *     dbmon;                /*    40     8 */
	uint64_t                   unflushed;            /*    48     8 */
	enum ovsdb_monitor_version version;              /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovsdb_monitor_session_condition * condition; /*    64     8 */

	/* size: 72, cachelines: 2, members: 8 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_monitor_session_condition {
	_Bool                      conditional;          /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct shash               tables;               /*     8    32 */

	/* size: 40, cachelines: 1, members: 2 */
	/* sum members: 33, holes: 1, sum holes: 7 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_monitor_table_condition {
	const struct ovsdb_table  * table;               /*     0     8 */
	struct ovsdb_monitor_table * mt;                 /*     8     8 */
	struct ovsdb_condition     old_condition;        /*    16    56 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ovsdb_condition     new_condition;        /*    72    56 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 4 */
};
struct ovsdb_monitor_table {
	const struct ovsdb_table  * table;               /*     0     8 */
	enum ovsdb_monitor_selection select;             /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_monitor_column * columns;           /*    16     8 */
	size_t                     n_columns;            /*    24     8 */
	size_t                     n_monitored_columns;  /*    32     8 */
	size_t                     allocated_columns;    /*    40     8 */
	unsigned int *             columns_index_map;    /*    48     8 */
	struct hmap                changes;              /*    56    32 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 8 */
	/* sum members: 84, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_monitor {
	struct ovsdb_replica       replica;              /*     0    24 */
	struct shash               tables;               /*    24    32 */
	struct ovs_list            jsonrpc_monitors;     /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ovsdb *             db;                   /*    72     8 */
	uint64_t                   n_transactions;       /*    80     8 */
	struct hmap_node           hmap_node;            /*    88    16 */
	struct hmap                json_cache;           /*   104    32 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */

	/* size: 136, cachelines: 3, members: 7 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_monitor_json_cache_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	enum ovsdb_monitor_version version;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   from_txn;             /*    24     8 */
	struct json *              json;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct jsonrpc_monitor_node {
	struct ovs_list            node;                 /*     0    16 */
	struct ovsdb_jsonrpc_monitor * jsonrpc_monitor;  /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_monitor_column {
	const struct ovsdb_column  * column;             /*     0     8 */
	enum ovsdb_monitor_selection select;             /*     8     4 */
	_Bool                      monitored;            /*    12     1 */

	/* size: 16, cachelines: 1, members: 3 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_monitor_row {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct uuid                uuid;                 /*    16    16 */
	struct ovsdb_datum *       old;                  /*    32     8 */
	struct ovsdb_datum *       new;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_monitor_changes {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovsdb_monitor_table * mt;                 /*    16     8 */
	struct hmap                rows;                 /*    24    32 */
	int                        n_refs;               /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   transaction;          /*    64     8 */

	/* size: 72, cachelines: 2, members: 5 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_monitor_aux {
	const struct ovsdb_monitor  * monitor;           /*     0     8 */
	struct ovsdb_monitor_table * mt;                 /*     8     8 */
	enum ovsdb_monitor_changes_efficacy efficacy;    /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct byteq {
	uint8_t *                  buffer;               /*     0     8 */
	unsigned int               size;                 /*     8     4 */
	unsigned int               head;                 /*    12     4 */
	unsigned int               tail;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct sigaction {
	union {
		__sighandler_t     sa_handler;           /*           8 */
		void               (*sa_sigaction)(int, siginfo_t *, void *); /*           8 */
	} __sigaction_handler;                           /*     0     8 */
	__sigset_t                 sa_mask;              /*     8   128 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	int                        sa_flags;             /*   136     4 */

	/* XXX 4 bytes hole, try to pack */

	void                       (*sa_restorer)(void); /*   144     8 */

	/* size: 152, cachelines: 3, members: 4 */
	/* sum members: 148, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovs_list {
	struct ovs_list *          prev;                 /*     0     8 */
	struct ovs_list *          next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct vlog_module {
	struct ovs_list            list;                 /*     0    16 */
	const char  *              name;                 /*    16     8 */
	int                        levels[3];            /*    24    12 */
	int                        min_level;            /*    36     4 */
	_Bool                      honor_rate_limits;    /*    40     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct __pthread_internal_list {
	struct __pthread_internal_list * __prev;         /*     0     8 */
	struct __pthread_internal_list * __next;         /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct __pthread_mutex_s {
	int                        __lock;               /*     0     4 */
	unsigned int               __count;              /*     4     4 */
	int                        __owner;              /*     8     4 */
	unsigned int               __nusers;             /*    12     4 */
	int                        __kind;               /*    16     4 */
	short int                  __spins;              /*    20     2 */
	short int                  __elision;            /*    22     2 */
	__pthread_list_t           __list;               /*    24    16 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct eth_addr {
	union {
		uint8_t            ea[6];                /*           6 */
		ovs_be16           be16[3];              /*           6 */
	};                                               /*     0     6 */

	/* size: 6, cachelines: 1, members: 1 */
	/* last cacheline: 6 bytes */
};
struct eth_addr64 {
	union {
		uint8_t            ea64[8];              /*           8 */
		ovs_be16           be16[4];              /*           8 */
	};                                               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct geneve_opt {
	ovs_be16                   opt_class;            /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    length:5;             /*     3: 3  1 */
	uint8_t                    r3:1;                 /*     3: 2  1 */
	uint8_t                    r2:1;                 /*     3: 1  1 */
	uint8_t                    r1:1;                 /*     3: 0  1 */

	/* size: 4, cachelines: 1, members: 6 */
	/* last cacheline: 4 bytes */
};
struct in_addr {
	in_addr_t                  s_addr;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct in6_addr {
	union {
		uint8_t            __u6_addr8[16];       /*          16 */
		uint16_t           __u6_addr16[8];       /*          16 */
		uint32_t           __u6_addr32[4];       /*          16 */
	} __in6_u;                                       /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata {
	union {
		uint64_t           map;                  /*           8 */
		uint8_t            len;                  /*           1 */
	} present;                                       /*     0     8 */
	const struct tun_table  *  tab;                  /*     8     8 */
	union {
		uint8_t            u8[256];              /*         256 */
		struct geneve_opt  gnv[63];              /*         252 */
	} opts;                                          /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc_chain {
	struct tun_metadata_loc_chain * next;            /*     0     8 */
	int                        offset;               /*     8     4 */
	int                        len;                  /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct tun_metadata_loc {
	int                        len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct tun_metadata_loc_chain c;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct tun_metadata_match_entry {
	struct tun_metadata_loc    loc;                  /*     0    24 */
	_Bool                      masked;               /*    24     1 */

	/* size: 32, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct tun_metadata_allocation {
	struct tun_metadata_match_entry entry[64];       /*     0  2048 */
	/* --- cacheline 32 boundary (2048 bytes) --- */
	int                        alloc_offset;         /*  2048     4 */
	_Bool                      valid;                /*  2052     1 */

	/* size: 2056, cachelines: 33, members: 3 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct flow_tnl {
	ovs_be32                   ip_dst;               /*     0     4 */
	struct in6_addr            ipv6_dst;             /*     4    16 */
	ovs_be32                   ip_src;               /*    20     4 */
	struct in6_addr            ipv6_src;             /*    24    16 */
	ovs_be64                   tun_id;               /*    40     8 */
	uint16_t                   flags;                /*    48     2 */
	uint8_t                    ip_tos;               /*    50     1 */
	uint8_t                    ip_ttl;               /*    51     1 */
	ovs_be16                   tp_src;               /*    52     2 */
	ovs_be16                   tp_dst;               /*    54     2 */
	ovs_be16                   gbp_id;               /*    56     2 */
	uint8_t                    gbp_flags;            /*    58     1 */

	/* XXX 1 byte hole, try to pack */

	ovs_be32                   erspan_idx;           /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint8_t                    erspan_ver:2;         /*    64: 6  1 */
	uint8_t                    erspan_dir:1;         /*    64: 5  1 */
	uint8_t                    erspan_hwid:5;        /*    64: 0  1 */

	/* XXX 7 bytes hole, try to pack */

	struct tun_metadata        metadata;             /*    72   272 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 17 */
	/* sum members: 336, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct flow_nsh {
	uint8_t                    flags;                /*     0     1 */
	uint8_t                    mdtype;               /*     1     1 */
	uint8_t                    np;                   /*     2     1 */
	uint8_t                    si;                   /*     3     1 */
	ovs_be32                   spi;                  /*     4     4 */
	ovs_be32                   c[4];                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ovs_key_ct_tuple_ipv4 {
	ovs_be32                   ipv4_src;             /*     0     4 */
	ovs_be32                   ipv4_dst;             /*     4     4 */
	ovs_be16                   src_port;             /*     8     2 */
	ovs_be16                   dst_port;             /*    10     2 */
	uint8_t                    ipv4_proto;           /*    12     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 16 bytes */
};
struct ovs_key_ct_tuple_ipv6 {
	struct in6_addr            ipv6_src;             /*     0    16 */
	struct in6_addr            ipv6_dst;             /*    16    16 */
	ovs_be16                   src_port;             /*    32     2 */
	ovs_be16                   dst_port;             /*    34     2 */
	uint8_t                    ipv6_proto;           /*    36     1 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 40 bytes */
};
struct ovs_action_push_tnl {
	odp_port_t                 tnl_port;             /*     0     4 */
	odp_port_t                 out_port;             /*     4     4 */
	uint32_t                   header_len;           /*     8     4 */
	uint32_t                   tnl_type;             /*    12     4 */
	uint32_t                   header[128];          /*    16   512 */
	/* --- cacheline 8 boundary (512 bytes) was 16 bytes ago --- */

	/* size: 528, cachelines: 9, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ds {
	char *                     string;               /*     0     8 */
	size_t                     length;               /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct nlattr {
	__u16                      nla_len;              /*     0     2 */
	__u16                      nla_type;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofpbuf {
	void *                     base;                 /*     0     8 */
	void *                     data;                 /*     8     8 */
	uint32_t                   size;                 /*    16     4 */
	uint32_t                   allocated;            /*    20     4 */
	void *                     header;               /*    24     8 */
	void *                     msg;                  /*    32     8 */
	struct ovs_list            list_node;            /*    40    16 */
	enum ofpbuf_source         source;               /*    56     1 */

	/* size: 64, cachelines: 1, members: 8 */
	/* padding: 7 */
};
struct unaligned_be16 {
	ovs_be16                   x;                    /*     0     2 */

	/* size: 2, cachelines: 1, members: 1 */
	/* last cacheline: 2 bytes */
};
struct pkt_metadata {
	union {
		OVS_CACHE_LINE_MARKER cacheline0;        /*           1 */
		struct {
			uint32_t   recirc_id;            /*     0     4 */
			uint32_t   dp_hash;              /*     4     4 */
			uint32_t   skb_priority;         /*     8     4 */
			uint32_t   pkt_mark;             /*    12     4 */
			uint8_t    ct_state;             /*    16     1 */
			_Bool      ct_orig_tuple_ipv6;   /*    17     1 */
			uint16_t   ct_zone;              /*    18     2 */
			uint32_t   ct_mark;              /*    20     4 */
			ovs_u128   ct_label;             /*    24    16 */
			union flow_in_port in_port;      /*    40     4 */
		};                                       /*          48 */
		uint8_t            pad0[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline1;        /*           1 */
		struct {
			union {
				struct ovs_key_ct_tuple_ipv4 ipv4; /*          16 */
				struct ovs_key_ct_tuple_ipv6 ipv6; /*          40 */
			} ct_orig_tuple;                 /*    64    40 */
		};                                       /*          40 */
		uint8_t            pad1[64];             /*          64 */
	};                                               /*    64    64 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline2;        /*           1 */
		struct {
			struct flow_tnl tunnel;          /*   128   344 */
			/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
		};                                       /*         344 */
		uint8_t            pad2[384];            /*         384 */
	};                                               /*   128   384 */
	/* --- cacheline 8 boundary (512 bytes) --- */

	/* size: 512, cachelines: 8, members: 3 */
};
struct eth_header {
	struct eth_addr            eth_dst;              /*     0     6 */
	struct eth_addr            eth_src;              /*     6     6 */
	ovs_be16                   eth_type;             /*    12     2 */

	/* size: 14, cachelines: 1, members: 3 */
	/* last cacheline: 14 bytes */
};
struct flow {
	struct flow_tnl            tunnel;               /*     0   344 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	ovs_be64                   metadata;             /*   344     8 */
	uint32_t                   regs[16];             /*   352    64 */
	/* --- cacheline 6 boundary (384 bytes) was 32 bytes ago --- */
	uint32_t                   skb_priority;         /*   416     4 */
	uint32_t                   pkt_mark;             /*   420     4 */
	uint32_t                   dp_hash;              /*   424     4 */
	union flow_in_port         in_port;              /*   428     4 */
	uint32_t                   recirc_id;            /*   432     4 */
	uint8_t                    ct_state;             /*   436     1 */
	uint8_t                    ct_nw_proto;          /*   437     1 */
	uint16_t                   ct_zone;              /*   438     2 */
	uint32_t                   ct_mark;              /*   440     4 */
	ovs_be32                   packet_type;          /*   444     4 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	ovs_u128                   ct_label;             /*   448    16 */
	uint32_t                   conj_id;              /*   464     4 */
	ofp_port_t                 actset_output;        /*   468     4 */
	struct eth_addr            dl_dst;               /*   472     6 */
	struct eth_addr            dl_src;               /*   478     6 */
	ovs_be16                   dl_type;              /*   484     2 */
	uint8_t                    pad1[2];              /*   486     2 */
	union flow_vlan_hdr        vlans[2];             /*   488     8 */
	ovs_be32                   mpls_lse[4];          /*   496    16 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	ovs_be32                   nw_src;               /*   512     4 */
	ovs_be32                   nw_dst;               /*   516     4 */
	ovs_be32                   ct_nw_src;            /*   520     4 */
	ovs_be32                   ct_nw_dst;            /*   524     4 */
	struct in6_addr            ipv6_src;             /*   528    16 */
	struct in6_addr            ipv6_dst;             /*   544    16 */
	struct in6_addr            ct_ipv6_src;          /*   560    16 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	struct in6_addr            ct_ipv6_dst;          /*   576    16 */
	ovs_be32                   ipv6_label;           /*   592     4 */
	uint8_t                    nw_frag;              /*   596     1 */
	uint8_t                    nw_tos;               /*   597     1 */
	uint8_t                    nw_ttl;               /*   598     1 */
	uint8_t                    nw_proto;             /*   599     1 */
	struct in6_addr            nd_target;            /*   600    16 */
	struct eth_addr            arp_sha;              /*   616     6 */
	struct eth_addr            arp_tha;              /*   622     6 */
	ovs_be16                   tcp_flags;            /*   628     2 */
	ovs_be16                   pad2;                 /*   630     2 */
	struct flow_nsh            nsh;                  /*   632    24 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	ovs_be16                   tp_src;               /*   656     2 */
	ovs_be16                   tp_dst;               /*   658     2 */
	ovs_be16                   ct_tp_src;            /*   660     2 */
	ovs_be16                   ct_tp_dst;            /*   662     2 */
	ovs_be32                   igmp_group_ip4;       /*   664     4 */
	ovs_be32                   pad3;                 /*   668     4 */

	/* size: 672, cachelines: 11, members: 47 */
	/* last cacheline: 32 bytes */
};
struct flow_wildcards {
	struct flow                masks;                /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */

	/* size: 672, cachelines: 11, members: 1 */
	/* last cacheline: 32 bytes */
};
struct dp_packet {
	void *                     base_;                /*     0     8 */
	uint16_t                   allocated_;           /*     8     2 */
	uint16_t                   data_ofs;             /*    10     2 */
	uint32_t                   size_;                /*    12     4 */
	uint32_t                   rss_hash;             /*    16     4 */
	_Bool                      rss_hash_valid;       /*    20     1 */
	enum dp_packet_source      source;               /*    21     1 */
	uint8_t                    l2_pad_size;          /*    22     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   l2_5_ofs;             /*    24     2 */
	uint16_t                   l3_ofs;               /*    26     2 */
	uint16_t                   l4_ofs;               /*    28     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   cutlen;               /*    32     4 */
	ovs_be32                   packet_type;          /*    36     4 */
	union {
		struct pkt_metadata md;                  /*         512 */
		uint64_t           data[8];              /*          64 */
	};                                               /*    40   512 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */

	/* size: 552, cachelines: 9, members: 14 */
	/* sum members: 549, holes: 2, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct dp_packet_batch {
	size_t                     count;                /*     0     8 */
	_Bool                      trunc;                /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	struct dp_packet *         packets[32];          /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 3 */
	/* sum members: 265, holes: 1, sum holes: 7 */
	/* last cacheline: 16 bytes */
};
struct netdev_stats {
	uint64_t                   rx_packets;           /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   rx_bytes;             /*    16     8 */
	uint64_t                   tx_bytes;             /*    24     8 */
	uint64_t                   rx_errors;            /*    32     8 */
	uint64_t                   tx_errors;            /*    40     8 */
	uint64_t                   rx_dropped;           /*    48     8 */
	uint64_t                   tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   multicast;            /*    64     8 */
	uint64_t                   collisions;           /*    72     8 */
	uint64_t                   rx_length_errors;     /*    80     8 */
	uint64_t                   rx_over_errors;       /*    88     8 */
	uint64_t                   rx_crc_errors;        /*    96     8 */
	uint64_t                   rx_frame_errors;      /*   104     8 */
	uint64_t                   rx_fifo_errors;       /*   112     8 */
	uint64_t                   rx_missed_errors;     /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint64_t                   tx_aborted_errors;    /*   128     8 */
	uint64_t                   tx_carrier_errors;    /*   136     8 */
	uint64_t                   tx_fifo_errors;       /*   144     8 */
	uint64_t                   tx_heartbeat_errors;  /*   152     8 */
	uint64_t                   tx_window_errors;     /*   160     8 */
	uint64_t                   rx_1_to_64_packets;   /*   168     8 */
	uint64_t                   rx_65_to_127_packets; /*   176     8 */
	uint64_t                   rx_128_to_255_packets; /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	uint64_t                   rx_256_to_511_packets; /*   192     8 */
	uint64_t                   rx_512_to_1023_packets; /*   200     8 */
	uint64_t                   rx_1024_to_1522_packets; /*   208     8 */
	uint64_t                   rx_1523_to_max_packets; /*   216     8 */
	uint64_t                   tx_1_to_64_packets;   /*   224     8 */
	uint64_t                   tx_65_to_127_packets; /*   232     8 */
	uint64_t                   tx_128_to_255_packets; /*   240     8 */
	uint64_t                   tx_256_to_511_packets; /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	uint64_t                   tx_512_to_1023_packets; /*   256     8 */
	uint64_t                   tx_1024_to_1522_packets; /*   264     8 */
	uint64_t                   tx_1523_to_max_packets; /*   272     8 */
	uint64_t                   tx_multicast_packets; /*   280     8 */
	uint64_t                   rx_broadcast_packets; /*   288     8 */
	uint64_t                   tx_broadcast_packets; /*   296     8 */
	uint64_t                   rx_undersized_errors; /*   304     8 */
	uint64_t                   rx_oversize_errors;   /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	uint64_t                   rx_fragmented_errors; /*   320     8 */
	uint64_t                   rx_jabber_errors;     /*   328     8 */

	/* size: 336, cachelines: 6, members: 42 */
	/* last cacheline: 16 bytes */
};
struct netdev_tunnel_config {
	ovs_be64                   in_key;               /*     0     8 */
	_Bool                      in_key_present;       /*     8     1 */
	_Bool                      in_key_flow;          /*     9     1 */
	_Bool                      out_key_present;      /*    10     1 */
	_Bool                      out_key_flow;         /*    11     1 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   out_key;              /*    16     8 */
	ovs_be16                   dst_port;             /*    24     2 */
	_Bool                      ip_src_flow;          /*    26     1 */
	_Bool                      ip_dst_flow;          /*    27     1 */
	struct in6_addr            ipv6_src;             /*    28    16 */
	struct in6_addr            ipv6_dst;             /*    44    16 */
	uint32_t                   exts;                 /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint32_t                   egress_pkt_mark;      /*    64     4 */
	_Bool                      set_egress_pkt_mark;  /*    68     1 */
	uint8_t                    ttl;                  /*    69     1 */
	_Bool                      ttl_inherit;          /*    70     1 */
	uint8_t                    tos;                  /*    71     1 */
	_Bool                      tos_inherit;          /*    72     1 */
	_Bool                      csum;                 /*    73     1 */
	_Bool                      dont_fragment;        /*    74     1 */

	/* XXX 1 byte hole, try to pack */

	enum netdev_pt_mode        pt_mode;              /*    76     4 */
	ovs_be32                   erspan_idx;           /*    80     4 */
	uint8_t                    erspan_ver;           /*    84     1 */
	uint8_t                    erspan_dir;           /*    85     1 */
	uint8_t                    erspan_hwid;          /*    86     1 */

	/* size: 88, cachelines: 2, members: 25 */
	/* sum members: 82, holes: 2, sum holes: 5 */
	/* padding: 1 */
	/* last cacheline: 24 bytes */
};
struct offload_info {
	const struct dpif_class  * dpif_class;           /*     0     8 */
	ovs_be16                   tp_dst_port;          /*     8     2 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 6 */
	/* last cacheline: 16 bytes */
};
struct netdev_tnl_build_header_params {
	const struct flow  *       flow;                 /*     0     8 */
	const struct in6_addr  *   s_ip;                 /*     8     8 */
	struct eth_addr            dmac;                 /*    16     6 */
	struct eth_addr            smac;                 /*    22     6 */
	_Bool                      is_ipv6;              /*    28     1 */

	/* size: 32, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct netdev_qos_capabilities {
	unsigned int               n_queues;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct netdev_queue_stats {
	uint64_t                   tx_bytes;             /*     0     8 */
	uint64_t                   tx_packets;           /*     8     8 */
	uint64_t                   tx_errors;            /*    16     8 */
	long long int              created;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct netdev {
	char *                     name;                 /*     0     8 */
	const struct netdev_class  * netdev_class;       /*     8     8 */
	_Bool                      auto_classified;      /*    16     1 */
	_Bool                      mtu_user_config;      /*    17     1 */

	/* XXX 2 bytes hole, try to pack */

	int                        ref_cnt;              /*    20     4 */
	uint64_t                   change_seq;           /*    24     8 */
	struct seq *               reconfigure_seq;      /*    32     8 */
	uint64_t                   last_reconfigure_seq; /*    40     8 */
	int                        n_txq;                /*    48     4 */
	int                        n_rxq;                /*    52     4 */
	struct shash_node *        node;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            saved_flags_list;     /*    64    16 */

	/* size: 80, cachelines: 2, members: 12 */
	/* sum members: 78, holes: 1, sum holes: 2 */
	/* last cacheline: 16 bytes */
};
struct hmap_node {
	size_t                     hash;                 /*     0     8 */
	struct hmap_node *         next;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct hmap {
	struct hmap_node * *       buckets;              /*     0     8 */
	struct hmap_node *         one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n;                    /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct match {
	struct flow                flow;                 /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */
	struct flow_wildcards      wc;                   /*   672   672 */
	/* --- cacheline 21 boundary (1344 bytes) --- */
	struct tun_metadata_allocation tun_md;           /*  1344  2056 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */

	/* size: 3400, cachelines: 54, members: 3 */
	/* paddings: 1, sum paddings: 3 */
	/* last cacheline: 8 bytes */
};
struct mf_field {
	enum mf_field_id           id;                   /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	const char  *              extra_name;           /*    16     8 */
	unsigned int               n_bytes;              /*    24     4 */
	unsigned int               n_bits;               /*    28     4 */
	_Bool                      variable_len;         /*    32     1 */
	enum mf_maskable           maskable;             /*    33     1 */
	enum mf_string             string;               /*    34     1 */
	enum mf_prereqs            prereqs;              /*    35     1 */
	_Bool                      writable;             /*    36     1 */
	_Bool                      mapped;               /*    37     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   usable_protocols_exact; /*    40     4 */
	uint32_t                   usable_protocols_cidr; /*    44     4 */
	uint32_t                   usable_protocols_bitwise; /*    48     4 */
	int                        flow_be32ofs;         /*    52     4 */

	/* size: 56, cachelines: 1, members: 15 */
	/* sum members: 47, holes: 2, sum holes: 9 */
	/* last cacheline: 56 bytes */
};
struct dpif_flow_stats {
	uint64_t                   n_packets;            /*     0     8 */
	uint64_t                   n_bytes;              /*     8     8 */
	long long int              used;                 /*    16     8 */
	uint16_t                   tcp_flags;            /*    24     2 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct shash_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	void *                     data;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct smap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct netdev_class {
	const char  *              type;                 /*     0     8 */
	_Bool                      is_pmd;               /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	int                        (*init)(void);        /*    16     8 */
	void                       (*run)(const struct netdev_class  *); /*    24     8 */
	void                       (*wait)(const struct netdev_class  *); /*    32     8 */
	struct netdev *            (*alloc)(void);       /*    40     8 */
	int                        (*construct)(struct netdev *); /*    48     8 */
	void                       (*destruct)(struct netdev *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*dealloc)(struct netdev *); /*    64     8 */
	int                        (*get_config)(const struct netdev  *, struct smap *); /*    72     8 */
	int                        (*set_config)(struct netdev *, const struct smap  *, char * *); /*    80     8 */
	const struct netdev_tunnel_config  * (*get_tunnel_config)(const struct netdev  *); /*    88     8 */
	int                        (*build_header)(const struct netdev  *, struct ovs_action_push_tnl *, const struct netdev_tnl_build_header_params  *); /*    96     8 */
	void                       (*push_header)(struct dp_packet *, const struct ovs_action_push_tnl  *); /*   104     8 */
	struct dp_packet *         (*pop_header)(struct dp_packet *); /*   112     8 */
	int                        (*get_numa_id)(const struct netdev  *); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        (*set_tx_multiq)(struct netdev *, unsigned int); /*   128     8 */
	int                        (*send)(struct netdev *, int, struct dp_packet_batch *, _Bool); /*   136     8 */
	void                       (*send_wait)(struct netdev *, int); /*   144     8 */
	int                        (*set_etheraddr)(struct netdev *, struct eth_addrconst); /*   152     8 */
	int                        (*get_etheraddr)(const struct netdev  *, struct eth_addr *); /*   160     8 */
	int                        (*get_mtu)(const struct netdev  *, int *); /*   168     8 */
	int                        (*set_mtu)(struct netdev *, int); /*   176     8 */
	int                        (*get_ifindex)(const struct netdev  *); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        (*get_carrier)(const struct netdev  *, _Bool *); /*   192     8 */
	long long int              (*get_carrier_resets)(const struct netdev  *); /*   200     8 */
	int                        (*set_miimon_interval)(struct netdev *, long long int); /*   208     8 */
	int                        (*get_stats)(const struct netdev  *, struct netdev_stats *); /*   216     8 */
	int                        (*get_features)(const struct netdev  *, enum netdev_features *, enum netdev_features *, enum netdev_features *, enum netdev_features *); /*   224     8 */
	int                        (*set_advertisements)(struct netdev *, enum netdev_features); /*   232     8 */
	enum netdev_pt_mode        (*get_pt_mode)(const struct netdev  *); /*   240     8 */
	int                        (*set_policing)(struct netdev *, unsigned int, unsigned int); /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int                        (*get_qos_types)(const struct netdev  *, struct sset *); /*   256     8 */
	int                        (*get_qos_capabilities)(const struct netdev  *, const char  *, struct netdev_qos_capabilities *); /*   264     8 */
	int                        (*get_qos)(const struct netdev  *, const char  * *, struct smap *); /*   272     8 */
	int                        (*set_qos)(struct netdev *, const char  *, const struct smap  *); /*   280     8 */
	int                        (*get_queue)(const struct netdev  *, unsigned int, struct smap *); /*   288     8 */
	int                        (*set_queue)(struct netdev *, unsigned int, const struct smap  *); /*   296     8 */
	int                        (*delete_queue)(struct netdev *, unsigned int); /*   304     8 */
	int                        (*get_queue_stats)(const struct netdev  *, unsigned int, struct netdev_queue_stats *); /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	int                        (*queue_dump_start)(const struct netdev  *, void * *); /*   320     8 */
	int                        (*queue_dump_next)(const struct netdev  *, void *, unsigned int *, struct smap *); /*   328     8 */
	int                        (*queue_dump_done)(const struct netdev  *, void *); /*   336     8 */
	int                        (*dump_queue_stats)(const struct netdev  *, void (*)(unsigned int, struct netdev_queue_stats *, void *), void *); /*   344     8 */
	int                        (*set_in4)(struct netdev *, struct in_addr, struct in_addr); /*   352     8 */
	int                        (*get_addr_list)(const struct netdev  *, struct in6_addr * *, struct in6_addr * *, int *); /*   360     8 */
	int                        (*add_router)(struct netdev *, struct in_addr); /*   368     8 */
	int                        (*get_next_hop)(const struct in_addr  *, struct in_addr *, char * *); /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	int                        (*get_status)(const struct netdev  *, struct smap *); /*   384     8 */
	int                        (*arp_lookup)(const struct netdev  *, ovs_be32, struct eth_addr *); /*   392     8 */
	int                        (*update_flags)(struct netdev *, enum netdev_flags, enum netdev_flags, enum netdev_flags *); /*   400     8 */
	int                        (*reconfigure)(struct netdev *); /*   408     8 */
	struct netdev_rxq *        (*rxq_alloc)(void);   /*   416     8 */
	int                        (*rxq_construct)(struct netdev_rxq *); /*   424     8 */
	void                       (*rxq_destruct)(struct netdev_rxq *); /*   432     8 */
	void                       (*rxq_dealloc)(struct netdev_rxq *); /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	int                        (*rxq_recv)(struct netdev_rxq *, struct dp_packet_batch *); /*   448     8 */
	void                       (*rxq_wait)(struct netdev_rxq *); /*   456     8 */
	int                        (*rxq_drain)(struct netdev_rxq *); /*   464     8 */
	int                        (*flow_flush)(struct netdev *); /*   472     8 */
	int                        (*flow_dump_create)(struct netdev *, struct netdev_flow_dump * *); /*   480     8 */
	int                        (*flow_dump_destroy)(struct netdev_flow_dump *); /*   488     8 */
	_Bool                      (*flow_dump_next)(struct netdev_flow_dump *, struct match *, struct nlattr * *, struct dpif_flow_stats *, ovs_u128 *, struct ofpbuf *, struct ofpbuf *); /*   496     8 */
	int                        (*flow_put)(struct netdev *, struct match *, struct nlattr *, size_t, const ovs_u128  *, struct offload_info *, struct dpif_flow_stats *); /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	int                        (*flow_get)(struct netdev *, struct match *, struct nlattr * *, const ovs_u128  *, struct dpif_flow_stats *, struct ofpbuf *); /*   512     8 */
	int                        (*flow_del)(struct netdev *, const ovs_u128  *, struct dpif_flow_stats *); /*   520     8 */
	int                        (*init_flow_api)(struct netdev *); /*   528     8 */

	/* size: 536, cachelines: 9, members: 67 */
	/* sum members: 529, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct netdev_rxq {
	struct netdev *            netdev;               /*     0     8 */
	int                        queue_id;             /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct netdev_flow_dump {
	struct netdev *            netdev;               /*     0     8 */
	odp_port_t                 port;                 /*     8     4 */
	_Bool                      terse;                /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	struct nl_dump *           nl_dump;              /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct sset {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovs_mutex {
	pthread_mutex_t            lock;                 /*     0    40 */
	const char  *              where;                /*    40     8 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct atomic_count {
	atomic_uint                count;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct sset_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	char                       name[1];              /*    16     1 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 24 bytes */
};
struct dummy_packet_stream {
	struct stream *            stream;               /*     0     8 */
	struct ovs_list            txq;                  /*     8    16 */
	struct dp_packet           rxbuf;                /*    24   552 */
	/* --- cacheline 9 boundary (576 bytes) --- */

	/* size: 576, cachelines: 9, members: 3 */
};
struct dummy_packet_pconn {
	struct pstream *           pstream;              /*     0     8 */
	struct dummy_packet_stream * * streams;          /*     8     8 */
	size_t                     n_streams;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct dummy_packet_rconn {
	struct dummy_packet_stream * rstream;            /*     0     8 */
	struct reconnect *         reconnect;            /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dummy_packet_conn {
	enum dummy_packet_conn_type type;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		struct dummy_packet_pconn pconn;         /*          24 */
		struct dummy_packet_rconn rconn;         /*          16 */
	} u;                                             /*     8    24 */

	/* size: 32, cachelines: 1, members: 2 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct pkt_list_node {
	struct dp_packet *         pkt;                  /*     0     8 */
	struct ovs_list            list_node;            /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct netdev_dummy {
	struct netdev              up;                   /*     0    80 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	struct ovs_list            list_node;            /*    80    16 */
	struct ovs_mutex           mutex;                /*    96    48 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct eth_addr            hwaddr;               /*   144     6 */

	/* XXX 2 bytes hole, try to pack */

	int                        mtu;                  /*   152     4 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev_stats        stats;                /*   160   336 */
	/* --- cacheline 7 boundary (448 bytes) was 48 bytes ago --- */
	enum netdev_flags          flags;                /*   496     4 */
	int                        ifindex;              /*   500     4 */
	int                        numa_id;              /*   504     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 8 boundary (512 bytes) --- */
	struct dummy_packet_conn   conn;                 /*   512    32 */
	FILE *                     tx_pcap;              /*   544     8 */
	FILE *                     rxq_pcap;             /*   552     8 */
	struct in_addr             address;              /*   560     4 */
	struct in_addr             netmask;              /*   564     4 */
	struct in6_addr            ipv6;                 /*   568    16 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */
	struct in6_addr            ipv6_mask;            /*   584    16 */
	struct ovs_list            rxes;                 /*   600    16 */
	int                        requested_n_txq;      /*   616     4 */
	int                        requested_n_rxq;      /*   620     4 */
	int                        requested_numa_id;    /*   624     4 */

	/* size: 632, cachelines: 10, members: 20 */
	/* sum members: 618, holes: 3, sum holes: 10 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct netdev_rxq_dummy {
	struct netdev_rxq          up;                   /*     0    16 */

	/* XXX last struct has 4 bytes of padding */

	struct ovs_list            node;                 /*    16    16 */
	struct ovs_list            recv_queue;           /*    32    16 */
	int                        recv_queue_len;       /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	struct seq *               seq;                  /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 5 */
	/* sum members: 60, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
};
struct netdev_dummy_queue_state {
	unsigned int               next_queue;           /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct tcf_t {
	__u64                      install;              /*     0     8 */
	__u64                      lastuse;              /*     8     8 */
	__u64                      expires;              /*    16     8 */
	__u64                      firstuse;             /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct ovsthread_once {
	_Bool                      done;                 /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct nl_dump {
	struct nl_sock *           sock;                 /*     0     8 */
	uint32_t                   nl_seq;               /*     8     4 */
	int                        status;               /*    12     4 */
	struct ovs_mutex           mutex;                /*    16    48 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct ovs_flow_stats {
	ovs_32aligned_u64          n_packets;            /*     0     8 */
	ovs_32aligned_u64          n_bytes;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct tc_cookie {
	const void  *              data;                 /*     0     8 */
	size_t                     len;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct tc_flower_key {
	ovs_be16                   eth_type;             /*     0     2 */
	uint8_t                    ip_proto;             /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	struct eth_addr            dst_mac;              /*     4     6 */
	struct eth_addr            src_mac;              /*    10     6 */
	ovs_be16                   tcp_src;              /*    16     2 */
	ovs_be16                   tcp_dst;              /*    18     2 */
	ovs_be16                   tcp_flags;            /*    20     2 */
	ovs_be16                   udp_src;              /*    22     2 */
	ovs_be16                   udp_dst;              /*    24     2 */
	ovs_be16                   sctp_src;             /*    26     2 */
	ovs_be16                   sctp_dst;             /*    28     2 */
	uint16_t                   vlan_id;              /*    30     2 */
	uint8_t                    vlan_prio;            /*    32     1 */

	/* XXX 1 byte hole, try to pack */

	ovs_be16                   encap_eth_type;       /*    34     2 */
	uint8_t                    ip_ttl;               /*    36     1 */

	/* XXX 3 bytes hole, try to pack */

	struct {
		ovs_be32           ipv4_src;             /*    40     4 */
		ovs_be32           ipv4_dst;             /*    44     4 */
		uint8_t            rewrite_ttl;          /*    48     1 */
	} ipv4;                                          /*    40    12 */
	struct {
		struct in6_addr    ipv6_src;             /*    52    16 */
		struct in6_addr    ipv6_dst;             /*    68    16 */
	} ipv6;                                          /*    52    32 */
	/* --- cacheline 1 boundary (64 bytes) was 20 bytes ago --- */

	/* size: 84, cachelines: 2, members: 17 */
	/* sum members: 79, holes: 3, sum holes: 5 */
	/* last cacheline: 20 bytes */
};
struct tc_flower {
	uint32_t                   handle;               /*     0     4 */
	uint32_t                   prio;                 /*     4     4 */
	struct tc_flower_key       key;                  /*     8    84 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */
	struct tc_flower_key       mask;                 /*    92    84 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */
	uint8_t                    vlan_pop;             /*   176     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   vlan_push_id;         /*   178     2 */
	uint8_t                    vlan_push_prio;       /*   180     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        ifindex_out;          /*   184     4 */
	struct ovs_flow_stats      stats;                /*   188    16 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */
	uint64_t                   lastused;             /*   208     8 */
	struct {
		_Bool              rewrite;              /*   216     1 */
		struct tc_flower_key key;                /*   220    84 */
		/* --- cacheline 1 boundary (64 bytes) was 21 bytes ago --- */
		struct tc_flower_key mask;               /*   304    84 */
		/* --- cacheline 2 boundary (128 bytes) was 41 bytes ago --- */
	} rewrite;                                       /*   216   172 */
	/* --- cacheline 6 boundary (384 bytes) was 4 bytes ago --- */
	uint32_t                   csum_update_flags;    /*   388     4 */
	struct {
		_Bool              set;                  /*   392     1 */
		ovs_be64           id;                   /*   400     8 */
		ovs_be16           tp_src;               /*   408     2 */
		ovs_be16           tp_dst;               /*   410     2 */
		struct {
			ovs_be32   ipv4_src;             /*   412     4 */
			ovs_be32   ipv4_dst;             /*   416     4 */
		} ipv4;                                  /*   412     8 */
		struct {
			struct in6_addr ipv6_src;        /*   420    16 */
			struct in6_addr ipv6_dst;        /*   436    16 */
		} ipv6;                                  /*   420    32 */
	} set;                                           /*   392    64 */
	/* --- cacheline 7 boundary (448 bytes) was 8 bytes ago --- */
	struct {
		_Bool              tunnel;               /*   456     1 */
		struct {
			ovs_be32   ipv4_src;             /*   460     4 */
			ovs_be32   ipv4_dst;             /*   464     4 */
		} ipv4;                                  /*   460     8 */
		struct {
			struct in6_addr ipv6_src;        /*   468    16 */
			struct in6_addr ipv6_dst;        /*   484    16 */
		} ipv6;                                  /*   468    32 */
		ovs_be64           id;                   /*   504     8 */
		ovs_be16           tp_src;               /*   512     2 */
		ovs_be16           tp_dst;               /*   514     2 */
	} tunnel;                                        /*   456    64 */
	/* --- cacheline 8 boundary (512 bytes) was 8 bytes ago --- */
	struct tc_cookie           act_cookie;           /*   520    16 */
	_Bool                      needs_full_ip_proto_mask; /*   536     1 */

	/* size: 544, cachelines: 9, members: 16 */
	/* sum members: 529, holes: 3, sum holes: 8 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct tcmsg {
	unsigned char              tcm_family;           /*     0     1 */
	unsigned char              tcm__pad1;            /*     1     1 */
	short unsigned int         tcm__pad2;            /*     2     2 */
	int                        tcm_ifindex;          /*     4     4 */
	__u32                      tcm_handle;           /*     8     4 */
	__u32                      tcm_parent;           /*    12     4 */
	__u32                      tcm_info;             /*    16     4 */

	/* size: 20, cachelines: 1, members: 7 */
	/* last cacheline: 20 bytes */
};
struct tc_csum {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */
	__u32                      update_flags;         /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct tc_gact {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct tc_mirred {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */
	int                        eaction;              /*    20     4 */
	__u32                      ifindex;              /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* last cacheline: 28 bytes */
};
struct tc_pedit_key {
	__u32                      mask;                 /*     0     4 */
	__u32                      val;                  /*     4     4 */
	__u32                      off;                  /*     8     4 */
	__u32                      at;                   /*    12     4 */
	__u32                      offmask;              /*    16     4 */
	__u32                      shift;                /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct tc_pedit_sel {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */
	unsigned char              nkeys;                /*    20     1 */
	unsigned char              flags;                /*    21     1 */

	/* XXX 2 bytes hole, try to pack */

	struct tc_pedit_key        keys[0];              /*    24     0 */

	/* size: 24, cachelines: 1, members: 8 */
	/* sum members: 22, holes: 1, sum holes: 2 */
	/* last cacheline: 24 bytes */
};
struct tc_tunnel_key {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */
	int                        t_action;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct tc_vlan {
	__u32                      index;                /*     0     4 */
	__u32                      capab;                /*     4     4 */
	int                        action;               /*     8     4 */
	int                        refcnt;               /*    12     4 */
	int                        bindcnt;              /*    16     4 */
	int                        v_action;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct gnet_stats_basic {
	__u64                      bytes;                /*     0     8 */
	__u32                      packets;              /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct nl_policy {
	enum nl_attr_type          type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     min_len;              /*     8     8 */
	size_t                     max_len;              /*    16     8 */
	_Bool                      optional;             /*    24     1 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct token_bucket {
	unsigned int               rate;                 /*     0     4 */
	unsigned int               burst;                /*     4     4 */
	unsigned int               tokens;               /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_fill;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct vlog_rate_limit {
	struct token_bucket        token_bucket;         /*     0    24 */
	time_t                     first_dropped;        /*    24     8 */
	time_t                     last_dropped;         /*    32     8 */
	unsigned int               n_dropped;            /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    48    48 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 5 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct tc_pedit_key_ex {
	enum pedit_header_type     htype;                /*     0     4 */
	enum pedit_cmd             cmd;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct flower_key_to_pedit {
	enum pedit_header_type     htype;                /*     0     4 */
	int                        offset;               /*     4     4 */
	int                        flower_offset;        /*     8     4 */
	int                        size;                 /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct timeval {
	__time_t                   tv_sec;               /*     0     8 */
	__suseconds_t              tv_usec;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct cmap_node {
	struct {
		struct cmap_node * p;                    /*     0     8 */
	} next;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct cmap {
	struct {
		struct cmap_impl * p;                    /*     0     8 */
	} impl;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct cmap_cursor {
	const struct cmap_impl  *  impl;                 /*     0     8 */
	uint32_t                   bucket_idx;           /*     8     4 */
	int                        entry_idx;            /*    12     4 */
	struct cmap_node *         node;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct tnl_neigh_entry {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct in6_addr            ip;                   /*     8    16 */
	struct eth_addr            mac;                  /*    24     6 */

	/* XXX 2 bytes hole, try to pack */

	time_t                     expires;              /*    32     8 */
	char                       br_name[16];          /*    40    16 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 54, holes: 1, sum holes: 2 */
	/* last cacheline: 56 bytes */
};
struct shash {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct json_array {
	size_t                     n;                    /*     0     8 */
	size_t                     n_allocated;          /*     8     8 */
	struct json * *            elems;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct json {
	enum json_type             type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     count;                /*     8     8 */
	union {
		struct shash *     object;               /*           8 */
		struct json_array  array;                /*          24 */
		long long int      integer;              /*           8 */
		double             real;                 /*           8 */
		char *             string;               /*           8 */
	} u;                                             /*    16    24 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct json_token {
	enum json_token_type       type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		double             real;                 /*           8 */
		long long int      integer;              /*           8 */
		const char  *      string;               /*           8 */
	} u;                                             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct json_parser_node {
	struct json *              json;                 /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct json_parser {
	int                        flags;                /*     0     4 */
	enum json_lex_state        lex_state;            /*     4     4 */
	struct ds                  buffer;               /*     8    24 */
	int                        line_number;          /*    32     4 */
	int                        column_number;        /*    36     4 */
	int                        byte_number;          /*    40     4 */
	enum json_parse_state      parse_state;          /*    44     4 */
	struct json_parser_node *  stack;                /*    48     8 */
	size_t                     height;               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	size_t                     allocated_height;     /*    64     8 */
	char *                     member_name;          /*    72     8 */
	_Bool                      done;                 /*    80     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     error;                /*    88     8 */

	/* size: 96, cachelines: 2, members: 13 */
	/* sum members: 89, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct json_serializer {
	struct ds *                ds;                   /*     0     8 */
	int                        depth;                /*     8     4 */
	int                        flags;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ovs_numa_dump {
	struct hmap                cores;                /*     0    32 */
	struct hmap                numas;                /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 2 */
};
struct ovs_numa_info_core {
	struct hmap_node           hmap_node;            /*     0    16 */
	int                        numa_id;              /*    16     4 */
	unsigned int               core_id;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovs_numa_info_numa {
	struct hmap_node           hmap_node;            /*     0    16 */
	int                        numa_id;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     n_cores;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct dirent {
	__ino_t                    d_ino;                /*     0     8 */
	__off_t                    d_off;                /*     8     8 */
	short unsigned int         d_reclen;             /*    16     2 */
	unsigned char              d_type;               /*    18     1 */
	char                       d_name[256];          /*    19   256 */
	/* --- cacheline 4 boundary (256 bytes) was 19 bytes ago --- */

	/* size: 280, cachelines: 5, members: 5 */
	/* padding: 5 */
	/* last cacheline: 24 bytes */
};
struct numa_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovs_list            cores;                /*    16    16 */
	int                        numa_id;              /*    32     4 */

	/* size: 40, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct cpu_core {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ovs_list            list_node;            /*    16    16 */
	struct numa_node *         numa;                 /*    32     8 */
	unsigned int               core_id;              /*    40     4 */

	/* size: 48, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct igmpv3_header {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    rsvr1;                /*     1     1 */
	ovs_be16                   csum;                 /*     2     2 */
	ovs_be16                   rsvr2;                /*     4     2 */
	ovs_be16                   ngrp;                 /*     6     2 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct igmpv3_record {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    aux_len;              /*     1     1 */
	ovs_be16                   nsrcs;                /*     2     2 */
	ovs_16aligned_be32         maddr;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct mld_header {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    code;                 /*     1     1 */
	ovs_be16                   csum;                 /*     2     2 */
	ovs_be16                   mrd;                  /*     4     2 */
	ovs_be16                   ngrp;                 /*     6     2 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct mld2_record {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    aux_len;              /*     1     1 */
	ovs_be16                   nsrcs;                /*     2     2 */
	union ovs_16aligned_in6_addr maddr;              /*     4    16 */

	/* size: 20, cachelines: 1, members: 4 */
	/* last cacheline: 20 bytes */
};
struct ovs_refcount {
	unsigned int               count;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_rwlock {
	pthread_rwlock_t           lock;                 /*     0    56 */
	const char  *              where;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 2 */
};
struct mcast_group {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct in6_addr            addr;                 /*    16    16 */
	uint16_t                   vlan;                 /*    32     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ovs_list            group_node;           /*    40    16 */
	struct ovs_list            bundle_lru;           /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 5 */
	/* sum members: 66, holes: 1, sum holes: 6 */
	/* last cacheline: 8 bytes */
};
struct mcast_group_bundle {
	struct ovs_list            bundle_node;          /*     0    16 */
	time_t                     expires;              /*    16     8 */
	void *                     port;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct mcast_mrouter_bundle {
	struct ovs_list            mrouter_node;         /*     0    16 */
	time_t                     expires;              /*    16     8 */
	uint16_t                   vlan;                 /*    24     2 */

	/* XXX 6 bytes hole, try to pack */

	void *                     port;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 34, holes: 1, sum holes: 6 */
	/* last cacheline: 40 bytes */
};
struct mcast_port_bundle {
	struct ovs_list            node;                 /*     0    16 */
	uint16_t                   vlan;                 /*    16     2 */

	/* XXX 6 bytes hole, try to pack */

	void *                     port;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 26, holes: 1, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct mcast_snooping {
	struct hmap                table;                /*     0    32 */
	struct ovs_list            group_lru;            /*    32    16 */
	struct ovs_list            mrouter_lru;          /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            fport_list;           /*    64    16 */
	struct ovs_list            rport_list;           /*    80    16 */
	uint32_t                   secret;               /*    96     4 */
	unsigned int               idle_time;            /*   100     4 */
	size_t                     max_entries;          /*   104     8 */
	_Bool                      need_revalidate;      /*   112     1 */
	_Bool                      flood_unreg;          /*   113     1 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_refcount        ref_cnt;              /*   116     4 */
	struct ovs_rwlock          rwlock;               /*   120    64 */
	/* --- cacheline 2 boundary (128 bytes) was 56 bytes ago --- */

	/* size: 184, cachelines: 3, members: 12 */
	/* sum members: 182, holes: 1, sum holes: 2 */
	/* last cacheline: 56 bytes */
};
struct coverage_counter {
	const char  *const         name;                 /*     0     8 */
	unsigned int ()(void) *const count;              /*     8     8 */
	long long unsigned int     total;                /*    16     8 */
	long long unsigned int     last_total;           /*    24     8 */
	unsigned int               min[12];              /*    32    48 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               hr[60];               /*    80   240 */
	/* --- cacheline 5 boundary (320 bytes) --- */

	/* size: 320, cachelines: 5, members: 6 */
};
struct timespec {
	__time_t                   tv_sec;               /*     0     8 */
	__syscall_slong_t          tv_nsec;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct tm {
	int                        tm_sec;               /*     0     4 */
	int                        tm_min;               /*     4     4 */
	int                        tm_hour;              /*     8     4 */
	int                        tm_mday;              /*    12     4 */
	int                        tm_mon;               /*    16     4 */
	int                        tm_year;              /*    20     4 */
	int                        tm_wday;              /*    24     4 */
	int                        tm_yday;              /*    28     4 */
	int                        tm_isdst;             /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	long int                   tm_gmtoff;            /*    40     8 */
	const char  *              tm_zone;              /*    48     8 */

	/* size: 56, cachelines: 1, members: 11 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct tm_msec {
	struct tm                  tm;                   /*     0    56 */
	int                        msec;                 /*    56     4 */

	/* size: 64, cachelines: 1, members: 2 */
	/* padding: 4 */
};
struct pollfd {
	int                        fd;                   /*     0     4 */
	short int                  events;               /*     4     2 */
	short int                  revents;              /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct rusage {
	struct timeval             ru_utime;             /*     0    16 */
	struct timeval             ru_stime;             /*    16    16 */
	union {
		long int           ru_maxrss;            /*           8 */
		__syscall_slong_t  __ru_maxrss_word;     /*           8 */
	};                                               /*    32     8 */
	union {
		long int           ru_ixrss;             /*           8 */
		__syscall_slong_t  __ru_ixrss_word;      /*           8 */
	};                                               /*    40     8 */
	union {
		long int           ru_idrss;             /*           8 */
		__syscall_slong_t  __ru_idrss_word;      /*           8 */
	};                                               /*    48     8 */
	union {
		long int           ru_isrss;             /*           8 */
		__syscall_slong_t  __ru_isrss_word;      /*           8 */
	};                                               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		long int           ru_minflt;            /*           8 */
		__syscall_slong_t  __ru_minflt_word;     /*           8 */
	};                                               /*    64     8 */
	union {
		long int           ru_majflt;            /*           8 */
		__syscall_slong_t  __ru_majflt_word;     /*           8 */
	};                                               /*    72     8 */
	union {
		long int           ru_nswap;             /*           8 */
		__syscall_slong_t  __ru_nswap_word;      /*           8 */
	};                                               /*    80     8 */
	union {
		long int           ru_inblock;           /*           8 */
		__syscall_slong_t  __ru_inblock_word;    /*           8 */
	};                                               /*    88     8 */
	union {
		long int           ru_oublock;           /*           8 */
		__syscall_slong_t  __ru_oublock_word;    /*           8 */
	};                                               /*    96     8 */
	union {
		long int           ru_msgsnd;            /*           8 */
		__syscall_slong_t  __ru_msgsnd_word;     /*           8 */
	};                                               /*   104     8 */
	union {
		long int           ru_msgrcv;            /*           8 */
		__syscall_slong_t  __ru_msgrcv_word;     /*           8 */
	};                                               /*   112     8 */
	union {
		long int           ru_nsignals;          /*           8 */
		__syscall_slong_t  __ru_nsignals_word;   /*           8 */
	};                                               /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	union {
		long int           ru_nvcsw;             /*           8 */
		__syscall_slong_t  __ru_nvcsw_word;      /*           8 */
	};                                               /*   128     8 */
	union {
		long int           ru_nivcsw;            /*           8 */
		__syscall_slong_t  __ru_nivcsw_word;     /*           8 */
	};                                               /*   136     8 */

	/* size: 144, cachelines: 3, members: 16 */
	/* last cacheline: 16 bytes */
};
struct large_warp {
	struct unixctl_conn *      conn;                 /*     0     8 */
	long long int              total_warp;           /*     8     8 */
	long long int              warp;                 /*    16     8 */
	unsigned int               main_thread_id;       /*    24     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct clock {
	clockid_t                  id;                   /*     0     4 */
	atomic_bool                slow_path;            /*     4     1 */
	_Bool                      stopped;              /*     5     1 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*     8    48 */
	struct timespec            warp;                 /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct timespec            cache;                /*    72    16 */
	struct large_warp          large_warp;           /*    88    32 */

	/* XXX last struct has 4 bytes of padding */

	/* size: 120, cachelines: 2, members: 7 */
	/* sum members: 118, holes: 1, sum holes: 2 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 56 bytes */
};
struct cpu_usage {
	long long int              when;                 /*     0     8 */
	long long unsigned int     cpu;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct cpu_tracker {
	struct cpu_usage           older;                /*     0    16 */
	struct cpu_usage           newer;                /*    16    16 */
	int                        cpu_usage;            /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct rusage              recent_rusage;        /*    40   144 */
	/* --- cacheline 2 boundary (128 bytes) was 56 bytes ago --- */

	/* size: 184, cachelines: 3, members: 4 */
	/* sum members: 180, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct ofp_prop_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofp_prop_experimenter {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   experimenter;         /*     4     4 */
	ovs_be32                   exp_type;             /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct uuid {
	uint32_t                   parts[4];             /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct ofp_header {
	uint8_t                    version;              /*     0     1 */
	uint8_t                    type;                 /*     1     1 */
	ovs_be16                   length;               /*     2     2 */
	ovs_be32                   xid;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp_switch_config {
	ovs_be16                   flags;                /*     0     2 */
	ovs_be16                   miss_send_len;        /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofp_switch_features {
	ovs_be64                   datapath_id;          /*     0     8 */
	ovs_be32                   n_buffers;            /*     8     4 */
	uint8_t                    n_tables;             /*    12     1 */
	uint8_t                    auxiliary_id;         /*    13     1 */
	uint8_t                    pad[2];               /*    14     2 */
	ovs_be32                   capabilities;         /*    16     4 */
	ovs_be32                   actions;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct ofp_port_status {
	uint8_t                    reason;               /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp_aggregate_stats_reply {
	ovs_32aligned_be64         packet_count;         /*     0     8 */
	ovs_32aligned_be64         byte_count;           /*     8     8 */
	ovs_be32                   flow_count;           /*    16     4 */
	uint8_t                    pad[4];               /*    20     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct ofp_hello_elem_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofp10_phy_port {
	ovs_be16                   port_no;              /*     0     2 */
	struct eth_addr            hw_addr;              /*     2     6 */
	char                       name[16];             /*     8    16 */
	ovs_be32                   config;               /*    24     4 */
	ovs_be32                   state;                /*    28     4 */
	ovs_be32                   curr;                 /*    32     4 */
	ovs_be32                   advertised;           /*    36     4 */
	ovs_be32                   supported;            /*    40     4 */
	ovs_be32                   peer;                 /*    44     4 */

	/* size: 48, cachelines: 1, members: 9 */
	/* last cacheline: 48 bytes */
};
struct ofp10_port_mod {
	ovs_be16                   port_no;              /*     0     2 */
	struct eth_addr            hw_addr;              /*     2     6 */
	ovs_be32                   config;               /*     8     4 */
	ovs_be32                   mask;                 /*    12     4 */
	ovs_be32                   advertise;            /*    16     4 */
	uint8_t                    pad[4];               /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ofp10_packet_queue {
	ovs_be32                   queue_id;             /*     0     4 */
	ovs_be16                   len;                  /*     4     2 */
	uint8_t                    pad[2];               /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp10_queue_prop_header {
	ovs_be16                   property;             /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp10_queue_prop_rate {
	struct ofp10_queue_prop_header prop_header;      /*     0     8 */
	ovs_be16                   rate;                 /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofp10_queue_get_config_request {
	ovs_be16                   port;                 /*     0     2 */
	uint8_t                    pad[2];               /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofp10_queue_get_config_reply {
	ovs_be16                   port;                 /*     0     2 */
	uint8_t                    pad[6];               /*     2     6 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp10_packet_in {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be16                   total_len;            /*     4     2 */
	ovs_be16                   in_port;              /*     6     2 */
	uint8_t                    reason;               /*     8     1 */
	uint8_t                    pad;                  /*     9     1 */
	uint8_t                    data[0];              /*    10     0 */

	/* size: 12, cachelines: 1, members: 6 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofp10_packet_out {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be16                   in_port;              /*     4     2 */
	ovs_be16                   actions_len;          /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp10_match {
	ovs_be32                   wildcards;            /*     0     4 */
	ovs_be16                   in_port;              /*     4     2 */
	struct eth_addr            dl_src;               /*     6     6 */
	struct eth_addr            dl_dst;               /*    12     6 */
	ovs_be16                   dl_vlan;              /*    18     2 */
	uint8_t                    dl_vlan_pcp;          /*    20     1 */
	uint8_t                    pad1[1];              /*    21     1 */
	ovs_be16                   dl_type;              /*    22     2 */
	uint8_t                    nw_tos;               /*    24     1 */
	uint8_t                    nw_proto;             /*    25     1 */
	uint8_t                    pad2[2];              /*    26     2 */
	ovs_be32                   nw_src;               /*    28     4 */
	ovs_be32                   nw_dst;               /*    32     4 */
	ovs_be16                   tp_src;               /*    36     2 */
	ovs_be16                   tp_dst;               /*    38     2 */

	/* size: 40, cachelines: 1, members: 15 */
	/* last cacheline: 40 bytes */
};
struct ofp10_flow_mod {
	struct ofp10_match         match;                /*     0    40 */
	ovs_be64                   cookie;               /*    40     8 */
	ovs_be16                   command;              /*    48     2 */
	ovs_be16                   idle_timeout;         /*    50     2 */
	ovs_be16                   hard_timeout;         /*    52     2 */
	ovs_be16                   priority;             /*    54     2 */
	ovs_be32                   buffer_id;            /*    56     4 */
	ovs_be16                   out_port;             /*    60     2 */
	ovs_be16                   flags;                /*    62     2 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 9 */
};
struct ofp10_flow_removed {
	struct ofp10_match         match;                /*     0    40 */
	ovs_be64                   cookie;               /*    40     8 */
	ovs_be16                   priority;             /*    48     2 */
	uint8_t                    reason;               /*    50     1 */
	uint8_t                    pad[1];               /*    51     1 */
	ovs_be32                   duration_sec;         /*    52     4 */
	ovs_be32                   duration_nsec;        /*    56     4 */
	ovs_be16                   idle_timeout;         /*    60     2 */
	uint8_t                    pad2[2];              /*    62     2 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   packet_count;         /*    64     8 */
	ovs_be64                   byte_count;           /*    72     8 */

	/* size: 80, cachelines: 2, members: 11 */
	/* last cacheline: 16 bytes */
};
struct ofp10_flow_stats_request {
	struct ofp10_match         match;                /*     0    40 */
	uint8_t                    table_id;             /*    40     1 */
	uint8_t                    pad;                  /*    41     1 */
	ovs_be16                   out_port;             /*    42     2 */

	/* size: 44, cachelines: 1, members: 4 */
	/* last cacheline: 44 bytes */
};
struct ofp10_flow_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    table_id;             /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	struct ofp10_match         match;                /*     4    40 */
	ovs_be32                   duration_sec;         /*    44     4 */
	ovs_be32                   duration_nsec;        /*    48     4 */
	ovs_be16                   priority;             /*    52     2 */
	ovs_be16                   idle_timeout;         /*    54     2 */
	ovs_be16                   hard_timeout;         /*    56     2 */
	uint8_t                    pad2[6];              /*    58     6 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_32aligned_be64         cookie;               /*    64     8 */
	ovs_32aligned_be64         packet_count;         /*    72     8 */
	ovs_32aligned_be64         byte_count;           /*    80     8 */

	/* size: 88, cachelines: 2, members: 13 */
	/* last cacheline: 24 bytes */
};
struct ofp10_table_stats {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[3];               /*     1     3 */
	char                       name[32];             /*     4    32 */
	ovs_be32                   wildcards;            /*    36     4 */
	ovs_be32                   max_entries;          /*    40     4 */
	ovs_be32                   active_count;         /*    44     4 */
	ovs_32aligned_be64         lookup_count;         /*    48     8 */
	ovs_32aligned_be64         matched_count;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct ofp10_port_stats_request {
	ovs_be16                   port_no;              /*     0     2 */
	uint8_t                    pad[6];               /*     2     6 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp10_port_stats {
	ovs_be16                   port_no;              /*     0     2 */
	uint8_t                    pad[6];               /*     2     6 */
	ovs_32aligned_be64         rx_packets;           /*     8     8 */
	ovs_32aligned_be64         tx_packets;           /*    16     8 */
	ovs_32aligned_be64         rx_bytes;             /*    24     8 */
	ovs_32aligned_be64         tx_bytes;             /*    32     8 */
	ovs_32aligned_be64         rx_dropped;           /*    40     8 */
	ovs_32aligned_be64         tx_dropped;           /*    48     8 */
	ovs_32aligned_be64         rx_errors;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_32aligned_be64         tx_errors;            /*    64     8 */
	ovs_32aligned_be64         rx_frame_err;         /*    72     8 */
	ovs_32aligned_be64         rx_over_err;          /*    80     8 */
	ovs_32aligned_be64         rx_crc_err;           /*    88     8 */
	ovs_32aligned_be64         collisions;           /*    96     8 */

	/* size: 104, cachelines: 2, members: 14 */
	/* last cacheline: 40 bytes */
};
struct ofp10_queue_stats_request {
	ovs_be16                   port_no;              /*     0     2 */
	uint8_t                    pad[2];               /*     2     2 */
	ovs_be32                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp10_queue_stats {
	ovs_be16                   port_no;              /*     0     2 */
	uint8_t                    pad[2];               /*     2     2 */
	ovs_be32                   queue_id;             /*     4     4 */
	ovs_32aligned_be64         tx_bytes;             /*     8     8 */
	ovs_32aligned_be64         tx_packets;           /*    16     8 */
	ovs_32aligned_be64         tx_errors;            /*    24     8 */

	/* size: 32, cachelines: 1, members: 6 */
	/* last cacheline: 32 bytes */
};
struct ofp11_port {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	char                       name[16];             /*    16    16 */
	ovs_be32                   config;               /*    32     4 */
	ovs_be32                   state;                /*    36     4 */
	ovs_be32                   curr;                 /*    40     4 */
	ovs_be32                   advertised;           /*    44     4 */
	ovs_be32                   supported;            /*    48     4 */
	ovs_be32                   peer;                 /*    52     4 */
	ovs_be32                   curr_speed;           /*    56     4 */
	ovs_be32                   max_speed;            /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 13 */
};
struct ofp11_port_mod {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	ovs_be32                   config;               /*    16     4 */
	ovs_be32                   mask;                 /*    20     4 */
	ovs_be32                   advertise;            /*    24     4 */
	uint8_t                    pad3[4];              /*    28     4 */

	/* size: 32, cachelines: 1, members: 8 */
	/* last cacheline: 32 bytes */
};
struct ofp11_group_mod {
	ovs_be16                   command;              /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   group_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp11_queue_get_config_request {
	ovs_be32                   port;                 /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp11_match_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ofp11_match {
	struct ofp11_match_header  omh;                  /*     0     4 */
	ovs_be32                   in_port;              /*     4     4 */
	ovs_be32                   wildcards;            /*     8     4 */
	struct eth_addr            dl_src;               /*    12     6 */
	struct eth_addr            dl_src_mask;          /*    18     6 */
	struct eth_addr            dl_dst;               /*    24     6 */
	struct eth_addr            dl_dst_mask;          /*    30     6 */
	ovs_be16                   dl_vlan;              /*    36     2 */
	uint8_t                    dl_vlan_pcp;          /*    38     1 */
	uint8_t                    pad1[1];              /*    39     1 */
	ovs_be16                   dl_type;              /*    40     2 */
	uint8_t                    nw_tos;               /*    42     1 */
	uint8_t                    nw_proto;             /*    43     1 */
	ovs_be32                   nw_src;               /*    44     4 */
	ovs_be32                   nw_src_mask;          /*    48     4 */
	ovs_be32                   nw_dst;               /*    52     4 */
	ovs_be32                   nw_dst_mask;          /*    56     4 */
	ovs_be16                   tp_src;               /*    60     2 */
	ovs_be16                   tp_dst;               /*    62     2 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be32                   mpls_label;           /*    64     4 */
	uint8_t                    mpls_tc;              /*    68     1 */
	uint8_t                    pad2[3];              /*    69     3 */
	ovs_be64                   metadata;             /*    72     8 */
	ovs_be64                   metadata_mask;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 24 */
	/* last cacheline: 24 bytes */
};
struct ofp11_table_mod {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[3];               /*     1     3 */
	ovs_be32                   config;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp11_flow_mod {
	ovs_be64                   cookie;               /*     0     8 */
	ovs_be64                   cookie_mask;          /*     8     8 */
	uint8_t                    table_id;             /*    16     1 */
	uint8_t                    command;              /*    17     1 */
	ovs_be16                   idle_timeout;         /*    18     2 */
	ovs_be16                   hard_timeout;         /*    20     2 */
	ovs_be16                   priority;             /*    22     2 */
	ovs_be32                   buffer_id;            /*    24     4 */
	ovs_be32                   out_port;             /*    28     4 */
	ovs_be32                   out_group;            /*    32     4 */
	ovs_be16                   flags;                /*    36     2 */
	ovs_be16                   importance;           /*    38     2 */

	/* size: 40, cachelines: 1, members: 12 */
	/* last cacheline: 40 bytes */
};
struct ofp11_bucket {
	ovs_be16                   len;                  /*     0     2 */
	ovs_be16                   weight;               /*     2     2 */
	ovs_be32                   watch_port;           /*     4     4 */
	ovs_be32                   watch_group;          /*     8     4 */
	uint8_t                    pad[4];               /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ofp11_queue_get_config_reply {
	ovs_be32                   port;                 /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp11_flow_stats_request {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[3];               /*     1     3 */
	ovs_be32                   out_port;             /*     4     4 */
	ovs_be32                   out_group;            /*     8     4 */
	uint8_t                    pad2[4];              /*    12     4 */
	ovs_be64                   cookie;               /*    16     8 */
	ovs_be64                   cookie_mask;          /*    24     8 */

	/* size: 32, cachelines: 1, members: 7 */
	/* last cacheline: 32 bytes */
};
struct ofp11_flow_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    table_id;             /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   duration_sec;         /*     4     4 */
	ovs_be32                   duration_nsec;        /*     8     4 */
	ovs_be16                   priority;             /*    12     2 */
	ovs_be16                   idle_timeout;         /*    14     2 */
	ovs_be16                   hard_timeout;         /*    16     2 */
	ovs_be16                   flags;                /*    18     2 */
	ovs_be16                   importance;           /*    20     2 */
	uint8_t                    pad2[2];              /*    22     2 */
	ovs_be64                   cookie;               /*    24     8 */
	ovs_be64                   packet_count;         /*    32     8 */
	ovs_be64                   byte_count;           /*    40     8 */

	/* size: 48, cachelines: 1, members: 14 */
	/* last cacheline: 48 bytes */
};
struct ofp11_table_stats {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */
	char                       name[32];             /*     8    32 */
	ovs_be32                   wildcards;            /*    40     4 */
	ovs_be32                   match;                /*    44     4 */
	ovs_be32                   instructions;         /*    48     4 */
	ovs_be32                   write_actions;        /*    52     4 */
	ovs_be32                   apply_actions;        /*    56     4 */
	ovs_be32                   config;               /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be32                   max_entries;          /*    64     4 */
	ovs_be32                   active_count;         /*    68     4 */
	ovs_be64                   lookup_count;         /*    72     8 */
	ovs_be64                   matched_count;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 13 */
	/* last cacheline: 24 bytes */
};
struct ofp11_port_stats_request {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp11_port_stats {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	ovs_be64                   rx_packets;           /*     8     8 */
	ovs_be64                   tx_packets;           /*    16     8 */
	ovs_be64                   rx_bytes;             /*    24     8 */
	ovs_be64                   tx_bytes;             /*    32     8 */
	ovs_be64                   rx_dropped;           /*    40     8 */
	ovs_be64                   tx_dropped;           /*    48     8 */
	ovs_be64                   rx_errors;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   tx_errors;            /*    64     8 */
	ovs_be64                   rx_frame_err;         /*    72     8 */
	ovs_be64                   rx_over_err;          /*    80     8 */
	ovs_be64                   rx_crc_err;           /*    88     8 */
	ovs_be64                   collisions;           /*    96     8 */

	/* size: 104, cachelines: 2, members: 14 */
	/* last cacheline: 40 bytes */
};
struct ofp11_queue_stats_request {
	ovs_be32                   port_no;              /*     0     4 */
	ovs_be32                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp11_queue_stats {
	ovs_be32                   port_no;              /*     0     4 */
	ovs_be32                   queue_id;             /*     4     4 */
	ovs_be64                   tx_bytes;             /*     8     8 */
	ovs_be64                   tx_packets;           /*    16     8 */
	ovs_be64                   tx_errors;            /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct ofp11_group_stats_request {
	ovs_be32                   group_id;             /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp11_bucket_counter {
	ovs_be64                   packet_count;         /*     0     8 */
	ovs_be64                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofp11_group_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    pad[2];               /*     2     2 */
	ovs_be32                   group_id;             /*     4     4 */
	ovs_be32                   ref_count;            /*     8     4 */
	uint8_t                    pad2[4];              /*    12     4 */
	ovs_be64                   packet_count;         /*    16     8 */
	ovs_be64                   byte_count;           /*    24     8 */

	/* size: 32, cachelines: 1, members: 7 */
	/* last cacheline: 32 bytes */
};
struct ofp11_group_desc_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   group_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp11_packet_out {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be32                   in_port;              /*     4     4 */
	ovs_be16                   actions_len;          /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp11_packet_in {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be32                   in_port;              /*     4     4 */
	ovs_be32                   in_phy_port;          /*     8     4 */
	ovs_be16                   total_len;            /*    12     2 */
	uint8_t                    reason;               /*    14     1 */
	uint8_t                    table_id;             /*    15     1 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct ofp12_packet_queue {
	ovs_be32                   queue_id;             /*     0     4 */
	ovs_be32                   port;                 /*     4     4 */
	ovs_be16                   len;                  /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp12_table_stats {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */
	char                       name[32];             /*     8    32 */
	ovs_be64                   match;                /*    40     8 */
	ovs_be64                   wildcards;            /*    48     8 */
	ovs_be32                   write_actions;        /*    56     4 */
	ovs_be32                   apply_actions;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   write_setfields;      /*    64     8 */
	ovs_be64                   apply_setfields;      /*    72     8 */
	ovs_be64                   metadata_match;       /*    80     8 */
	ovs_be64                   metadata_write;       /*    88     8 */
	ovs_be32                   instructions;         /*    96     4 */
	ovs_be32                   config;               /*   100     4 */
	ovs_be32                   max_entries;          /*   104     4 */
	ovs_be32                   active_count;         /*   108     4 */
	ovs_be64                   lookup_count;         /*   112     8 */
	ovs_be64                   matched_count;        /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 17 */
};
struct ofp12_group_features_stats {
	ovs_be32                   types;                /*     0     4 */
	ovs_be32                   capabilities;         /*     4     4 */
	ovs_be32                   max_groups[4];        /*     8    16 */
	ovs_be32                   actions[4];           /*    24    16 */

	/* size: 40, cachelines: 1, members: 4 */
	/* last cacheline: 40 bytes */
};
struct ofp12_role_request {
	ovs_be32                   role;                 /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	ovs_be64                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofp12_packet_in {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be16                   total_len;            /*     4     2 */
	uint8_t                    reason;               /*     6     1 */
	uint8_t                    table_id;             /*     7     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp12_flow_removed {
	ovs_be64                   cookie;               /*     0     8 */
	ovs_be16                   priority;             /*     8     2 */
	uint8_t                    reason;               /*    10     1 */
	uint8_t                    table_id;             /*    11     1 */
	ovs_be32                   duration_sec;         /*    12     4 */
	ovs_be32                   duration_nsec;        /*    16     4 */
	ovs_be16                   idle_timeout;         /*    20     2 */
	ovs_be16                   hard_timeout;         /*    22     2 */
	ovs_be64                   packet_count;         /*    24     8 */
	ovs_be64                   byte_count;           /*    32     8 */

	/* size: 40, cachelines: 1, members: 10 */
	/* last cacheline: 40 bytes */
};
struct ofp13_meter_band_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   rate;                 /*     4     4 */
	ovs_be32                   burst_size;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct ofp13_meter_mod {
	ovs_be16                   command;              /*     0     2 */
	ovs_be16                   flags;                /*     2     2 */
	ovs_be32                   meter_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp13_meter_band_dscp_remark {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   rate;                 /*     4     4 */
	ovs_be32                   burst_size;           /*     8     4 */
	uint8_t                    prec_level;           /*    12     1 */
	uint8_t                    pad[3];               /*    13     3 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct ofp13_table_stats {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[3];               /*     1     3 */
	ovs_be32                   active_count;         /*     4     4 */
	ovs_be64                   lookup_count;         /*     8     8 */
	ovs_be64                   matched_count;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct ofp13_table_features {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    table_id;             /*     2     1 */
	uint8_t                    pad[5];               /*     3     5 */
	char                       name[32];             /*     8    32 */
	ovs_be64                   metadata_match;       /*    40     8 */
	ovs_be64                   metadata_write;       /*    48     8 */
	ovs_be32                   capabilities;         /*    56     4 */
	ovs_be32                   max_entries;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct ofp13_port_stats {
	struct ofp11_port_stats    ps;                   /*     0   104 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	ovs_be32                   duration_sec;         /*   104     4 */
	ovs_be32                   duration_nsec;        /*   108     4 */

	/* size: 112, cachelines: 2, members: 3 */
	/* last cacheline: 48 bytes */
};
struct ofp13_queue_stats {
	struct ofp11_queue_stats   qs;                   /*     0    32 */
	ovs_be32                   duration_sec;         /*    32     4 */
	ovs_be32                   duration_nsec;        /*    36     4 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct ofp13_group_stats {
	struct ofp11_group_stats   gs;                   /*     0    32 */
	ovs_be32                   duration_sec;         /*    32     4 */
	ovs_be32                   duration_nsec;        /*    36     4 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct ofp13_meter_multipart_request {
	ovs_be32                   meter_id;             /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp13_meter_band_stats {
	ovs_be64                   packet_band_count;    /*     0     8 */
	ovs_be64                   byte_band_count;      /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofp13_meter_stats {
	ovs_be32                   meter_id;             /*     0     4 */
	ovs_be16                   len;                  /*     4     2 */
	uint8_t                    pad[6];               /*     6     6 */
	ovs_be32                   flow_count;           /*    12     4 */
	ovs_be64                   packet_in_count;      /*    16     8 */
	ovs_be64                   byte_in_count;        /*    24     8 */
	ovs_be32                   duration_sec;         /*    32     4 */
	ovs_be32                   duration_nsec;        /*    36     4 */
	struct ofp13_meter_band_stats band_stats[0];     /*    40     0 */

	/* size: 40, cachelines: 1, members: 9 */
	/* last cacheline: 40 bytes */
};
struct ofp13_meter_config {
	ovs_be16                   length;               /*     0     2 */
	ovs_be16                   flags;                /*     2     2 */
	ovs_be32                   meter_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp13_meter_features {
	ovs_be32                   max_meter;            /*     0     4 */
	ovs_be32                   band_types;           /*     4     4 */
	ovs_be32                   capabilities;         /*     8     4 */
	uint8_t                    max_bands;            /*    12     1 */
	uint8_t                    max_color;            /*    13     1 */
	uint8_t                    pad[2];               /*    14     2 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct ofp14_port_desc_prop_ethernet {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */
	ovs_be32                   curr;                 /*     8     4 */
	ovs_be32                   advertised;           /*    12     4 */
	ovs_be32                   supported;            /*    16     4 */
	ovs_be32                   peer;                 /*    20     4 */
	ovs_be32                   curr_speed;           /*    24     4 */
	ovs_be32                   max_speed;            /*    28     4 */

	/* size: 32, cachelines: 1, members: 9 */
	/* last cacheline: 32 bytes */
};
struct ofp14_port {
	ovs_be32                   port_no;              /*     0     4 */
	ovs_be16                   length;               /*     4     2 */
	uint8_t                    pad[2];               /*     6     2 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	char                       name[16];             /*    16    16 */
	ovs_be32                   config;               /*    32     4 */
	ovs_be32                   state;                /*    36     4 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct ofp14_port_mod {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	ovs_be32                   config;               /*    16     4 */
	ovs_be32                   mask;                 /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ofp14_table_mod_prop_vacancy {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	uint8_t                    vacancy_down;         /*     4     1 */
	uint8_t                    vacancy_up;           /*     5     1 */
	uint8_t                    vacancy;              /*     6     1 */
	uint8_t                    pad[1];               /*     7     1 */

	/* size: 8, cachelines: 1, members: 6 */
	/* last cacheline: 8 bytes */
};
struct ofp14_table_mod {
	uint8_t                    table_id;             /*     0     1 */
	uint8_t                    pad[3];               /*     1     3 */
	ovs_be32                   config;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp14_table_desc {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    table_id;             /*     2     1 */
	uint8_t                    pad[1];               /*     3     1 */
	ovs_be32                   config;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp14_table_status {
	uint8_t                    reason;               /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp14_port_stats_prop_ethernet {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */
	ovs_be64                   rx_frame_err;         /*     8     8 */
	ovs_be64                   rx_over_err;          /*    16     8 */
	ovs_be64                   rx_crc_err;           /*    24     8 */
	ovs_be64                   collisions;           /*    32     8 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ofp14_port_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    pad[2];               /*     2     2 */
	ovs_be32                   port_no;              /*     4     4 */
	ovs_be32                   duration_sec;         /*     8     4 */
	ovs_be32                   duration_nsec;        /*    12     4 */
	ovs_be64                   rx_packets;           /*    16     8 */
	ovs_be64                   tx_packets;           /*    24     8 */
	ovs_be64                   rx_bytes;             /*    32     8 */
	ovs_be64                   tx_bytes;             /*    40     8 */
	ovs_be64                   rx_dropped;           /*    48     8 */
	ovs_be64                   tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   rx_errors;            /*    64     8 */
	ovs_be64                   tx_errors;            /*    72     8 */

	/* size: 80, cachelines: 2, members: 13 */
	/* last cacheline: 16 bytes */
};
struct ofp14_queue_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    pad[6];               /*     2     6 */
	struct ofp13_queue_stats   qs;                   /*     8    40 */

	/* size: 48, cachelines: 1, members: 3 */
	/* last cacheline: 48 bytes */
};
struct ofp14_queue_desc_request {
	ovs_be32                   port;                 /*     0     4 */
	ovs_be32                   queue;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp14_queue_desc {
	ovs_be32                   port_no;              /*     0     4 */
	ovs_be32                   queue_id;             /*     4     4 */
	ovs_be16                   len;                  /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp14_role_status {
	ovs_be32                   role;                 /*     0     4 */
	uint8_t                    reason;               /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */
	ovs_be64                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp14_bundle_ctrl_msg {
	ovs_be32                   bundle_id;            /*     0     4 */
	ovs_be16                   type;                 /*     4     2 */
	ovs_be16                   flags;                /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp15_port_desc_request {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp15_bucket {
	ovs_be16                   len;                  /*     0     2 */
	ovs_be16                   action_array_len;     /*     2     2 */
	ovs_be32                   bucket_id;            /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp15_group_mod {
	ovs_be16                   command;              /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   group_id;             /*     4     4 */
	ovs_be16                   bucket_array_len;     /*     8     2 */
	uint8_t                    pad1[2];              /*    10     2 */
	ovs_be32                   command_bucket_id;    /*    12     4 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct ofp15_group_desc_request {
	ovs_be32                   group_id;             /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofp15_group_desc_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   group_id;             /*     4     4 */
	ovs_be16                   bucket_list_len;      /*     8     2 */
	uint8_t                    pad2[6];              /*    10     6 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct ofp15_packet_out {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be16                   actions_len;          /*     4     2 */
	uint8_t                    pad[2];               /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp16_port {
	ovs_be32                   port_no;              /*     0     4 */
	ovs_be16                   length;               /*     4     2 */
	uint8_t                    pad[2];               /*     6     2 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	struct eth_addr64          hw_addr64;            /*    16     8 */
	char                       name[64];             /*    24    64 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	ovs_be32                   config;               /*    88     4 */
	ovs_be32                   state;                /*    92     4 */

	/* size: 96, cachelines: 2, members: 9 */
	/* last cacheline: 32 bytes */
};
struct ofp16_port_mod {
	ovs_be32                   port_no;              /*     0     4 */
	uint8_t                    pad[4];               /*     4     4 */
	struct eth_addr            hw_addr;              /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	struct eth_addr64          hw_addr64;            /*    16     8 */
	ovs_be32                   config;               /*    24     4 */
	ovs_be32                   mask;                 /*    28     4 */

	/* size: 32, cachelines: 1, members: 7 */
	/* last cacheline: 32 bytes */
};
struct nx_flow_mod_table_id {
	uint8_t                    set;                  /*     0     1 */
	uint8_t                    pad[7];               /*     1     7 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nx_set_packet_in_format {
	ovs_be32                   format;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_packet_in {
	ovs_be32                   buffer_id;            /*     0     4 */
	ovs_be16                   total_len;            /*     4     2 */
	uint8_t                    reason;               /*     6     1 */
	uint8_t                    table_id;             /*     7     1 */
	ovs_be64                   cookie;               /*     8     8 */
	ovs_be16                   match_len;            /*    16     2 */
	uint8_t                    pad[6];               /*    18     6 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct nx_role_request {
	ovs_be32                   role;                 /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_async_config {
	ovs_be32                   packet_in_mask[2];    /*     0     8 */
	ovs_be32                   port_status_mask[2];  /*     8     8 */
	ovs_be32                   flow_removed_mask[2]; /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct nx_set_flow_format {
	ovs_be32                   format;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_flow_mod {
	ovs_be64                   cookie;               /*     0     8 */
	ovs_be16                   command;              /*     8     2 */
	ovs_be16                   idle_timeout;         /*    10     2 */
	ovs_be16                   hard_timeout;         /*    12     2 */
	ovs_be16                   priority;             /*    14     2 */
	ovs_be32                   buffer_id;            /*    16     4 */
	ovs_be16                   out_port;             /*    20     2 */
	ovs_be16                   flags;                /*    22     2 */
	ovs_be16                   match_len;            /*    24     2 */
	uint8_t                    pad[6];               /*    26     6 */

	/* size: 32, cachelines: 1, members: 10 */
	/* last cacheline: 32 bytes */
};
struct nx_flow_removed {
	ovs_be64                   cookie;               /*     0     8 */
	ovs_be16                   priority;             /*     8     2 */
	uint8_t                    reason;               /*    10     1 */
	uint8_t                    table_id;             /*    11     1 */
	ovs_be32                   duration_sec;         /*    12     4 */
	ovs_be32                   duration_nsec;        /*    16     4 */
	ovs_be16                   idle_timeout;         /*    20     2 */
	ovs_be16                   match_len;            /*    22     2 */
	ovs_be64                   packet_count;         /*    24     8 */
	ovs_be64                   byte_count;           /*    32     8 */

	/* size: 40, cachelines: 1, members: 10 */
	/* last cacheline: 40 bytes */
};
struct nx_flow_stats_request {
	ovs_be16                   out_port;             /*     0     2 */
	ovs_be16                   match_len;            /*     2     2 */
	uint8_t                    table_id;             /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct nx_flow_stats {
	ovs_be16                   length;               /*     0     2 */
	uint8_t                    table_id;             /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   duration_sec;         /*     4     4 */
	ovs_be32                   duration_nsec;        /*     8     4 */
	ovs_be16                   priority;             /*    12     2 */
	ovs_be16                   idle_timeout;         /*    14     2 */
	ovs_be16                   hard_timeout;         /*    16     2 */
	ovs_be16                   match_len;            /*    18     2 */
	ovs_be16                   idle_age;             /*    20     2 */
	ovs_be16                   hard_age;             /*    22     2 */
	ovs_be64                   cookie;               /*    24     8 */
	ovs_be64                   packet_count;         /*    32     8 */
	ovs_be64                   byte_count;           /*    40     8 */

	/* size: 48, cachelines: 1, members: 14 */
	/* last cacheline: 48 bytes */
};
struct nx_ipfix_stats_reply {
	ovs_be64                   total_flows;          /*     0     8 */
	ovs_be64                   current_flows;        /*     8     8 */
	ovs_be64                   pkts;                 /*    16     8 */
	ovs_be64                   ipv4_pkts;            /*    24     8 */
	ovs_be64                   ipv6_pkts;            /*    32     8 */
	ovs_be64                   error_pkts;           /*    40     8 */
	ovs_be64                   ipv4_error_pkts;      /*    48     8 */
	ovs_be64                   ipv6_error_pkts;      /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   tx_pkts;              /*    64     8 */
	ovs_be64                   tx_errors;            /*    72     8 */
	ovs_be32                   collector_set_id;     /*    80     4 */
	uint8_t                    pad[4];               /*    84     4 */

	/* size: 88, cachelines: 2, members: 12 */
	/* last cacheline: 24 bytes */
};
struct nx_flow_monitor_request {
	ovs_be32                   id;                   /*     0     4 */
	ovs_be16                   flags;                /*     4     2 */
	ovs_be16                   out_port;             /*     6     2 */
	ovs_be16                   match_len;            /*     8     2 */
	uint8_t                    table_id;             /*    10     1 */
	uint8_t                    zeros[5];             /*    11     5 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct nx_flow_update_header {
	ovs_be16                   length;               /*     0     2 */
	ovs_be16                   event;                /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct nx_flow_update_full {
	ovs_be16                   length;               /*     0     2 */
	ovs_be16                   event;                /*     2     2 */
	ovs_be16                   reason;               /*     4     2 */
	ovs_be16                   priority;             /*     6     2 */
	ovs_be16                   idle_timeout;         /*     8     2 */
	ovs_be16                   hard_timeout;         /*    10     2 */
	ovs_be16                   match_len;            /*    12     2 */
	uint8_t                    table_id;             /*    14     1 */
	uint8_t                    pad;                  /*    15     1 */
	ovs_be64                   cookie;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 10 */
	/* last cacheline: 24 bytes */
};
struct nx_flow_update_abbrev {
	ovs_be16                   length;               /*     0     2 */
	ovs_be16                   event;                /*     2     2 */
	ovs_be32                   xid;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct nx_flow_monitor_cancel {
	ovs_be32                   id;                   /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct nx_tlv_map {
	ovs_be16                   option_class;         /*     0     2 */
	uint8_t                    option_type;          /*     2     1 */
	uint8_t                    option_len;           /*     3     1 */
	ovs_be16                   index;                /*     4     2 */
	uint8_t                    pad[2];               /*     6     2 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct nx_tlv_table_mod {
	ovs_be16                   command;              /*     0     2 */
	uint8_t                    pad[6];               /*     2     6 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nx_tlv_table_reply {
	ovs_be32                   max_option_space;     /*     0     4 */
	ovs_be16                   max_fields;           /*     4     2 */
	uint8_t                    reserved[10];         /*     6    10 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct mf_bitmap {
	long unsigned int          bm[3];                /*     0    24 */

	/* size: 24, cachelines: 1, members: 1 */
	/* last cacheline: 24 bytes */
};
struct field_array {
	struct mf_bitmap           used;                 /*     0    24 */
	size_t                     values_size;          /*    24     8 */
	uint8_t *                  values;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct ntr_group_prop_selection_method {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	ovs_be32                   experimenter;         /*     4     4 */
	ovs_be32                   exp_type;             /*     8     4 */
	ovs_be32                   pad;                  /*    12     4 */
	char                       selection_method[16]; /*    16    16 */
	ovs_be64                   selection_method_param; /*    32     8 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ofputil_port_map {
	struct hmap                by_name;              /*     0    32 */
	struct hmap                by_number;            /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 2 */
};
struct ofputil_flow_mod {
	struct ovs_list            list_node;            /*     0    16 */
	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	int                        priority;             /*  3416     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   cookie;               /*  3424     8 */
	ovs_be64                   cookie_mask;          /*  3432     8 */
	ovs_be64                   new_cookie;           /*  3440     8 */
	_Bool                      modify_cookie;        /*  3448     1 */
	uint8_t                    table_id;             /*  3449     1 */
	uint16_t                   command;              /*  3450     2 */
	uint16_t                   idle_timeout;         /*  3452     2 */
	uint16_t                   hard_timeout;         /*  3454     2 */
	/* --- cacheline 54 boundary (3456 bytes) --- */
	uint32_t                   buffer_id;            /*  3456     4 */
	ofp_port_t                 out_port;             /*  3460     4 */
	uint32_t                   out_group;            /*  3464     4 */
	enum ofputil_flow_mod_flags flags;               /*  3468     4 */
	uint16_t                   importance;           /*  3472     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofpact *            ofpacts;              /*  3480     8 */
	size_t                     ofpacts_len;          /*  3488     8 */
	uint64_t                   ofpacts_tlv_bitmap;   /*  3496     8 */

	/* size: 3504, cachelines: 55, members: 19 */
	/* sum members: 3494, holes: 2, sum holes: 10 */
	/* last cacheline: 48 bytes */
};
struct ofpact {
	enum ofpact_type           type;                 /*     0     1 */
	uint8_t                    raw;                  /*     1     1 */
	uint16_t                   len;                  /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofputil_flow_stats_request {
	_Bool                      aggregate;            /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	struct match               match;                /*     8  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 16 bytes ago --- */
	ovs_be64                   cookie;               /*  3408     8 */
	ovs_be64                   cookie_mask;          /*  3416     8 */
	ofp_port_t                 out_port;             /*  3424     4 */
	uint32_t                   out_group;            /*  3428     4 */
	uint8_t                    table_id;             /*  3432     1 */

	/* size: 3440, cachelines: 54, members: 7 */
	/* sum members: 3426, holes: 1, sum holes: 7 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct ofputil_flow_stats {
	struct match               match;                /*     0  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */
	ovs_be64                   cookie;               /*  3400     8 */
	uint8_t                    table_id;             /*  3408     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   priority;             /*  3410     2 */
	uint16_t                   idle_timeout;         /*  3412     2 */
	uint16_t                   hard_timeout;         /*  3414     2 */
	uint32_t                   duration_sec;         /*  3416     4 */
	uint32_t                   duration_nsec;        /*  3420     4 */
	int                        idle_age;             /*  3424     4 */
	int                        hard_age;             /*  3428     4 */
	uint64_t                   packet_count;         /*  3432     8 */
	uint64_t                   byte_count;           /*  3440     8 */
	const struct ofpact  *     ofpacts;              /*  3448     8 */
	/* --- cacheline 54 boundary (3456 bytes) --- */
	size_t                     ofpacts_len;          /*  3456     8 */
	enum ofputil_flow_mod_flags flags;               /*  3464     4 */
	uint16_t                   importance;           /*  3468     2 */

	/* size: 3472, cachelines: 55, members: 16 */
	/* sum members: 3469, holes: 1, sum holes: 1 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_aggregate_stats {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */
	uint32_t                   flow_count;           /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ofputil_flow_removed {
	struct match               match;                /*     0  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 8 bytes ago --- */
	ovs_be64                   cookie;               /*  3400     8 */
	uint16_t                   priority;             /*  3408     2 */
	uint8_t                    reason;               /*  3410     1 */
	uint8_t                    table_id;             /*  3411     1 */
	uint32_t                   duration_sec;         /*  3412     4 */
	uint32_t                   duration_nsec;        /*  3416     4 */
	uint16_t                   idle_timeout;         /*  3420     2 */
	uint16_t                   hard_timeout;         /*  3422     2 */
	uint64_t                   packet_count;         /*  3424     8 */
	uint64_t                   byte_count;           /*  3432     8 */

	/* size: 3440, cachelines: 54, members: 11 */
	/* last cacheline: 48 bytes */
};
struct ofputil_packet_in {
	void *                     packet;               /*     0     8 */
	size_t                     packet_len;           /*     8     8 */
	struct match               flow_metadata;        /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */
	enum ofp_packet_in_reason  reason;               /*  3416     4 */
	uint8_t                    table_id;             /*  3420     1 */

	/* XXX 3 bytes hole, try to pack */

	ovs_be64                   cookie;               /*  3424     8 */
	uint8_t *                  userdata;             /*  3432     8 */
	size_t                     userdata_len;         /*  3440     8 */

	/* size: 3448, cachelines: 54, members: 8 */
	/* sum members: 3445, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct ofputil_packet_in_private {
	struct ofputil_packet_in   base;                 /*     0  3448 */
	/* --- cacheline 53 boundary (3392 bytes) was 56 bytes ago --- */
	struct uuid                bridge;               /*  3448    16 */
	/* --- cacheline 54 boundary (3456 bytes) was 8 bytes ago --- */
	uint8_t *                  stack;                /*  3464     8 */
	size_t                     stack_size;           /*  3472     8 */
	uint32_t                   mirrors;              /*  3480     4 */
	_Bool                      conntracked;          /*  3484     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ofpact *            actions;              /*  3488     8 */
	size_t                     actions_len;          /*  3496     8 */
	struct ofpact *            action_set;           /*  3504     8 */
	size_t                     action_set_len;       /*  3512     8 */
	/* --- cacheline 55 boundary (3520 bytes) --- */

	/* size: 3520, cachelines: 55, members: 10 */
	/* sum members: 3517, holes: 1, sum holes: 3 */
};
struct ofputil_packet_out {
	const void  *              packet;               /*     0     8 */
	size_t                     packet_len;           /*     8     8 */
	uint32_t                   buffer_id;            /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct match               flow_metadata;        /*    24  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 32 bytes ago --- */
	struct ofpact *            ofpacts;              /*  3424     8 */
	size_t                     ofpacts_len;          /*  3432     8 */

	/* size: 3440, cachelines: 54, members: 6 */
	/* sum members: 3436, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofputil_switch_config {
	enum ofputil_frag_handling frag;                 /*     0     4 */
	int                        invalid_ttl_to_controller; /*     4     4 */
	uint16_t                   miss_send_len;        /*     8     2 */

	/* size: 12, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofputil_phy_port {
	ofp_port_t                 port_no;              /*     0     4 */
	struct eth_addr            hw_addr;              /*     4     6 */
	struct eth_addr64          hw_addr64;            /*    10     8 */
	char                       name[64];             /*    18    64 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) was 20 bytes ago --- */
	enum ofputil_port_config   config;               /*    84     4 */
	enum ofputil_port_state    state;                /*    88     4 */
	enum netdev_features       curr;                 /*    92     4 */
	enum netdev_features       advertised;           /*    96     4 */
	enum netdev_features       supported;            /*   100     4 */
	enum netdev_features       peer;                 /*   104     4 */
	uint32_t                   curr_speed;           /*   108     4 */
	uint32_t                   max_speed;            /*   112     4 */

	/* size: 116, cachelines: 2, members: 12 */
	/* sum members: 114, holes: 1, sum holes: 2 */
	/* last cacheline: 52 bytes */
};
struct ofputil_switch_features {
	uint64_t                   datapath_id;          /*     0     8 */
	uint32_t                   n_buffers;            /*     8     4 */
	uint8_t                    n_tables;             /*    12     1 */
	uint8_t                    auxiliary_id;         /*    13     1 */

	/* XXX 2 bytes hole, try to pack */

	enum ofputil_capabilities  capabilities;         /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   ofpacts;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 26, holes: 2, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct ofputil_port_status {
	enum ofp_port_reason       reason;               /*     0     4 */
	struct ofputil_phy_port    desc;                 /*     4   116 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */

	/* size: 120, cachelines: 2, members: 2 */
	/* last cacheline: 56 bytes */
};
struct ofputil_port_mod {
	ofp_port_t                 port_no;              /*     0     4 */
	struct eth_addr            hw_addr;              /*     4     6 */
	struct eth_addr64          hw_addr64;            /*    10     8 */

	/* XXX 2 bytes hole, try to pack */

	enum ofputil_port_config   config;               /*    20     4 */
	enum ofputil_port_config   mask;                 /*    24     4 */
	enum netdev_features       advertise;            /*    28     4 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_mod_prop_vacancy {
	uint8_t                    vacancy_down;         /*     0     1 */
	uint8_t                    vacancy_up;           /*     1     1 */
	uint8_t                    vacancy;              /*     2     1 */

	/* size: 3, cachelines: 1, members: 3 */
	/* last cacheline: 3 bytes */
};
struct ofputil_table_mod {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofputil_table_miss    miss;                 /*     4     4 */
	enum ofputil_table_eviction eviction;            /*     8     4 */
	uint32_t                   eviction_flags;       /*    12     4 */
	enum ofputil_table_vacancy vacancy;              /*    16     4 */
	struct ofputil_table_mod_prop_vacancy table_vacancy; /*    20     3 */

	/* size: 24, cachelines: 1, members: 6 */
	/* sum members: 20, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 24 bytes */
};
struct ofputil_table_desc {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	enum ofputil_table_eviction eviction;            /*     4     4 */
	uint32_t                   eviction_flags;       /*     8     4 */
	enum ofputil_table_vacancy vacancy;              /*    12     4 */
	struct ofputil_table_mod_prop_vacancy table_vacancy; /*    16     3 */

	/* size: 20, cachelines: 1, members: 5 */
	/* sum members: 16, holes: 1, sum holes: 3 */
	/* padding: 1 */
	/* last cacheline: 20 bytes */
};
struct ofputil_table_action_features {
	uint64_t                   ofpacts;              /*     0     8 */
	struct mf_bitmap           set_fields;           /*     8    24 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct ofputil_table_instruction_features {
	long unsigned int          next[4];              /*     0    32 */
	uint32_t                   instructions;         /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofputil_table_action_features write;      /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ofputil_table_action_features apply;      /*    72    32 */

	/* size: 104, cachelines: 2, members: 4 */
	/* sum members: 100, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofputil_table_features {
	uint8_t                    table_id;             /*     0     1 */
	char                       name[32];             /*     1    32 */

	/* XXX 7 bytes hole, try to pack */

	ovs_be64                   metadata_match;       /*    40     8 */
	ovs_be64                   metadata_write;       /*    48     8 */
	uint32_t                   max_entries;          /*    56     4 */
	enum ofputil_table_miss    miss_config;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        supports_eviction;    /*    64     4 */
	int                        supports_vacancy_events; /*    68     4 */
	struct ofputil_table_instruction_features nonmiss; /*    72   104 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */
	struct ofputil_table_instruction_features miss;  /*   176   104 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	struct mf_bitmap           match;                /*   280    24 */
	struct mf_bitmap           mask;                 /*   304    24 */
	/* --- cacheline 5 boundary (320 bytes) was 8 bytes ago --- */
	struct mf_bitmap           wildcard;             /*   328    24 */

	/* size: 352, cachelines: 6, members: 13 */
	/* sum members: 345, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ofputil_meter_band {
	uint16_t                   type;                 /*     0     2 */
	uint8_t                    prec_level;           /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   rate;                 /*     4     4 */
	uint32_t                   burst_size;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* sum members: 11, holes: 1, sum holes: 1 */
	/* last cacheline: 12 bytes */
};
struct ofputil_meter_band_stats {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_config {
	uint32_t                   meter_id;             /*     0     4 */
	uint16_t                   flags;                /*     4     2 */
	uint16_t                   n_bands;              /*     6     2 */
	struct ofputil_meter_band * bands;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofputil_meter_mod {
	uint16_t                   command;              /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofputil_meter_config meter;               /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 18, holes: 1, sum holes: 6 */
	/* last cacheline: 24 bytes */
};
struct ofputil_meter_stats {
	uint32_t                   meter_id;             /*     0     4 */
	uint32_t                   flow_count;           /*     4     4 */
	uint64_t                   packet_in_count;      /*     8     8 */
	uint64_t                   byte_in_count;        /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint16_t                   n_bands;              /*    32     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ofputil_meter_band_stats * bands;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ofputil_meter_features {
	uint32_t                   max_meters;           /*     0     4 */
	uint32_t                   band_types;           /*     4     4 */
	uint32_t                   capabilities;         /*     8     4 */
	uint8_t                    max_bands;            /*    12     1 */
	uint8_t                    max_color;            /*    13     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_role_request {
	enum ofp12_controller_role role;                 /*     0     4 */
	_Bool                      have_generation_id;   /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	uint64_t                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_role_status {
	enum ofp12_controller_role role;                 /*     0     4 */
	enum ofp14_controller_role_reason reason;        /*     4     4 */
	uint64_t                   generation_id;        /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_table_stats {
	uint8_t                    table_id;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   active_count;         /*     4     4 */
	uint64_t                   lookup_count;         /*     8     8 */
	uint64_t                   matched_count;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ofputil_queue_config {
	ofp_port_t                 port;                 /*     0     4 */
	uint32_t                   queue;                /*     4     4 */
	uint16_t                   min_rate;             /*     8     2 */
	uint16_t                   max_rate;             /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct ofputil_flow_monitor_request {
	uint32_t                   id;                   /*     0     4 */
	enum nx_flow_monitor_flags flags;                /*     4     4 */
	ofp_port_t                 out_port;             /*     8     4 */
	uint8_t                    table_id;             /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	struct match               match;                /*    16  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 24 bytes ago --- */

	/* size: 3416, cachelines: 54, members: 5 */
	/* sum members: 3413, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ofputil_flow_update {
	enum nx_flow_update_event  event;                /*     0     4 */
	enum ofp_flow_removed_reason reason;             /*     4     4 */
	uint16_t                   idle_timeout;         /*     8     2 */
	uint16_t                   hard_timeout;         /*    10     2 */
	uint8_t                    table_id;             /*    12     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   priority;             /*    14     2 */
	ovs_be64                   cookie;               /*    16     8 */
	struct match               match;                /*    24  3400 */
	/* --- cacheline 53 boundary (3392 bytes) was 32 bytes ago --- */
	const struct ofpact  *     ofpacts;              /*  3424     8 */
	size_t                     ofpacts_len;          /*  3432     8 */
	ovs_be32                   xid;                  /*  3440     4 */

	/* size: 3448, cachelines: 54, members: 11 */
	/* sum members: 3443, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct ofputil_port_stats {
	ofp_port_t                 port_no;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev_stats        stats;                /*     8   336 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	uint32_t                   duration_sec;         /*   344     4 */
	uint32_t                   duration_nsec;        /*   348     4 */

	/* size: 352, cachelines: 6, members: 4 */
	/* sum members: 348, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct ofputil_ipfix_stats {
	uint32_t                   collector_set_id;     /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   total_flows;          /*     8     8 */
	uint64_t                   current_flows;        /*    16     8 */
	uint64_t                   pkts;                 /*    24     8 */
	uint64_t                   ipv4_pkts;            /*    32     8 */
	uint64_t                   ipv6_pkts;            /*    40     8 */
	uint64_t                   error_pkts;           /*    48     8 */
	uint64_t                   ipv4_error_pkts;      /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   ipv6_error_pkts;      /*    64     8 */
	uint64_t                   tx_pkts;              /*    72     8 */
	uint64_t                   tx_errors;            /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 84, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofputil_queue_stats_request {
	ofp_port_t                 port_no;              /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofputil_queue_stats {
	ofp_port_t                 port_no;              /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */
	uint64_t                   tx_bytes;             /*     8     8 */
	uint64_t                   tx_packets;           /*    16     8 */
	uint64_t                   tx_errors;            /*    24     8 */
	uint32_t                   duration_sec;         /*    32     4 */
	uint32_t                   duration_nsec;        /*    36     4 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct bucket_counter {
	uint64_t                   packet_count;         /*     0     8 */
	uint64_t                   byte_count;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_bucket {
	struct ovs_list            list_node;            /*     0    16 */
	uint16_t                   weight;               /*    16     2 */

	/* XXX 2 bytes hole, try to pack */

	ofp_port_t                 watch_port;           /*    20     4 */
	uint32_t                   watch_group;          /*    24     4 */
	uint32_t                   bucket_id;            /*    28     4 */
	struct ofpact *            ofpacts;              /*    32     8 */
	size_t                     ofpacts_len;          /*    40     8 */
	struct bucket_counter      stats;                /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
	/* sum members: 62, holes: 1, sum holes: 2 */
};
struct ofputil_group_props {
	char                       selection_method[16]; /*     0    16 */
	uint64_t                   selection_method_param; /*    16     8 */
	struct field_array         fields;               /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 3 */
};
struct ofputil_group_mod {
	uint16_t                   command;              /*     0     2 */
	uint8_t                    type;                 /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	uint32_t                   group_id;             /*     4     4 */
	uint32_t                   command_bucket_id;    /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            buckets;              /*    16    16 */
	struct ofputil_group_props props;                /*    32    64 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 6 */
	/* sum members: 91, holes: 2, sum holes: 5 */
	/* last cacheline: 32 bytes */
};
struct ofputil_group_stats {
	uint32_t                   group_id;             /*     0     4 */
	uint32_t                   ref_count;            /*     4     4 */
	uint64_t                   packet_count;         /*     8     8 */
	uint64_t                   byte_count;           /*    16     8 */
	uint32_t                   duration_sec;         /*    24     4 */
	uint32_t                   duration_nsec;        /*    28     4 */
	uint32_t                   n_buckets;            /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct bucket_counter *    bucket_stats;         /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ofputil_group_features {
	uint32_t                   types;                /*     0     4 */
	uint32_t                   capabilities;         /*     4     4 */
	uint32_t                   max_groups[4];        /*     8    16 */
	uint64_t                   ofpacts[4];           /*    24    32 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct ofputil_group_desc {
	uint8_t                    type;                 /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   group_id;             /*     4     4 */
	struct ovs_list            buckets;              /*     8    16 */
	struct ofputil_group_props props;                /*    24    64 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 4 */
	/* sum members: 85, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct ofputil_bundle_ctrl_msg {
	uint32_t                   bundle_id;            /*     0     4 */
	uint16_t                   type;                 /*     4     2 */
	uint16_t                   flags;                /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofputil_bundle_add_msg {
	uint32_t                   bundle_id;            /*     0     4 */
	uint16_t                   flags;                /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	const struct ofp_header  * msg;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 14, holes: 1, sum holes: 2 */
	/* last cacheline: 16 bytes */
};
struct ofputil_bundle_msg {
	enum ofptype               type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		struct ofputil_flow_mod fm;              /*        3504 */
		struct ofputil_group_mod gm;             /*          96 */
		struct ofputil_packet_out po;            /*        3440 */
	};                                               /*     8  3504 */
	/* --- cacheline 54 boundary (3456 bytes) was 56 bytes ago --- */

	/* size: 3512, cachelines: 55, members: 2 */
	/* sum members: 3508, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct ofputil_tlv_map {
	struct ovs_list            list_node;            /*     0    16 */
	uint16_t                   option_class;         /*    16     2 */
	uint8_t                    option_type;          /*    18     1 */
	uint8_t                    option_len;           /*    19     1 */
	uint16_t                   index;                /*    20     2 */

	/* size: 24, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 24 bytes */
};
struct ofputil_tlv_table_mod {
	uint16_t                   command;              /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	struct ovs_list            mappings;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 18, holes: 1, sum holes: 6 */
	/* last cacheline: 24 bytes */
};
struct ofputil_tlv_table_reply {
	uint32_t                   max_option_space;     /*     0     4 */
	uint16_t                   max_fields;           /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_list            mappings;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 22, holes: 1, sum holes: 2 */
	/* last cacheline: 24 bytes */
};
struct ofputil_async_cfg {
	uint32_t                   master[6];            /*     0    24 */
	uint32_t                   slave[6];             /*    24    24 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ofputil_requestforward {
	ovs_be32                   xid;                  /*     0     4 */
	enum ofp14_requestforward_reason reason;         /*     4     4 */
	union {
		struct {
			struct ofputil_meter_mod * meter_mod; /*     8     8 */
			struct ofpbuf bands;             /*    16    64 */

			/* XXX last struct has 7 bytes of padding */

			/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
		};                                       /*          72 */
		struct ofputil_group_mod * group_mod;    /*           8 */
	};                                               /*     8    72 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */

	/* size: 80, cachelines: 2, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofputil_table_status {
	enum ofp14_table_reason    reason;               /*     0     4 */
	struct ofputil_table_desc  desc;                 /*     4    20 */

	/* XXX last struct has 1 byte of padding */

	/* size: 24, cachelines: 1, members: 2 */
	/* paddings: 1, sum paddings: 1 */
	/* last cacheline: 24 bytes */
};
struct ofpact_unroll_xlate {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    rule_table_id;        /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	ovs_be64                   rule_cookie;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 13, holes: 1, sum holes: 3 */
	/* last cacheline: 16 bytes */
};
struct intel_port_stats_rfc2819 {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   length;               /*     2     2 */
	ovs_be32                   experimenter;         /*     4     4 */
	ovs_be32                   exp_type;             /*     8     4 */
	uint8_t                    pad[4];               /*    12     4 */
	ovs_be64                   rx_1_to_64_packets;   /*    16     8 */
	ovs_be64                   rx_65_to_127_packets; /*    24     8 */
	ovs_be64                   rx_128_to_255_packets; /*    32     8 */
	ovs_be64                   rx_256_to_511_packets; /*    40     8 */
	ovs_be64                   rx_512_to_1023_packets; /*    48     8 */
	ovs_be64                   rx_1024_to_1522_packets; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_be64                   rx_1523_to_max_packets; /*    64     8 */
	ovs_be64                   tx_1_to_64_packets;   /*    72     8 */
	ovs_be64                   tx_65_to_127_packets; /*    80     8 */
	ovs_be64                   tx_128_to_255_packets; /*    88     8 */
	ovs_be64                   tx_256_to_511_packets; /*    96     8 */
	ovs_be64                   tx_512_to_1023_packets; /*   104     8 */
	ovs_be64                   tx_1024_to_1522_packets; /*   112     8 */
	ovs_be64                   tx_1523_to_max_packets; /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	ovs_be64                   tx_multicast_packets; /*   128     8 */
	ovs_be64                   rx_broadcast_packets; /*   136     8 */
	ovs_be64                   tx_broadcast_packets; /*   144     8 */
	ovs_be64                   rx_undersized_errors; /*   152     8 */
	ovs_be64                   rx_oversize_errors;   /*   160     8 */
	ovs_be64                   rx_fragmented_errors; /*   168     8 */
	ovs_be64                   rx_jabber_errors;     /*   176     8 */

	/* size: 184, cachelines: 3, members: 26 */
	/* last cacheline: 56 bytes */
};
struct proto_abbrev {
	enum ofputil_protocol      protocol;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ofputil_flow_mod_flag {
	uint16_t                   raw_flag;             /*     0     2 */

	/* XXX 2 bytes hole, try to pack */

	enum ofp_version           min_version;          /*     4     4 */
	enum ofp_version           max_version;          /*     8     4 */
	enum ofputil_flow_mod_flags flag;                /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* sum members: 14, holes: 1, sum holes: 2 */
	/* last cacheline: 16 bytes */
};
struct ofp10_wc_map {
	enum ofp10_flow_wildcards  wc10;                 /*     0     4 */
	enum mf_field_id           mf;                   /*     4     1 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp11_wc_map {
	enum ofp11_flow_match_fields wc11;               /*     0     4 */
	enum mf_field_id           mf;                   /*     4     1 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct ofputil_port_map_node {
	struct hmap_node           name_node;            /*     0    16 */
	struct hmap_node           number_node;          /*    16    16 */
	ofp_port_t                 ofp_port;             /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     name;                 /*    40     8 */
	_Bool                      duplicate;            /*    48     1 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 45, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 56 bytes */
};
struct ofp14_async_prop {
	uint64_t                   prop_type;            /*     0     8 */
	enum ofputil_async_msg_type oam;                 /*     8     4 */
	_Bool                      master;               /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   allowed10;            /*    16     4 */
	uint32_t                   allowed14;            /*    20     4 */

	/* size: 24, cachelines: 1, members: 5 */
	/* sum members: 21, holes: 1, sum holes: 3 */
	/* last cacheline: 24 bytes */
};
struct icmp6_hdr {
	uint8_t                    icmp6_type;           /*     0     1 */
	uint8_t                    icmp6_code;           /*     1     1 */
	uint16_t                   icmp6_cksum;          /*     2     2 */
	union {
		uint32_t           icmp6_un_data32[1];   /*           4 */
		uint16_t           icmp6_un_data16[2];   /*           4 */
		uint8_t            icmp6_un_data8[4];    /*           4 */
	} icmp6_dataun;                                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct nsh_md1_ctx {
	ovs_16aligned_be32         c[4];                 /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct nsh_md2_tlv {
	ovs_be16                   md_class;             /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    length;               /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct nsh_hdr {
	ovs_be16                   ver_flags_ttl_len;    /*     0     2 */
	uint8_t                    md_type;              /*     2     1 */
	uint8_t                    next_proto;           /*     3     1 */
	ovs_16aligned_be32         path_hdr;             /*     4     4 */
	union {
		struct nsh_md1_ctx md1;                  /*          16 */
		struct nsh_md2_tlv md2;                  /*           4 */
	};                                               /*     8    16 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct llc_header {
	uint8_t                    llc_dsap;             /*     0     1 */
	uint8_t                    llc_ssap;             /*     1     1 */
	uint8_t                    llc_cntl;             /*     2     1 */

	/* size: 3, cachelines: 1, members: 3 */
	/* last cacheline: 3 bytes */
};
struct snap_header {
	uint8_t                    snap_org[3];          /*     0     3 */
	ovs_be16                   snap_type;            /*     3     2 */

	/* size: 5, cachelines: 1, members: 2 */
	/* last cacheline: 5 bytes */
};
struct llc_snap_header {
	struct llc_header          llc;                  /*     0     3 */
	struct snap_header         snap;                 /*     3     5 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct mpls_hdr {
	ovs_16aligned_be32         mpls_lse;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ip_header {
	uint8_t                    ip_ihl_ver;           /*     0     1 */
	uint8_t                    ip_tos;               /*     1     1 */
	ovs_be16                   ip_tot_len;           /*     2     2 */
	ovs_be16                   ip_id;                /*     4     2 */
	ovs_be16                   ip_frag_off;          /*     6     2 */
	uint8_t                    ip_ttl;               /*     8     1 */
	uint8_t                    ip_proto;             /*     9     1 */
	ovs_be16                   ip_csum;              /*    10     2 */
	ovs_16aligned_be32         ip_src;               /*    12     4 */
	ovs_16aligned_be32         ip_dst;               /*    16     4 */

	/* size: 20, cachelines: 1, members: 10 */
	/* last cacheline: 20 bytes */
};
struct icmp_header {
	uint8_t                    icmp_type;            /*     0     1 */
	uint8_t                    icmp_code;            /*     1     1 */
	ovs_be16                   icmp_csum;            /*     2     2 */
	union {
		struct {
			ovs_be16   id;                   /*     4     2 */
			ovs_be16   seq;                  /*     6     2 */
		} echo;                                  /*           4 */
		struct {
			ovs_be16   empty;                /*     4     2 */
			ovs_be16   mtu;                  /*     6     2 */
		} frag;                                  /*           4 */
		ovs_16aligned_be32 gateway;              /*           4 */
	} icmp_fields;                                   /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct igmp_header {
	uint8_t                    igmp_type;            /*     0     1 */
	uint8_t                    igmp_code;            /*     1     1 */
	ovs_be16                   igmp_csum;            /*     2     2 */
	ovs_16aligned_be32         group;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct sctp_header {
	ovs_be16                   sctp_src;             /*     0     2 */
	ovs_be16                   sctp_dst;             /*     2     2 */
	ovs_16aligned_be32         sctp_vtag;            /*     4     4 */
	ovs_16aligned_be32         sctp_csum;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct udp_header {
	ovs_be16                   udp_src;              /*     0     2 */
	ovs_be16                   udp_dst;              /*     2     2 */
	ovs_be16                   udp_len;              /*     4     2 */
	ovs_be16                   udp_csum;             /*     6     2 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct tcp_header {
	ovs_be16                   tcp_src;              /*     0     2 */
	ovs_be16                   tcp_dst;              /*     2     2 */
	ovs_16aligned_be32         tcp_seq;              /*     4     4 */
	ovs_16aligned_be32         tcp_ack;              /*     8     4 */
	ovs_be16                   tcp_ctl;              /*    12     2 */
	ovs_be16                   tcp_winsz;            /*    14     2 */
	ovs_be16                   tcp_csum;             /*    16     2 */
	ovs_be16                   tcp_urg;              /*    18     2 */

	/* size: 20, cachelines: 1, members: 8 */
	/* last cacheline: 20 bytes */
};
struct arp_eth_header {
	ovs_be16                   ar_hrd;               /*     0     2 */
	ovs_be16                   ar_pro;               /*     2     2 */
	uint8_t                    ar_hln;               /*     4     1 */
	uint8_t                    ar_pln;               /*     5     1 */
	ovs_be16                   ar_op;                /*     6     2 */
	struct eth_addr            ar_sha;               /*     8     6 */
	ovs_16aligned_be32         ar_spa;               /*    14     4 */
	struct eth_addr            ar_tha;               /*    18     6 */
	ovs_16aligned_be32         ar_tpa;               /*    24     4 */

	/* size: 28, cachelines: 1, members: 9 */
	/* last cacheline: 28 bytes */
};
struct ovs_16aligned_ip6_hdrctl {
	ovs_16aligned_be32         ip6_un1_flow;         /*     0     4 */
	ovs_be16                   ip6_un1_plen;         /*     4     2 */
	uint8_t                    ip6_un1_nxt;          /*     6     1 */
	uint8_t                    ip6_un1_hlim;         /*     7     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ovs_16aligned_ip6_hdr {
	union {
		struct ovs_16aligned_ip6_hdrctl ip6_un1; /*           8 */
		uint8_t            ip6_un2_vfc;          /*           1 */
	} ip6_ctlun;                                     /*     0     8 */
	union ovs_16aligned_in6_addr ip6_src;            /*     8    16 */
	union ovs_16aligned_in6_addr ip6_dst;            /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct ovs_16aligned_ip6_frag {
	uint8_t                    ip6f_nxt;             /*     0     1 */
	uint8_t                    ip6f_reserved;        /*     1     1 */
	ovs_be16                   ip6f_offlg;           /*     2     2 */
	ovs_16aligned_be32         ip6f_ident;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ovs_nd_lla_opt {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    len;                  /*     1     1 */
	struct eth_addr            mac;                  /*     2     6 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct flowmap {
	map_t                      bits[2];              /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct flowmap_aux {
	size_t                     unit;                 /*     0     8 */
	struct flowmap             map;                  /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct miniflow {
	struct flowmap             map;                  /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct mf_for_each_in_map_aux {
	size_t                     unit;                 /*     0     8 */
	struct flowmap             fmap;                 /*     8    16 */
	struct flowmap             map;                  /*    24    16 */
	const uint64_t  *          values;               /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct minimask {
	struct miniflow            masks;                /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct ip6_ext {
	uint8_t                    ip6e_nxt;             /*     0     1 */
	uint8_t                    ip6e_len;             /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct colors {
	char *                     actions;              /*     0     8 */
	char *                     drop;                 /*     8     8 */
	char *                     learn;                /*    16     8 */
	char *                     param;                /*    24     8 */
	char *                     paren;                /*    32     8 */
	char *                     special;              /*    40     8 */
	char *                     value;                /*    48     8 */
	char *                     end;                  /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct mf_ctx {
	struct flowmap             map;                  /*     0    16 */
	uint64_t *                 data;                 /*    16     8 */
	uint64_t *const            end;                  /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct syslogger {
	const struct syslog_class  * class;              /*     0     8 */
	const char  *              prefix;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct syslog_class {
	void                       (*openlog)(struct syslogger *, int); /*     0     8 */
	void                       (*syslog)(struct syslogger *, int, const char  *); /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct syslog_direct {
	struct syslogger           parent;               /*     0    16 */
	int                        fd;                   /*    16     4 */
	int                        facility;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct guarded_list {
	struct ovs_mutex           mutex;                /*     0    48 */
	struct ovs_list            list;                 /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	size_t                     n;                    /*    64     8 */

	/* size: 72, cachelines: 2, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ovsrcu_cb {
	void                       (*function)(void *);  /*     0     8 */
	void *                     aux;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsrcu_cbset {
	struct ovs_list            list_node;            /*     0    16 */
	struct ovsrcu_cb           cbs[16];              /*    16   256 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	int                        n_cbs;                /*   272     4 */

	/* size: 280, cachelines: 5, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsrcu_perthread {
	struct ovs_list            list_node;            /*     0    16 */
	struct ovs_mutex           mutex;                /*    16    48 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	uint64_t                   seqno;                /*    64     8 */
	struct ovsrcu_cbset *      cbset;                /*    72     8 */
	char                       name[16];             /*    80    16 */

	/* size: 96, cachelines: 2, members: 5 */
	/* last cacheline: 32 bytes */
};
struct sockaddr {
	sa_family_t                sa_family;            /*     0     2 */
	char                       sa_data[14];          /*     2    14 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct sockaddr_in {
	sa_family_t                sin_family;           /*     0     2 */
	in_port_t                  sin_port;             /*     2     2 */
	struct in_addr             sin_addr;             /*     4     4 */
	unsigned char              sin_zero[8];          /*     8     8 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct sockaddr_in6 {
	sa_family_t                sin6_family;          /*     0     2 */
	in_port_t                  sin6_port;            /*     2     2 */
	uint32_t                   sin6_flowinfo;        /*     4     4 */
	struct in6_addr            sin6_addr;            /*     8    16 */
	uint32_t                   sin6_scope_id;        /*    24     4 */

	/* size: 28, cachelines: 1, members: 5 */
	/* last cacheline: 28 bytes */
};
struct netdev_queue_dump {
	struct netdev *            netdev;               /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ifaddrs {
	struct ifaddrs *           ifa_next;             /*     0     8 */
	char *                     ifa_name;             /*     8     8 */
	unsigned int               ifa_flags;            /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sockaddr *          ifa_addr;             /*    24     8 */
	struct sockaddr *          ifa_netmask;          /*    32     8 */
	union {
		struct sockaddr *  ifu_broadaddr;        /*           8 */
		struct sockaddr *  ifu_dstaddr;          /*           8 */
	} ifa_ifu;                                       /*    40     8 */
	void *                     ifa_data;             /*    48     8 */

	/* size: 56, cachelines: 1, members: 7 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct dpif_port {
	char *                     name;                 /*     0     8 */
	char *                     type;                 /*     8     8 */
	odp_port_t                 port_no;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct netdev_saved_flags {
	struct netdev *            netdev;               /*     0     8 */
	struct ovs_list            node;                 /*     8    16 */
	enum netdev_flags          saved_flags;          /*    24     4 */
	enum netdev_flags          saved_values;         /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct netdev_registered_class {
	struct cmap_node           cmap_node;            /*     0     8 */
	const struct netdev_class  * class;              /*     8     8 */
	struct ovs_refcount        refcnt;               /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct port_to_netdev_data {
	struct hmap_node           portno_node;          /*     0    16 */
	struct hmap_node           ifindex_node;         /*    16    16 */
	struct netdev *            netdev;               /*    32     8 */
	struct dpif_port           dpif_port;            /*    40    24 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) --- */
	const struct dpif_class  * dpif_class;           /*    64     8 */
	int                        ifindex;              /*    72     4 */

	/* size: 80, cachelines: 2, members: 6 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 16 bytes */
};
struct ovs_action_push_vlan {
	ovs_be16                   vlan_tpid;            /*     0     2 */
	ovs_be16                   vlan_tci;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ct_dpif_tuple {
	uint16_t                   l3_type;              /*     0     2 */
	uint8_t                    ip_proto;             /*     2     1 */

	/* XXX 1 byte hole, try to pack */

	union ct_dpif_inet_addr    src;                  /*     4    16 */
	union ct_dpif_inet_addr    dst;                  /*    20    16 */
	union {
		ovs_be16           src_port;             /*           2 */
		ovs_be16           icmp_id;              /*           2 */
	};                                               /*    36     2 */
	union {
		ovs_be16           dst_port;             /*           2 */
		struct {
			uint8_t    icmp_type;            /*    38     1 */
			uint8_t    icmp_code;            /*    39     1 */
		};                                       /*           2 */
	};                                               /*    38     2 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 39, holes: 1, sum holes: 1 */
	/* last cacheline: 40 bytes */
};
struct ct_dpif_counters {
	uint64_t                   packets;              /*     0     8 */
	uint64_t                   bytes;                /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ct_dpif_timestamp {
	uint64_t                   start;                /*     0     8 */
	uint64_t                   stop;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ct_dpif_protoinfo {
	uint16_t                   proto;                /*     0     2 */
	union {
		struct {
			uint8_t    state_orig;           /*     2     1 */
			uint8_t    state_reply;          /*     3     1 */
			uint8_t    wscale_orig;          /*     4     1 */
			uint8_t    wscale_reply;         /*     5     1 */
			uint8_t    flags_orig;           /*     6     1 */
			uint8_t    flags_reply;          /*     7     1 */
		} tcp;                                   /*           6 */
	};                                               /*     2     6 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ct_dpif_helper {
	char *                     name;                 /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct ct_dpif_entry {
	struct ct_dpif_tuple       tuple_orig;           /*     0    40 */
	struct ct_dpif_tuple       tuple_reply;          /*    40    40 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	struct ct_dpif_tuple       tuple_master;         /*    80    40 */
	struct ct_dpif_helper      helper;               /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint32_t                   id;                   /*   128     4 */
	uint16_t                   zone;                 /*   132     2 */

	/* XXX 2 bytes hole, try to pack */

	struct ct_dpif_counters    counters_orig;        /*   136    16 */
	struct ct_dpif_counters    counters_reply;       /*   152    16 */
	struct ct_dpif_timestamp   timestamp;            /*   168    16 */
	struct ct_dpif_protoinfo   protoinfo;            /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	ovs_u128                   labels;               /*   192    16 */
	_Bool                      have_labels;          /*   208     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   status;               /*   212     4 */
	uint32_t                   timeout;              /*   216     4 */
	uint32_t                   mark;                 /*   220     4 */
	uint32_t                   bkt;                  /*   224     4 */

	/* size: 232, cachelines: 4, members: 16 */
	/* sum members: 223, holes: 2, sum holes: 5 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct ct_dpif_dump_state {
	struct dpif *              dpif;                 /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct dpctl_params {
	_Bool                      is_appctl;            /*     0     1 */
	_Bool                      print_statistics;     /*     1     1 */
	_Bool                      zero_statistics;      /*     2     1 */
	_Bool                      may_create;           /*     3     1 */
	_Bool                      read_only;            /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        verbosity;            /*     8     4 */
	_Bool                      names;                /*    12     1 */

	/* XXX 3 bytes hole, try to pack */

	void                       (*output)(void *, _Bool, const char  *); /*    16     8 */
	void *                     aux;                  /*    24     8 */
	void                       (*usage)(void *);     /*    32     8 */

	/* size: 40, cachelines: 1, members: 10 */
	/* sum members: 34, holes: 2, sum holes: 6 */
	/* last cacheline: 40 bytes */
};
struct minimatch {
	union {
		struct {
			struct miniflow * flow;          /*     0     8 */
			struct minimask * mask;          /*     8     8 */
		};                                       /*          16 */
		struct miniflow *  flows[2];             /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct dpif_dp_stats {
	uint64_t                   n_hit;                /*     0     8 */
	uint64_t                   n_missed;             /*     8     8 */
	uint64_t                   n_lost;               /*    16     8 */
	uint64_t                   n_flows;              /*    24     8 */
	uint64_t                   n_mask_hit;           /*    32     8 */
	uint32_t                   n_masks;              /*    40     4 */

	/* size: 48, cachelines: 1, members: 6 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct dpif_port_dump {
	const struct dpif  *       dpif;                 /*     0     8 */
	int                        error;                /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     state;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct dpif_flow {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const struct nlattr  *     mask;                 /*    16     8 */
	size_t                     mask_len;             /*    24     8 */
	const struct nlattr  *     actions;              /*    32     8 */
	size_t                     actions_len;          /*    40     8 */
	ovs_u128                   ufid;                 /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	_Bool                      ufid_present;         /*    64     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               pmd_id;               /*    68     4 */
	struct dpif_flow_stats     stats;                /*    72    32 */

	/* XXX last struct has 6 bytes of padding */

	_Bool                      offloaded;            /*   104     1 */

	/* size: 112, cachelines: 2, members: 11 */
	/* sum members: 102, holes: 1, sum holes: 3 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct simap {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct smap_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     key;                  /*    16     8 */
	char *                     value;                /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct dpctl_command {
	const char  *              name;                 /*     0     8 */
	const char  *              usage;                /*     8     8 */
	int                        min_args;             /*    16     4 */
	int                        max_args;             /*    20     4 */
	dpctl_command_handler *    handler;              /*    24     8 */
	enum {
		DP_RO = 0,
		DP_RW = 1,
	} mode;                                          /*    32     4 */

	/* size: 40, cachelines: 1, members: 6 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct actions_for_flow {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct flow                flow;                 /*    16   672 */
	/* --- cacheline 10 boundary (640 bytes) was 48 bytes ago --- */
	struct ofpbuf              actions;              /*   688    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 11 boundary (704 bytes) was 48 bytes ago --- */

	/* size: 752, cachelines: 12, members: 3 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 48 bytes */
};
struct sigevent {
	sigval_t                   sigev_value;          /*     0     8 */
	int                        sigev_signo;          /*     8     4 */
	int                        sigev_notify;         /*    12     4 */
	union {
		int                _pad[12];             /*          48 */
		__pid_t            _tid;                 /*           4 */
		struct {
			void       (*_function)(sigval_t); /*    16     8 */
			pthread_attr_t * _attribute;     /*    24     8 */
		} _sigev_thread;                         /*          16 */
	} _sigev_un;                                     /*    16    48 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct aiocb {
	int                        aio_fildes;           /*     0     4 */
	int                        aio_lio_opcode;       /*     4     4 */
	int                        aio_reqprio;          /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	volatile void  *           aio_buf;              /*    16     8 */
	size_t                     aio_nbytes;           /*    24     8 */
	struct sigevent            aio_sigevent;         /*    32    64 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	struct aiocb *             __next_prio;          /*    96     8 */
	int                        __abs_prio;           /*   104     4 */
	int                        __policy;             /*   108     4 */
	int                        __error_code;         /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	__ssize_t                  __return_value;       /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	__off_t                    aio_offset;           /*   128     8 */
	char                       __pad[0];             /*   136     0 */
	char                       __glibc_reserved[32]; /*   136    32 */

	/* size: 168, cachelines: 3, members: 14 */
	/* sum members: 160, holes: 2, sum holes: 8 */
	/* last cacheline: 40 bytes */
};
struct async_append {
	int                        fd;                   /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct aiocb *             aiocbs;               /*     8     8 */
	unsigned int               aiocb_head;           /*    16     4 */
	unsigned int               aiocb_tail;           /*    20     4 */
	uint8_t *                  buffer;               /*    24     8 */
	struct byteq               byteq;                /*    32    24 */

	/* XXX last struct has 4 bytes of padding */

	/* size: 56, cachelines: 1, members: 6 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 56 bytes */
};
struct genevehdr {
	uint8_t                    opt_len:6;            /*     0: 2  1 */
	uint8_t                    ver:2;                /*     0: 0  1 */
	uint8_t                    rsvd1:6;              /*     1: 2  1 */
	uint8_t                    critical:1;           /*     1: 1  1 */
	uint8_t                    oam:1;                /*     1: 0  1 */
	ovs_be16                   proto_type;           /*     2     2 */
	ovs_16aligned_be32         vni;                  /*     4     4 */
	struct geneve_opt          options[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 8 */
	/* last cacheline: 8 bytes */
};
struct gre_base_hdr {
	ovs_be16                   flags;                /*     0     2 */
	ovs_be16                   protocol;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct vxlanhdr {
	union {
		ovs_16aligned_be32 vx_flags;             /*           4 */
		struct {
			uint8_t    flags;                /*     0     1 */
			uint8_t    reserved[2];          /*     1     2 */
			uint8_t    next_protocol;        /*     3     1 */
		} vx_gpe;                                /*           4 */
	};                                               /*     0     4 */
	ovs_16aligned_be32         vx_vni;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct netdev_vport {
	struct netdev              up;                   /*     0    80 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	struct ovs_mutex           mutex;                /*    80    48 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct eth_addr            etheraddr;            /*   128     6 */

	/* XXX 2 bytes hole, try to pack */

	struct netdev_stats        stats;                /*   136   336 */
	/* --- cacheline 7 boundary (448 bytes) was 24 bytes ago --- */
	struct netdev_tunnel_config tnl_cfg;             /*   472    88 */

	/* XXX last struct has 1 byte of padding */

	/* --- cacheline 8 boundary (512 bytes) was 48 bytes ago --- */
	char                       egress_iface[16];     /*   560    16 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	_Bool                      carrier_status;       /*   576     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     peer;                 /*   584     8 */

	/* size: 592, cachelines: 10, members: 8 */
	/* sum members: 583, holes: 2, sum holes: 9 */
	/* paddings: 1, sum paddings: 1 */
	/* last cacheline: 16 bytes */
};
struct _SFLAddress {
	u_int32_t                  type;                 /*     0     4 */
	SFLAddress_value           address;              /*     4    16 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct _SFLString {
	u_int32_t                  len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     str;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLIf_counters {
	u_int32_t                  ifIndex;              /*     0     4 */
	u_int32_t                  ifType;               /*     4     4 */
	u_int64_t                  ifSpeed;              /*     8     8 */
	u_int32_t                  ifDirection;          /*    16     4 */
	u_int32_t                  ifStatus;             /*    20     4 */
	u_int64_t                  ifInOctets;           /*    24     8 */
	u_int32_t                  ifInUcastPkts;        /*    32     4 */
	u_int32_t                  ifInMulticastPkts;    /*    36     4 */
	u_int32_t                  ifInBroadcastPkts;    /*    40     4 */
	u_int32_t                  ifInDiscards;         /*    44     4 */
	u_int32_t                  ifInErrors;           /*    48     4 */
	u_int32_t                  ifInUnknownProtos;    /*    52     4 */
	u_int64_t                  ifOutOctets;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  ifOutUcastPkts;       /*    64     4 */
	u_int32_t                  ifOutMulticastPkts;   /*    68     4 */
	u_int32_t                  ifOutBroadcastPkts;   /*    72     4 */
	u_int32_t                  ifOutDiscards;        /*    76     4 */
	u_int32_t                  ifOutErrors;          /*    80     4 */
	u_int32_t                  ifPromiscuousMode;    /*    84     4 */

	/* size: 88, cachelines: 2, members: 19 */
	/* last cacheline: 24 bytes */
};
struct _SFLEthernet_counters {
	u_int32_t                  dot3StatsAlignmentErrors; /*     0     4 */
	u_int32_t                  dot3StatsFCSErrors;   /*     4     4 */
	u_int32_t                  dot3StatsSingleCollisionFrames; /*     8     4 */
	u_int32_t                  dot3StatsMultipleCollisionFrames; /*    12     4 */
	u_int32_t                  dot3StatsSQETestErrors; /*    16     4 */
	u_int32_t                  dot3StatsDeferredTransmissions; /*    20     4 */
	u_int32_t                  dot3StatsLateCollisions; /*    24     4 */
	u_int32_t                  dot3StatsExcessiveCollisions; /*    28     4 */
	u_int32_t                  dot3StatsInternalMacTransmitErrors; /*    32     4 */
	u_int32_t                  dot3StatsCarrierSenseErrors; /*    36     4 */
	u_int32_t                  dot3StatsFrameTooLongs; /*    40     4 */
	u_int32_t                  dot3StatsInternalMacReceiveErrors; /*    44     4 */
	u_int32_t                  dot3StatsSymbolErrors; /*    48     4 */

	/* size: 52, cachelines: 1, members: 13 */
	/* last cacheline: 52 bytes */
};
struct _SFLTokenring_counters {
	u_int32_t                  dot5StatsLineErrors;  /*     0     4 */
	u_int32_t                  dot5StatsBurstErrors; /*     4     4 */
	u_int32_t                  dot5StatsACErrors;    /*     8     4 */
	u_int32_t                  dot5StatsAbortTransErrors; /*    12     4 */
	u_int32_t                  dot5StatsInternalErrors; /*    16     4 */
	u_int32_t                  dot5StatsLostFrameErrors; /*    20     4 */
	u_int32_t                  dot5StatsReceiveCongestions; /*    24     4 */
	u_int32_t                  dot5StatsFrameCopiedErrors; /*    28     4 */
	u_int32_t                  dot5StatsTokenErrors; /*    32     4 */
	u_int32_t                  dot5StatsSoftErrors;  /*    36     4 */
	u_int32_t                  dot5StatsHardErrors;  /*    40     4 */
	u_int32_t                  dot5StatsSignalLoss;  /*    44     4 */
	u_int32_t                  dot5StatsTransmitBeacons; /*    48     4 */
	u_int32_t                  dot5StatsRecoverys;   /*    52     4 */
	u_int32_t                  dot5StatsLobeWires;   /*    56     4 */
	u_int32_t                  dot5StatsRemoves;     /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  dot5StatsSingles;     /*    64     4 */
	u_int32_t                  dot5StatsFreqErrors;  /*    68     4 */

	/* size: 72, cachelines: 2, members: 18 */
	/* last cacheline: 8 bytes */
};
struct _SFLVg_counters {
	u_int32_t                  dot12InHighPriorityFrames; /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12InHighPriorityOctets; /*     8     8 */
	u_int32_t                  dot12InNormPriorityFrames; /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12InNormPriorityOctets; /*    24     8 */
	u_int32_t                  dot12InIPMErrors;     /*    32     4 */
	u_int32_t                  dot12InOversizeFrameErrors; /*    36     4 */
	u_int32_t                  dot12InDataErrors;    /*    40     4 */
	u_int32_t                  dot12InNullAddressedFrames; /*    44     4 */
	u_int32_t                  dot12OutHighPriorityFrames; /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12OutHighPriorityOctets; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  dot12TransitionIntoTrainings; /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  dot12HCInHighPriorityOctets; /*    72     8 */
	u_int64_t                  dot12HCInNormPriorityOctets; /*    80     8 */
	u_int64_t                  dot12HCOutHighPriorityOctets; /*    88     8 */

	/* size: 96, cachelines: 2, members: 14 */
	/* sum members: 80, holes: 4, sum holes: 16 */
	/* last cacheline: 32 bytes */
};
struct _SFLVlan_counters {
	u_int32_t                  vlan_id;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int64_t                  octets;               /*     8     8 */
	u_int32_t                  ucastPkts;            /*    16     4 */
	u_int32_t                  multicastPkts;        /*    20     4 */
	u_int32_t                  broadcastPkts;        /*    24     4 */
	u_int32_t                  discards;             /*    28     4 */

	/* size: 32, cachelines: 1, members: 6 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct _SFLLACP_counters {
	struct eth_addr            actorSystemID;        /*     0     6 */
	uint8_t                    pad1[2];              /*     6     2 */
	struct eth_addr            partnerSystemID;      /*     8     6 */
	uint8_t                    pad2[2];              /*    14     2 */
	uint32_t                   attachedAggID;        /*    16     4 */
	SFLLACP_portState          portState;            /*    20     4 */
	uint32_t                   LACPDUsRx;            /*    24     4 */
	uint32_t                   markerPDUsRx;         /*    28     4 */
	uint32_t                   markerResponsePDUsRx; /*    32     4 */
	uint32_t                   unknownRx;            /*    36     4 */
	uint32_t                   illegalRx;            /*    40     4 */
	uint32_t                   LACPDUsTx;            /*    44     4 */
	uint32_t                   markerPDUsTx;         /*    48     4 */
	uint32_t                   markerResponsePDUsTx; /*    52     4 */

	/* size: 56, cachelines: 1, members: 14 */
	/* last cacheline: 56 bytes */
};
struct _SFLAPPResources_counters {
	uint32_t                   user_time;            /*     0     4 */
	uint32_t                   system_time;          /*     4     4 */
	uint64_t                   mem_used;             /*     8     8 */
	uint64_t                   mem_max;              /*    16     8 */
	uint32_t                   fd_open;              /*    24     4 */
	uint32_t                   fd_max;               /*    28     4 */
	uint32_t                   conn_open;            /*    32     4 */
	uint32_t                   conn_max;             /*    36     4 */

	/* size: 40, cachelines: 1, members: 8 */
	/* last cacheline: 40 bytes */
};
struct _SFLOVSDP_counters {
	uint32_t                   n_hit;                /*     0     4 */
	uint32_t                   n_missed;             /*     4     4 */
	uint32_t                   n_lost;               /*     8     4 */
	uint32_t                   n_mask_hit;           /*    12     4 */
	uint32_t                   n_flows;              /*    16     4 */
	uint32_t                   n_masks;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct _SFLCounters_sample_element {
	struct _SFLCounters_sample_element * nxt;        /*     0     8 */
	u_int32_t                  tag;                  /*     8     4 */
	u_int32_t                  length;               /*    12     4 */
	SFLCounters_type           counterBlock;         /*    16    96 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */

	/* size: 112, cachelines: 2, members: 4 */
	/* last cacheline: 48 bytes */
};
struct _SFLCounters_sample {
	u_int32_t                  sequence_number;      /*     0     4 */
	u_int32_t                  source_id;            /*     4     4 */
	u_int32_t                  num_elements;         /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLCounters_sample_element * elements;           /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLDataSource_instance {
	u_int32_t                  ds_class;             /*     0     4 */
	u_int32_t                  ds_index;             /*     4     4 */
	u_int32_t                  ds_instance;          /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct _SFLSampleCollector {
	u_int32_t                  data[475];            /*     0  1900 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 29 boundary (1856 bytes) was 48 bytes ago --- */
	u_int32_t *                datap;                /*  1904     8 */
	u_int32_t                  pktlen;               /*  1912     4 */
	u_int32_t                  packetSeqNo;          /*  1916     4 */
	/* --- cacheline 30 boundary (1920 bytes) --- */
	u_int32_t                  numSamples;           /*  1920     4 */

	/* size: 1928, cachelines: 31, members: 5 */
	/* sum members: 1920, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct _SFLReceiver {
	struct _SFLReceiver *      nxt;                  /*     0     8 */
	char *                     sFlowRcvrOwner;       /*     8     8 */
	time_t                     sFlowRcvrTimeout;     /*    16     8 */
	u_int32_t                  sFlowRcvrMaximumDatagramSize; /*    24     4 */
	SFLAddress                 sFlowRcvrAddress;     /*    28    20 */
	u_int32_t                  sFlowRcvrPort;        /*    48     4 */
	u_int32_t                  sFlowRcvrDatagramVersion; /*    52     4 */
	struct _SFLAgent *         agent;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	SFLSampleCollector         sampleCollector;      /*    64  1928 */
	/* --- cacheline 31 boundary (1984 bytes) was 8 bytes ago --- */

	/* size: 1992, cachelines: 32, members: 9 */
	/* last cacheline: 8 bytes */
};
struct _SFLAgent {
	SFLSampler *               jumpTable[199];       /*     0  1592 */
	/* --- cacheline 24 boundary (1536 bytes) was 56 bytes ago --- */
	SFLSampler *               samplers;             /*  1592     8 */
	/* --- cacheline 25 boundary (1600 bytes) --- */
	SFLPoller *                pollers;              /*  1600     8 */
	SFLReceiver *              receivers;            /*  1608     8 */
	time_t                     bootTime;             /*  1616     8 */
	time_t                     now;                  /*  1624     8 */
	SFLAddress                 myIP;                 /*  1632    20 */
	u_int32_t                  subId;                /*  1652     4 */
	void *                     magic;                /*  1656     8 */
	/* --- cacheline 26 boundary (1664 bytes) --- */
	allocFn_t                  allocFn;              /*  1664     8 */
	freeFn_t                   freeFn;               /*  1672     8 */
	errorFn_t                  errorFn;              /*  1680     8 */
	sendFn_t                   sendFn;               /*  1688     8 */

	/* size: 1696, cachelines: 27, members: 13 */
	/* last cacheline: 32 bytes */
};
struct _SFLSampler {
	struct _SFLSampler *       nxt;                  /*     0     8 */
	struct _SFLSampler *       hash_nxt;             /*     8     8 */
	SFLDataSource_instance     dsi;                  /*    16    12 */
	u_int32_t                  sFlowFsReceiver;      /*    28     4 */
	u_int32_t                  sFlowFsPacketSamplingRate; /*    32     4 */
	u_int32_t                  sFlowFsMaximumHeaderSize; /*    36     4 */
	struct _SFLAgent *         agent;                /*    40     8 */
	SFLReceiver *              myReceiver;           /*    48     8 */
	u_int32_t                  skip;                 /*    56     4 */
	u_int32_t                  samplePool;           /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  flowSampleSeqNo;      /*    64     4 */
	u_int32_t                  samplesThisTick;      /*    68     4 */
	u_int32_t                  samplesLastTick;      /*    72     4 */
	u_int32_t                  backoffThreshold;     /*    76     4 */

	/* size: 80, cachelines: 2, members: 14 */
	/* last cacheline: 16 bytes */
};
struct _SFLPoller {
	struct _SFLPoller *        nxt;                  /*     0     8 */
	SFLDataSource_instance     dsi;                  /*     8    12 */
	u_int32_t                  sFlowCpReceiver;      /*    20     4 */
	time_t                     sFlowCpInterval;      /*    24     8 */
	struct _SFLAgent *         agent;                /*    32     8 */
	void *                     magic;                /*    40     8 */
	getCountersFn_t            getCountersFn;        /*    48     8 */
	u_int32_t                  bridgePort;           /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	SFLReceiver *              myReceiver;           /*    64     8 */
	time_t                     countersCountdown;    /*    72     8 */
	u_int32_t                  countersSampleSeqNo;  /*    80     4 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 80, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct unaligned_u32 {
	uint32_t                   x;                    /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct unaligned_u64__ {
	uint64_t                   x;                    /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct rtnetlink_change {
	int                        nlmsg_type;           /*     0     4 */
	int                        if_index;             /*     4     4 */
	const char  *              ifname;               /*     8     8 */
	int                        master_ifindex;       /*    16     4 */
	int                        mtu;                  /*    20     4 */
	struct eth_addr            mac;                  /*    24     6 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               ifi_flags;            /*    32     4 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 34, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct nlmsghdr {
	__u32                      nlmsg_len;            /*     0     4 */
	__u16                      nlmsg_type;           /*     4     2 */
	__u16                      nlmsg_flags;          /*     6     2 */
	__u32                      nlmsg_seq;            /*     8     4 */
	__u32                      nlmsg_pid;            /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ifaddrmsg {
	__u8                       ifa_family;           /*     0     1 */
	__u8                       ifa_prefixlen;        /*     1     1 */
	__u8                       ifa_flags;            /*     2     1 */
	__u8                       ifa_scope;            /*     3     1 */
	__u32                      ifa_index;            /*     4     4 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct ifinfomsg {
	unsigned char              ifi_family;           /*     0     1 */
	unsigned char              __ifi_pad;            /*     1     1 */
	short unsigned int         ifi_type;             /*     2     2 */
	int                        ifi_index;            /*     4     4 */
	unsigned int               ifi_flags;            /*     8     4 */
	unsigned int               ifi_change;           /*    12     4 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct fat_rwlock {
	ovsthread_key_t            key;                  /*     0     8 */
	struct ovs_list            threads;              /*     8    16 */
	struct ovs_mutex           mutex;                /*    24    48 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 3 */
	/* last cacheline: 8 bytes */
};
struct fat_rwlock_slot {
	struct ovs_list            list_node;            /*     0    16 */
	struct fat_rwlock *        rwlock;               /*    16     8 */
	struct ovs_mutex           mutex;                /*    24    48 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	unsigned int               depth;                /*    72     4 */

	/* size: 80, cachelines: 2, members: 4 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_integer_constraints {
	int64_t                    min;                  /*     0     8 */
	int64_t                    max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_real_constraints {
	double                     min;                  /*     0     8 */
	double                     max;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_string_constraints {
	unsigned int               minLen;               /*     0     4 */
	unsigned int               maxLen;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ovsdb_uuid_constraints {
	char *                     refTableName;         /*     0     8 */
	struct ovsdb_table *       refTable;             /*     8     8 */
	enum ovsdb_ref_type        refType;              /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_base_type {
	enum ovsdb_atomic_type     type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_datum *       enum_;                /*     8     8 */
	union {
		struct ovsdb_integer_constraints integer; /*          16 */
		struct ovsdb_real_constraints real;      /*          16 */
		struct ovsdb_string_constraints string;  /*           8 */
		struct ovsdb_uuid_constraints uuid;      /*          24 */
	} u;                                             /*    16    24 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_datum {
	unsigned int               n;                    /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union ovsdb_atom *         keys;                 /*     8     8 */
	union ovsdb_atom *         values;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_type {
	struct ovsdb_base_type     key;                  /*     0    40 */
	struct ovsdb_base_type     value;                /*    40    40 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	unsigned int               n_min;                /*    80     4 */
	unsigned int               n_max;                /*    84     4 */

	/* size: 88, cachelines: 2, members: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_idl_condition {
	struct hmap                clauses;              /*     0    32 */
	_Bool                      is_true;              /*    32     1 */

	/* size: 40, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct ovsdb_idl_index_cursor {
	struct ovsdb_idl_index *   index;                /*     0     8 */
	struct skiplist_node *     position;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_idl_index {
	struct skiplist *          skiplist;             /*     0     8 */
	struct ovsdb_idl_index_column * columns;         /*     8     8 */
	size_t                     n_columns;            /*    16     8 */
	size_t                     alloc_columns;        /*    24     8 */
	_Bool                      ins_del;              /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct ovsdb_idl_table  * table;           /*    40     8 */
	const char  *              index_name;           /*    48     8 */

	/* size: 56, cachelines: 1, members: 7 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_row {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct uuid                uuid;                 /*    16    16 */
	struct ovs_list            src_arcs;             /*    32    16 */
	struct ovs_list            dst_arcs;             /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovsdb_idl_table *   table;                /*    64     8 */
	struct ovsdb_datum *       old_datum;            /*    72     8 */
	struct ovsdb_datum *       new_datum;            /*    80     8 */
	long unsigned int *        prereqs;              /*    88     8 */
	long unsigned int *        written;              /*    96     8 */
	struct hmap_node           txn_node;             /*   104    16 */
	long unsigned int *        map_op_written;       /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct map_op_list * *     map_op_lists;         /*   128     8 */
	long unsigned int *        set_op_written;       /*   136     8 */
	struct set_op_list * *     set_op_lists;         /*   144     8 */
	unsigned int               change_seqno[3];      /*   152    12 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            track_node;           /*   168    16 */
	long unsigned int *        updated;              /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 17 */
	/* sum members: 188, holes: 1, sum holes: 4 */
};
struct ovsdb_idl_table {
	const struct ovsdb_idl_table_class  * class_;    /*     0     8 */
	unsigned char *            modes;                /*     8     8 */
	_Bool                      need_table;           /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	struct shash               columns;              /*    24    32 */
	struct hmap                rows;                 /*    56    32 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	struct ovsdb_idl *         idl;                  /*    88     8 */
	unsigned int               change_seqno[3];      /*    96    12 */

	/* XXX 4 bytes hole, try to pack */

	struct shash               indexes;              /*   112    32 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	struct ovs_list            track_list;           /*   144    16 */
	struct ovsdb_idl_condition condition;            /*   160    40 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	_Bool                      cond_changed;         /*   200     1 */

	/* size: 208, cachelines: 4, members: 11 */
	/* sum members: 190, holes: 2, sum holes: 11 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_idl_column {
	char *                     name;                 /*     0     8 */
	struct ovsdb_type          type;                 /*     8    88 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	_Bool                      is_mutable;           /*    96     1 */

	/* XXX 7 bytes hole, try to pack */

	void                       (*parse)(struct ovsdb_idl_row *, const struct ovsdb_datum  *); /*   104     8 */
	void                       (*unparse)(struct ovsdb_idl_row *); /*   112     8 */

	/* size: 120, cachelines: 2, members: 5 */
	/* sum members: 113, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_table_class {
	char *                     name;                 /*     0     8 */
	_Bool                      is_root;              /*     8     1 */
	_Bool                      is_singleton;         /*     9     1 */

	/* XXX 6 bytes hole, try to pack */

	const struct ovsdb_idl_column  * columns;        /*    16     8 */
	size_t                     n_columns;            /*    24     8 */
	size_t                     allocation_size;      /*    32     8 */
	void                       (*row_init)(struct ovsdb_idl_row *); /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 42, holes: 1, sum holes: 6 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_idl_class {
	const char  *              database;             /*     0     8 */
	const struct ovsdb_idl_table_class  * tables;    /*     8     8 */
	size_t                     n_tables;             /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ovsdb_idl_index_column {
	const struct ovsdb_idl_column  * column;         /*     0     8 */
	column_comparator *        comparer;             /*     8     8 */
	int                        sorting_order;        /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_autoattach {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  key_mappings;         /*   192     8 */
	int64_t *                  value_mappings;       /*   200     8 */
	size_t                     n_mappings;           /*   208     8 */
	char *                     system_description;   /*   216     8 */
	char *                     system_name;          /*   224     8 */

	/* size: 232, cachelines: 4, members: 6 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_bridge {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_autoattach * auto_attach;          /*   192     8 */
	struct ovsrec_controller * * controller;         /*   200     8 */
	size_t                     n_controller;         /*   208     8 */
	char *                     datapath_id;          /*   216     8 */
	char *                     datapath_type;        /*   224     8 */
	char *                     datapath_version;     /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char *                     fail_mode;            /*   272     8 */
	int64_t *                  flood_vlans;          /*   280     8 */
	size_t                     n_flood_vlans;        /*   288     8 */
	int64_t *                  key_flow_tables;      /*   296     8 */
	struct ovsrec_flow_table * * value_flow_tables;  /*   304     8 */
	size_t                     n_flow_tables;        /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	struct ovsrec_ipfix *      ipfix;                /*   320     8 */
	_Bool                      mcast_snooping_enable; /*   328     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_mirror * *   mirrors;              /*   336     8 */
	size_t                     n_mirrors;            /*   344     8 */
	char *                     name;                 /*   352     8 */
	struct ovsrec_netflow *    netflow;              /*   360     8 */
	struct smap                other_config;         /*   368    32 */
	/* --- cacheline 6 boundary (384 bytes) was 16 bytes ago --- */
	struct ovsrec_port * *     ports;                /*   400     8 */
	size_t                     n_ports;              /*   408     8 */
	char * *                   protocols;            /*   416     8 */
	size_t                     n_protocols;          /*   424     8 */
	_Bool                      rstp_enable;          /*   432     1 */

	/* XXX 7 bytes hole, try to pack */

	struct smap                rstp_status;          /*   440    32 */
	/* --- cacheline 7 boundary (448 bytes) was 24 bytes ago --- */
	struct ovsrec_sflow *      sflow;                /*   472     8 */
	struct smap                status;               /*   480    32 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	_Bool                      stp_enable;           /*   512     1 */

	/* size: 520, cachelines: 9, members: 30 */
	/* sum members: 499, holes: 2, sum holes: 14 */
	/* padding: 7 */
	/* last cacheline: 8 bytes */
};
struct ovsrec_controller {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     connection_mode;      /*   192     8 */
	int64_t *                  controller_burst_limit; /*   200     8 */
	size_t                     n_controller_burst_limit; /*   208     8 */
	int64_t *                  controller_rate_limit; /*   216     8 */
	size_t                     n_controller_rate_limit; /*   224     8 */
	_Bool *                    enable_async_messages; /*   232     8 */
	size_t                     n_enable_async_messages; /*   240     8 */
	struct smap                external_ids;         /*   248    32 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	int64_t *                  inactivity_probe;     /*   280     8 */
	size_t                     n_inactivity_probe;   /*   288     8 */
	_Bool                      is_connected;         /*   296     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     local_gateway;        /*   304     8 */
	char *                     local_ip;             /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	char *                     local_netmask;        /*   320     8 */
	int64_t *                  max_backoff;          /*   328     8 */
	size_t                     n_max_backoff;        /*   336     8 */
	struct smap                other_config;         /*   344    32 */
	char *                     role;                 /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct smap                status;               /*   384    32 */
	char *                     target;               /*   416     8 */

	/* size: 424, cachelines: 7, members: 21 */
	/* sum members: 417, holes: 1, sum holes: 7 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_flow_table {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	int64_t *                  flow_limit;           /*   224     8 */
	size_t                     n_flow_limit;         /*   232     8 */
	char * *                   groups;               /*   240     8 */
	size_t                     n_groups;             /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	char *                     name;                 /*   256     8 */
	char *                     overflow_policy;      /*   264     8 */
	char * *                   prefixes;             /*   272     8 */
	size_t                     n_prefixes;           /*   280     8 */

	/* size: 288, cachelines: 5, members: 10 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_ipfix {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  cache_active_timeout; /*   192     8 */
	size_t                     n_cache_active_timeout; /*   200     8 */
	int64_t *                  cache_max_flows;      /*   208     8 */
	size_t                     n_cache_max_flows;    /*   216     8 */
	struct smap                external_ids;         /*   224    32 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  obs_domain_id;        /*   256     8 */
	size_t                     n_obs_domain_id;      /*   264     8 */
	int64_t *                  obs_point_id;         /*   272     8 */
	size_t                     n_obs_point_id;       /*   280     8 */
	struct smap                other_config;         /*   288    32 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	int64_t *                  sampling;             /*   320     8 */
	size_t                     n_sampling;           /*   328     8 */
	char * *                   targets;              /*   336     8 */
	size_t                     n_targets;            /*   344     8 */

	/* size: 352, cachelines: 6, members: 15 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_mirror {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	char *                     name;                 /*   224     8 */
	struct ovsrec_port *       output_port;          /*   232     8 */
	int64_t *                  output_vlan;          /*   240     8 */
	size_t                     n_output_vlan;        /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	_Bool                      select_all;           /*   256     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_port * *     select_dst_port;      /*   264     8 */
	size_t                     n_select_dst_port;    /*   272     8 */
	struct ovsrec_port * *     select_src_port;      /*   280     8 */
	size_t                     n_select_src_port;    /*   288     8 */
	int64_t *                  select_vlan;          /*   296     8 */
	size_t                     n_select_vlan;        /*   304     8 */
	int64_t *                  snaplen;              /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	size_t                     n_snaplen;            /*   320     8 */
	char * *                   key_statistics;       /*   328     8 */
	int64_t *                  value_statistics;     /*   336     8 */
	size_t                     n_statistics;         /*   344     8 */

	/* size: 352, cachelines: 6, members: 18 */
	/* sum members: 345, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_netflow {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t                    active_timeout;       /*   192     8 */
	_Bool                      add_id_to_interface;  /*   200     1 */

	/* XXX 7 bytes hole, try to pack */

	int64_t *                  engine_id;            /*   208     8 */
	size_t                     n_engine_id;          /*   216     8 */
	int64_t *                  engine_type;          /*   224     8 */
	size_t                     n_engine_type;        /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char * *                   targets;              /*   272     8 */
	size_t                     n_targets;            /*   280     8 */

	/* size: 288, cachelines: 5, members: 10 */
	/* sum members: 281, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_port {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     bond_active_slave;    /*   192     8 */
	int64_t                    bond_downdelay;       /*   200     8 */
	_Bool                      bond_fake_iface;      /*   208     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     bond_mode;            /*   216     8 */
	int64_t                    bond_updelay;         /*   224     8 */
	int64_t *                  cvlans;               /*   232     8 */
	size_t                     n_cvlans;             /*   240     8 */
	struct smap                external_ids;         /*   248    32 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	_Bool                      fake_bridge;          /*   280     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_interface * * interfaces;          /*   288     8 */
	size_t                     n_interfaces;         /*   296     8 */
	char *                     lacp;                 /*   304     8 */
	char *                     mac;                  /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	char *                     name;                 /*   320     8 */
	struct smap                other_config;         /*   328    32 */
	_Bool                      protected_;           /*   360     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovsrec_qos *        qos;                  /*   368     8 */
	char * *                   key_rstp_statistics;  /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	int64_t *                  value_rstp_statistics; /*   384     8 */
	size_t                     n_rstp_statistics;    /*   392     8 */
	struct smap                rstp_status;          /*   400    32 */
	char * *                   key_statistics;       /*   432     8 */
	int64_t *                  value_statistics;     /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	size_t                     n_statistics;         /*   448     8 */
	struct smap                status;               /*   456    32 */
	int64_t *                  tag;                  /*   488     8 */
	size_t                     n_tag;                /*   496     8 */
	int64_t *                  trunks;               /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	size_t                     n_trunks;             /*   512     8 */
	char *                     vlan_mode;            /*   520     8 */

	/* size: 528, cachelines: 9, members: 31 */
	/* sum members: 507, holes: 3, sum holes: 21 */
	/* last cacheline: 16 bytes */
};
struct ovsrec_sflow {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     agent;                /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t *                  header;               /*   232     8 */
	size_t                     n_header;             /*   240     8 */
	int64_t *                  polling;              /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	size_t                     n_polling;            /*   256     8 */
	int64_t *                  sampling;             /*   264     8 */
	size_t                     n_sampling;           /*   272     8 */
	char * *                   targets;              /*   280     8 */
	size_t                     n_targets;            /*   288     8 */

	/* size: 296, cachelines: 5, members: 11 */
	/* last cacheline: 40 bytes */
};
struct ovsrec_flow_sample_collector_set {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_bridge *     bridge;               /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t                    id;                   /*   232     8 */
	struct ovsrec_ipfix *      ipfix;                /*   240     8 */

	/* size: 248, cachelines: 4, members: 5 */
	/* last cacheline: 56 bytes */
};
struct ovsrec_interface {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     admin_state;          /*   192     8 */
	struct smap                bfd;                  /*   200    32 */
	struct smap                bfd_status;           /*   232    32 */
	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */
	_Bool *                    cfm_fault;            /*   264     8 */
	size_t                     n_cfm_fault;          /*   272     8 */
	char * *                   cfm_fault_status;     /*   280     8 */
	size_t                     n_cfm_fault_status;   /*   288     8 */
	int64_t *                  cfm_flap_count;       /*   296     8 */
	size_t                     n_cfm_flap_count;     /*   304     8 */
	int64_t *                  cfm_health;           /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	size_t                     n_cfm_health;         /*   320     8 */
	int64_t *                  cfm_mpid;             /*   328     8 */
	size_t                     n_cfm_mpid;           /*   336     8 */
	int64_t *                  cfm_remote_mpids;     /*   344     8 */
	size_t                     n_cfm_remote_mpids;   /*   352     8 */
	char *                     cfm_remote_opstate;   /*   360     8 */
	char *                     duplex;               /*   368     8 */
	char *                     error;                /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	struct smap                external_ids;         /*   384    32 */
	int64_t *                  ifindex;              /*   416     8 */
	size_t                     n_ifindex;            /*   424     8 */
	int64_t                    ingress_policing_burst; /*   432     8 */
	int64_t                    ingress_policing_rate; /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	_Bool *                    lacp_current;         /*   448     8 */
	size_t                     n_lacp_current;       /*   456     8 */
	int64_t *                  link_resets;          /*   464     8 */
	size_t                     n_link_resets;        /*   472     8 */
	int64_t *                  link_speed;           /*   480     8 */
	size_t                     n_link_speed;         /*   488     8 */
	char *                     link_state;           /*   496     8 */
	struct smap                lldp;                 /*   504    32 */
	/* --- cacheline 8 boundary (512 bytes) was 24 bytes ago --- */
	char *                     mac;                  /*   536     8 */
	char *                     mac_in_use;           /*   544     8 */
	int64_t *                  mtu;                  /*   552     8 */
	size_t                     n_mtu;                /*   560     8 */
	int64_t *                  mtu_request;          /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	size_t                     n_mtu_request;        /*   576     8 */
	char *                     name;                 /*   584     8 */
	int64_t *                  ofport;               /*   592     8 */
	size_t                     n_ofport;             /*   600     8 */
	int64_t *                  ofport_request;       /*   608     8 */
	size_t                     n_ofport_request;     /*   616     8 */
	struct smap                options;              /*   624    32 */
	/* --- cacheline 10 boundary (640 bytes) was 16 bytes ago --- */
	struct smap                other_config;         /*   656    32 */
	char * *                   key_statistics;       /*   688     8 */
	int64_t *                  value_statistics;     /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	size_t                     n_statistics;         /*   704     8 */
	struct smap                status;               /*   712    32 */
	char *                     type;                 /*   744     8 */

	/* size: 752, cachelines: 12, members: 50 */
	/* last cacheline: 48 bytes */
};
struct ovsrec_manager {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	char *                     connection_mode;      /*   192     8 */
	struct smap                external_ids;         /*   200    32 */
	int64_t *                  inactivity_probe;     /*   232     8 */
	size_t                     n_inactivity_probe;   /*   240     8 */
	_Bool                      is_connected;         /*   248     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  max_backoff;          /*   256     8 */
	size_t                     n_max_backoff;        /*   264     8 */
	struct smap                other_config;         /*   272    32 */
	struct smap                status;               /*   304    32 */
	/* --- cacheline 5 boundary (320 bytes) was 16 bytes ago --- */
	char *                     target;               /*   336     8 */

	/* size: 344, cachelines: 6, members: 11 */
	/* sum members: 337, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_open_vswitch {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovsrec_bridge * *   bridges;              /*   192     8 */
	size_t                     n_bridges;            /*   200     8 */
	int64_t                    cur_cfg;              /*   208     8 */
	char * *                   datapath_types;       /*   216     8 */
	size_t                     n_datapath_types;     /*   224     8 */
	char *                     db_version;           /*   232     8 */
	struct smap                external_ids;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	char * *                   iface_types;          /*   272     8 */
	size_t                     n_iface_types;        /*   280     8 */
	struct ovsrec_manager * *  manager_options;      /*   288     8 */
	size_t                     n_manager_options;    /*   296     8 */
	int64_t                    next_cfg;             /*   304     8 */
	struct smap                other_config;         /*   312    32 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	char *                     ovs_version;          /*   344     8 */
	struct ovsrec_ssl *        ssl;                  /*   352     8 */
	struct smap                statistics;           /*   360    32 */
	/* --- cacheline 6 boundary (384 bytes) was 8 bytes ago --- */
	char *                     system_type;          /*   392     8 */
	char *                     system_version;       /*   400     8 */

	/* size: 408, cachelines: 7, members: 19 */
	/* last cacheline: 24 bytes */
};
struct ovsrec_ssl {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	_Bool                      bootstrap_ca_cert;    /*   192     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     ca_cert;              /*   200     8 */
	char *                     certificate;          /*   208     8 */
	struct smap                external_ids;         /*   216    32 */
	char *                     private_key;          /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 6 */
	/* sum members: 249, holes: 1, sum holes: 7 */
};
struct ovsrec_qos {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct smap                external_ids;         /*   192    32 */
	struct smap                other_config;         /*   224    32 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int64_t *                  key_queues;           /*   256     8 */
	struct ovsrec_queue * *    value_queues;         /*   264     8 */
	size_t                     n_queues;             /*   272     8 */
	char *                     type;                 /*   280     8 */

	/* size: 288, cachelines: 5, members: 7 */
	/* last cacheline: 32 bytes */
};
struct ovsrec_queue {
	struct ovsdb_idl_row       header_;              /*     0   192 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int64_t *                  dscp;                 /*   192     8 */
	size_t                     n_dscp;               /*   200     8 */
	struct smap                external_ids;         /*   208    32 */
	struct smap                other_config;         /*   240    32 */
	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */

	/* size: 272, cachelines: 5, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ovsdb_table {
	struct ovsdb_table_schema * schema;              /*     0     8 */
	struct ovsdb_txn_table *   txn_table;            /*     8     8 */
	struct hmap                rows;                 /*    16    32 */
	struct hmap *              indexes;              /*    48     8 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_loop {
	struct ovsdb_idl *         idl;                  /*     0     8 */
	unsigned int               skip_seqno;           /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_idl_txn *     committing_txn;       /*    16     8 */
	unsigned int               precommit_seqno;      /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovsdb_idl_txn *     open_txn;             /*    32     8 */
	int64_t                    cur_cfg;              /*    40     8 */
	int64_t                    next_cfg;             /*    48     8 */

	/* size: 56, cachelines: 1, members: 7 */
	/* sum members: 48, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl {
	const struct ovsdb_idl_class  * class_;          /*     0     8 */
	struct shash               table_by_name;        /*     8    32 */
	struct ovsdb_idl_table *   tables;               /*    40     8 */
	unsigned int               change_seqno;         /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	struct jsonrpc_session *   session;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	enum ovsdb_idl_state       state;                /*    64     4 */
	unsigned int               state_seqno;          /*    68     4 */
	struct json *              request_id;           /*    72     8 */
	struct json *              schema;               /*    80     8 */
	char *                     lock_name;            /*    88     8 */
	_Bool                      has_lock;             /*    96     1 */
	_Bool                      is_lock_contended;    /*    97     1 */

	/* XXX 6 bytes hole, try to pack */

	struct json *              lock_request_id;      /*   104     8 */
	struct ovsdb_idl_txn *     txn;                  /*   112     8 */
	struct hmap                outstanding_txns;     /*   120    32 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	_Bool                      verify_write_only;    /*   152     1 */
	_Bool                      cond_changed;         /*   153     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               cond_seqno;           /*   156     4 */

	/* size: 160, cachelines: 3, members: 18 */
	/* sum members: 148, holes: 3, sum holes: 12 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_idl_txn {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct json *              request_id;           /*    16     8 */
	struct ovsdb_idl *         idl;                  /*    24     8 */
	struct hmap                txn_rows;             /*    32    32 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	enum ovsdb_idl_txn_status  status;               /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     error;                /*    72     8 */
	_Bool                      dry_run;              /*    80     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ds                  comment;              /*    88    24 */
	const char  *              inc_table;            /*   112     8 */
	const char  *              inc_column;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct uuid                inc_row;              /*   128    16 */
	_Bool                      inc_force;            /*   144     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               inc_index;            /*   148     4 */
	int64_t                    inc_new_value;        /*   152     8 */
	struct hmap                inserted_rows;        /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */

	/* size: 192, cachelines: 3, members: 15 */
	/* sum members: 178, holes: 3, sum holes: 14 */
};
struct jsonrpc_msg {
	enum jsonrpc_msg_type      type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     method;               /*     8     8 */
	struct json *              params;               /*    16     8 */
	struct json *              result;               /*    24     8 */
	struct json *              error;                /*    32     8 */
	struct json *              id;                   /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_table_schema {
	char *                     name;                 /*     0     8 */
	_Bool                      mutable;              /*     8     1 */
	_Bool                      is_root;              /*     9     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               max_rows;             /*    12     4 */
	struct shash               columns;              /*    16    32 */
	struct ovsdb_column_set *  indexes;              /*    48     8 */
	size_t                     n_indexes;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 7 */
	/* sum members: 62, holes: 1, sum holes: 2 */
};
struct ovsdb_parser {
	char *                     name;                 /*     0     8 */
	struct sset                used;                 /*     8    32 */
	const struct json  *       json;                 /*    40     8 */
	struct ovsdb_error *       error;                /*    48     8 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_arc {
	struct ovs_list            src_node;             /*     0    16 */
	struct ovs_list            dst_node;             /*    16    16 */
	struct ovsdb_idl_row *     src;                  /*    32     8 */
	struct ovsdb_idl_row *     dst;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_idl_txn_insert {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct uuid                dummy;                /*    16    16 */
	int                        op_index;             /*    32     4 */
	struct uuid                real;                 /*    36    16 */

	/* size: 56, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct ovsdb_idl_clause {
	struct hmap_node           hmap_node;            /*     0    16 */
	enum ovsdb_function        function;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct ovsdb_idl_column  * column;         /*    24     8 */
	struct ovsdb_datum         arg;                  /*    32    24 */

	/* size: 56, cachelines: 1, members: 4 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct rtmsg {
	unsigned char              rtm_family;           /*     0     1 */
	unsigned char              rtm_dst_len;          /*     1     1 */
	unsigned char              rtm_src_len;          /*     2     1 */
	unsigned char              rtm_tos;              /*     3     1 */
	unsigned char              rtm_table;            /*     4     1 */
	unsigned char              rtm_protocol;         /*     5     1 */
	unsigned char              rtm_scope;            /*     6     1 */
	unsigned char              rtm_type;             /*     7     1 */
	unsigned int               rtm_flags;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 9 */
	/* last cacheline: 12 bytes */
};
struct rtgenmsg {
	unsigned char              rtgen_family;         /*     0     1 */

	/* size: 1, cachelines: 1, members: 1 */
	/* last cacheline: 1 bytes */
};
struct route_data {
	unsigned char              rtm_dst_len;          /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	struct in6_addr            rta_dst;              /*     4    16 */
	struct in6_addr            rta_gw;               /*    20    16 */
	char                       ifname[16];           /*    36    16 */
	uint32_t                   mark;                 /*    52     4 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 53, holes: 1, sum holes: 3 */
	/* last cacheline: 56 bytes */
};
struct route_table_msg {
	_Bool                      relevant;             /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        nlmsg_type;           /*     4     4 */
	struct route_data          rd;                   /*     8    56 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 3 */
	/* sum members: 61, holes: 1, sum holes: 3 */
};
struct stack_st {
	int                        num;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char * *                   data;                 /*     8     8 */
	int                        sorted;               /*    16     4 */
	int                        num_alloc;            /*    20     4 */
	int                        (*comp)(const void  *, const void  *); /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct bignum_st {
	long unsigned int *        d;                    /*     0     8 */
	int                        top;                  /*     8     4 */
	int                        dmax;                 /*    12     4 */
	int                        neg;                  /*    16     4 */
	int                        flags;                /*    20     4 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct bn_mont_ctx_st {
	int                        ri;                   /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	BIGNUM                     RR;                   /*     8    24 */
	BIGNUM                     N;                    /*    32    24 */
	BIGNUM                     Ni;                   /*    56    24 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	long unsigned int          n0[2];                /*    80    16 */
	int                        flags;                /*    96     4 */

	/* size: 104, cachelines: 2, members: 6 */
	/* sum members: 96, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct bn_gencb_st {
	unsigned int               ver;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     arg;                  /*     8     8 */
	union {
		void               (*cb_1)(int, int, void *); /*           8 */
		int                (*cb_2)(int, int, BN_GENCB *); /*           8 */
	} cb;                                            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct dh_st {
	int                        pad;                  /*     0     4 */
	int                        version;              /*     4     4 */
	BIGNUM *                   p;                    /*     8     8 */
	BIGNUM *                   g;                    /*    16     8 */
	long int                   length;               /*    24     8 */
	BIGNUM *                   pub_key;              /*    32     8 */
	BIGNUM *                   priv_key;             /*    40     8 */
	int                        flags;                /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	BN_MONT_CTX *              method_mont_p;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	BIGNUM *                   q;                    /*    64     8 */
	BIGNUM *                   j;                    /*    72     8 */
	unsigned char *            seed;                 /*    80     8 */
	int                        seedlen;              /*    88     4 */

	/* XXX 4 bytes hole, try to pack */

	BIGNUM *                   counter;              /*    96     8 */
	int                        references;           /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	CRYPTO_EX_DATA             ex_data;              /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	const DH_METHOD  *         meth;                 /*   128     8 */
	ENGINE *                   engine;               /*   136     8 */

	/* size: 144, cachelines: 3, members: 18 */
	/* sum members: 132, holes: 3, sum holes: 12 */
	/* last cacheline: 16 bytes */
};
struct dh_method {
	const char  *              name;                 /*     0     8 */
	int                        (*generate_key)(DH *); /*     8     8 */
	int                        (*compute_key)(unsigned char *, const BIGNUM  *, DH *); /*    16     8 */
	int                        (*bn_mod_exp)(const DH  *, BIGNUM *, const BIGNUM  *, const BIGNUM  *, const BIGNUM  *, BN_CTX *, BN_MONT_CTX *); /*    24     8 */
	int                        (*init)(DH *);        /*    32     8 */
	int                        (*finish)(DH *);      /*    40     8 */
	int                        flags;                /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     app_data;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*generate_params)(DH *, int, int, BN_GENCB *); /*    64     8 */

	/* size: 72, cachelines: 2, members: 9 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct crypto_ex_data_st {
	struct stack_st_void *     sk;                   /*     0     8 */
	int                        dummy;                /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct stack_st_void {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct svec {
	char * *                   names;                /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct attr_len_tbl {
	int                        len;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct attr_len_tbl  * next;               /*     8     8 */
	int                        next_max;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 16, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct netlink_field {
	int                        offset;               /*     0     4 */
	int                        flower_offset;        /*     4     4 */
	int                        size;                 /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ufid_tc_data {
	struct hmap_node           ufid_node;            /*     0    16 */
	struct hmap_node           tc_node;              /*    16    16 */
	ovs_u128                   ufid;                 /*    32    16 */
	uint16_t                   prio;                 /*    48     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   handle;               /*    52     4 */
	int                        ifindex;              /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct netdev *            netdev;               /*    64     8 */

	/* size: 72, cachelines: 2, members: 7 */
	/* sum members: 66, holes: 2, sum holes: 6 */
	/* last cacheline: 8 bytes */
};
struct prio_map_data {
	struct hmap_node           node;                 /*     0    16 */
	struct tc_flower_key       mask;                 /*    16    84 */
	/* --- cacheline 1 boundary (64 bytes) was 36 bytes ago --- */
	ovs_be16                   protocol;             /*   100     2 */
	uint16_t                   prio;                 /*   102     2 */

	/* size: 104, cachelines: 2, members: 4 */
	/* last cacheline: 40 bytes */
};
struct heap_node {
	size_t                     idx;                  /*     0     8 */
	uint64_t                   priority;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct heap {
	struct heap_node * *       array;                /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     allocated;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct mac_entry {
	struct hmap_node           hmap_node;            /*     0    16 */
	time_t                     expires;              /*    16     8 */
	time_t                     grat_arp_lock;        /*    24     8 */
	struct eth_addr            mac;                  /*    32     6 */
	uint16_t                   vlan;                 /*    38     2 */
	struct ovs_list            lru_node;             /*    40    16 */
	struct mac_learning_port * mlport;               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            port_lru_node;        /*    64    16 */

	/* size: 80, cachelines: 2, members: 8 */
	/* last cacheline: 16 bytes */
};
struct mac_learning_port {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct heap_node           heap_node;            /*    16    16 */
	void *                     port;                 /*    32     8 */
	struct ovs_list            port_lrus;            /*    40    16 */

	/* size: 56, cachelines: 1, members: 4 */
	/* last cacheline: 56 bytes */
};
struct mac_learning {
	struct hmap                table;                /*     0    32 */
	struct ovs_list            lrus;                 /*    32    16 */
	uint32_t                   secret;               /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int *        flood_vlans;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               idle_time;            /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     max_entries;          /*    72     8 */
	struct ovs_refcount        ref_cnt;              /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_rwlock          rwlock;               /*    88    64 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	_Bool                      need_revalidate;      /*   152     1 */

	/* XXX 7 bytes hole, try to pack */

	struct hmap                ports_by_ptr;         /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct heap                ports_by_usage;       /*   192    24 */

	/* size: 216, cachelines: 4, members: 11 */
	/* sum members: 197, holes: 4, sum holes: 19 */
	/* last cacheline: 24 bytes */
};
struct syslog_libc {
	struct syslogger           parent;               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct unaligned_be32 {
	ovs_be32                   x;                    /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct unaligned_be64 {
	ovs_be64                   x;                    /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct mf_subfield {
	const struct mf_field  *   field;                /*     0     8 */
	unsigned int               ofs;                  /*     8     4 */
	unsigned int               n_bits;               /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofpact_reg_move {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct mf_subfield         src;                  /*     8    16 */
	struct mf_subfield         dst;                  /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_stack {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct mf_subfield         subfield;             /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct vl_mff_map {
	struct cmap                cmap;                 /*     0     8 */
	struct ovs_mutex           mutex;                /*     8    48 */

	/* size: 56, cachelines: 1, members: 2 */
	/* last cacheline: 56 bytes */
};
struct nxm_field {
	uint64_t                   header;               /*     0     8 */
	enum ofp_version           version;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*    16     8 */
	enum mf_field_id           id;                   /*    24     1 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 21, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct nxm_put_ctx {
	struct ofpbuf *            output;               /*     0     8 */
	_Bool                      implied_ethernet;     /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct nxm_field_index {
	struct hmap_node           header_node;          /*     0    16 */
	struct hmap_node           name_node;            /*    16    16 */
	struct ovs_list            mf_node;              /*    32    16 */
	struct nxm_fieldconst      nf;                   /*    48    32 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */

	/* size: 80, cachelines: 2, members: 4 */
	/* last cacheline: 16 bytes */
};
struct skiplist_node {
	const void  *              data;                 /*     0     8 */
	int                        height;               /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct skiplist_node *     forward[0];           /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct skiplist {
	struct skiplist_node *     header;               /*     0     8 */
	skiplist_comparator *      cmp;                  /*     8     8 */
	void *                     cfg;                  /*    16     8 */
	int                        level;                /*    24     4 */
	uint32_t                   size;                 /*    28     4 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct hmap_position {
	unsigned int               bucket;               /*     0     4 */
	unsigned int               offset;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct sset_position {
	struct hmap_position       pos;                  /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct vport_class {
	const char  *              dpif_port;            /*     0     8 */
	struct netdev_class        netdev_class;         /*     8   536 */
	/* --- cacheline 8 boundary (512 bytes) was 32 bytes ago --- */

	/* size: 544, cachelines: 9, members: 2 */
	/* last cacheline: 32 bytes */
};
struct poll_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct pollfd              pollfd;               /*    16     8 */
	HANDLE                     wevent;               /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              where;                /*    32     8 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct poll_loop {
	struct hmap                poll_nodes;           /*     0    32 */
	long long int              timeout_when;         /*    32     8 */
	const char  *              timeout_where;        /*    40     8 */

	/* size: 48, cachelines: 1, members: 3 */
	/* last cacheline: 48 bytes */
};
struct stp_bpdu_header {
	ovs_be16                   protocol_id;          /*     0     2 */
	uint8_t                    protocol_version;     /*     2     1 */
	uint8_t                    bpdu_type;            /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct stp_config_bpdu {
	struct stp_bpdu_header     header;               /*     0     4 */
	uint8_t                    flags;                /*     4     1 */
	ovs_be64                   root_id;              /*     5     8 */
	ovs_be32                   root_path_cost;       /*    13     4 */
	ovs_be64                   bridge_id;            /*    17     8 */
	ovs_be16                   port_id;              /*    25     2 */
	ovs_be16                   message_age;          /*    27     2 */
	ovs_be16                   max_age;              /*    29     2 */
	ovs_be16                   hello_time;           /*    31     2 */
	ovs_be16                   forward_delay;        /*    33     2 */

	/* size: 35, cachelines: 1, members: 10 */
	/* last cacheline: 35 bytes */
};
struct stp_tcn_bpdu {
	struct stp_bpdu_header     header;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct stp_timer {
	_Bool                      active;               /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        value;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* sum members: 5, holes: 1, sum holes: 3 */
	/* last cacheline: 8 bytes */
};
struct stp_port {
	struct stp *               stp;                  /*     0     8 */
	char *                     port_name;            /*     8     8 */
	void *                     aux;                  /*    16     8 */
	int                        port_id;              /*    24     4 */
	enum stp_state             state;                /*    28     4 */
	int                        path_cost;            /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	stp_identifier             designated_root;      /*    40     8 */
	int                        designated_cost;      /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	stp_identifier             designated_bridge;    /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        designated_port;      /*    64     4 */
	_Bool                      topology_change_ack;  /*    68     1 */
	_Bool                      config_pending;       /*    69     1 */
	_Bool                      change_detection_enabled; /*    70     1 */

	/* XXX 1 byte hole, try to pack */

	struct stp_timer           message_age_timer;    /*    72     8 */
	struct stp_timer           forward_delay_timer;  /*    80     8 */
	struct stp_timer           hold_timer;           /*    88     8 */
	int                        tx_count;             /*    96     4 */
	int                        rx_count;             /*   100     4 */
	int                        error_count;          /*   104     4 */
	_Bool                      state_changed;        /*   108     1 */

	/* size: 112, cachelines: 2, members: 20 */
	/* sum members: 100, holes: 3, sum holes: 9 */
	/* padding: 3 */
	/* last cacheline: 48 bytes */
};
struct stp {
	struct ovs_list            node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	stp_identifier             bridge_id;            /*    24     8 */
	int                        max_age;              /*    32     4 */
	int                        hello_time;           /*    36     4 */
	int                        forward_delay;        /*    40     4 */
	int                        bridge_max_age;       /*    44     4 */
	int                        bridge_hello_time;    /*    48     4 */
	int                        bridge_forward_delay; /*    52     4 */
	int                        rq_max_age;           /*    56     4 */
	int                        rq_hello_time;        /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        rq_forward_delay;     /*    64     4 */
	int                        elapsed_remainder;    /*    68     4 */
	stp_identifier             designated_root;      /*    72     8 */
	unsigned int               root_path_cost;       /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	struct stp_port *          root_port;            /*    88     8 */
	_Bool                      topology_change_detected; /*    96     1 */
	_Bool                      topology_change;      /*    97     1 */

	/* XXX 2 bytes hole, try to pack */

	struct stp_timer           hello_timer;          /*   100     8 */
	struct stp_timer           tcn_timer;            /*   108     8 */
	struct stp_timer           topology_change_timer; /*   116     8 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) --- */
	struct stp_port            ports[255];           /*   128 28560 */
	/* --- cacheline 448 boundary (28672 bytes) was 16 bytes ago --- */
	_Bool                      fdb_needs_flush;      /* 28688     1 */

	/* XXX 7 bytes hole, try to pack */

	struct stp_port *          first_changed_port;   /* 28696     8 */
	void                       (*send_bpdu)(struct dp_packet *, int, void *); /* 28704     8 */
	void *                     aux;                  /* 28712     8 */
	struct ovs_refcount        ref_cnt;              /* 28720     4 */

	/* size: 28728, cachelines: 449, members: 27 */
	/* sum members: 28707, holes: 4, sum holes: 17 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct set_op {
	struct hmap_node           node;                 /*     0    16 */
	struct ovsdb_datum *       datum;                /*    16     8 */
	enum set_op_type           type;                 /*    24     4 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct set_op_list {
	struct hmap                hmap;                 /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ofp_error_msg {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   code;                 /*     2     2 */
	uint8_t                    data[0];              /*     4     0 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct nx_vendor_error {
	ovs_be32                   vendor;               /*     0     4 */
	ovs_be16                   type;                 /*     4     2 */
	ovs_be16                   code;                 /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct triplet {
	uint32_t                   vendor;               /*     0     4 */
	int                        type;                 /*     4     4 */
	int                        code;                 /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofperr_domain {
	const char  *              name;                 /*     0     8 */
	uint8_t                    version;              /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	enum ofperr                (*decode)(uint32_t, uint16_t, uint16_t); /*    16     8 */
	struct triplet             errors[177];          /*    24  2124 */
	/* --- cacheline 33 boundary (2112 bytes) was 36 bytes ago --- */

	/* size: 2152, cachelines: 34, members: 4 */
	/* sum members: 2141, holes: 1, sum holes: 7 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct vconn {
	const struct vconn_class  * vclass;              /*     0     8 */
	int                        state;                /*     8     4 */
	int                        error;                /*    12     4 */
	uint32_t                   allowed_versions;     /*    16     4 */
	uint32_t                   peer_versions;        /*    20     4 */
	enum ofp_version           version;              /*    24     4 */
	_Bool                      recv_any_version;     /*    28     1 */

	/* XXX 3 bytes hole, try to pack */

	char *                     name;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 8 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct vconn_class {
	const char  *              name;                 /*     0     8 */
	int                        (*open)(const char  *, uint32_t, char *, struct vconn * *, uint8_t); /*     8     8 */
	void                       (*close)(struct vconn *); /*    16     8 */
	int                        (*connect)(struct vconn *); /*    24     8 */
	int                        (*recv)(struct vconn *, struct ofpbuf * *); /*    32     8 */
	int                        (*send)(struct vconn *, struct ofpbuf *); /*    40     8 */
	void                       (*run)(struct vconn *); /*    48     8 */
	void                       (*run_wait)(struct vconn *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*wait)(struct vconn *, enum vconn_wait_type); /*    64     8 */

	/* size: 72, cachelines: 2, members: 9 */
	/* last cacheline: 8 bytes */
};
struct pvconn {
	const struct pvconn_class  * pvclass;            /*     0     8 */
	char *                     name;                 /*     8     8 */
	uint32_t                   allowed_versions;     /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct pvconn_class {
	const char  *              name;                 /*     0     8 */
	int                        (*listen)(const char  *, uint32_t, char *, struct pvconn * *, uint8_t); /*     8     8 */
	void                       (*close)(struct pvconn *); /*    16     8 */
	int                        (*accept)(struct pvconn *, struct vconn * *); /*    24     8 */
	void                       (*wait)(struct pvconn *); /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct vconn_stream {
	struct vconn               vconn;                /*     0    40 */
	struct stream *            stream;               /*    40     8 */
	struct ofpbuf *            rxbuf;                /*    48     8 */
	struct ofpbuf *            txbuf;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        n_packets;            /*    64     4 */

	/* size: 72, cachelines: 2, members: 5 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct pvconn_pstream {
	struct pvconn              pvconn;               /*     0    24 */

	/* XXX last struct has 4 bytes of padding */

	struct pstream *           pstream;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 2 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 32 bytes */
};
struct sockaddr_storage {
	sa_family_t                ss_family;            /*     0     2 */
	char                       __ss_padding[118];    /*     2   118 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */
	long unsigned int          __ss_align;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 3 */
};
struct stream {
	const struct stream_class  * class;              /*     0     8 */
	int                        state;                /*     8     4 */
	int                        error;                /*    12     4 */
	char *                     name;                 /*    16     8 */
	char *                     peer_id;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct stream_class {
	const char  *              name;                 /*     0     8 */
	_Bool                      needs_probes;         /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	int                        (*open)(const char  *, char *, struct stream * *, uint8_t); /*    16     8 */
	void                       (*close)(struct stream *); /*    24     8 */
	int                        (*connect)(struct stream *); /*    32     8 */
	ssize_t                    (*recv)(struct stream *, void *, size_t); /*    40     8 */
	ssize_t                    (*send)(struct stream *, const void  *, size_t); /*    48     8 */
	void                       (*run)(struct stream *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*run_wait)(struct stream *); /*    64     8 */
	void                       (*wait)(struct stream *, enum stream_wait_type); /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* sum members: 73, holes: 1, sum holes: 7 */
	/* last cacheline: 16 bytes */
};
struct pstream {
	const struct pstream_class  * class;             /*     0     8 */
	char *                     name;                 /*     8     8 */
	ovs_be16                   bound_port;           /*    16     2 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 6 */
	/* last cacheline: 24 bytes */
};
struct pstream_class {
	const char  *              name;                 /*     0     8 */
	_Bool                      needs_probes;         /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	int                        (*listen)(const char  *, char *, struct pstream * *, uint8_t); /*    16     8 */
	void                       (*close)(struct pstream *); /*    24     8 */
	int                        (*accept)(struct pstream *, struct stream * *); /*    32     8 */
	void                       (*wait)(struct pstream *); /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 41, holes: 1, sum holes: 7 */
	/* last cacheline: 48 bytes */
};
struct hook {
	void                       (*hook_cb)(void *);   /*     0     8 */
	void                       (*cancel_cb)(void *); /*     8     8 */
	void *                     aux;                  /*    16     8 */
	_Bool                      run_at_exit;          /*    24     1 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct rstp_times {
	uint16_t                   forward_delay;        /*     0     2 */
	uint16_t                   hello_time;           /*     2     2 */
	uint16_t                   max_age;              /*     4     2 */
	uint16_t                   message_age;          /*     6     2 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct rstp_priority_vector {
	rstp_identifier            root_bridge_id;       /*     0     8 */
	uint32_t                   root_path_cost;       /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	rstp_identifier            designated_bridge_id; /*    16     8 */
	uint16_t                   designated_port_id;   /*    24     2 */
	uint16_t                   bridge_port_id;       /*    26     2 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 24, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct rstp_bpdu {
	ovs_be16                   protocol_identifier;  /*     0     2 */
	uint8_t                    protocol_version_identifier; /*     2     1 */
	uint8_t                    bpdu_type;            /*     3     1 */
	uint8_t                    flags;                /*     4     1 */
	ovs_be64                   root_bridge_id;       /*     5     8 */
	ovs_be32                   root_path_cost;       /*    13     4 */
	ovs_be64                   designated_bridge_id; /*    17     8 */
	ovs_be16                   designated_port_id;   /*    25     2 */
	ovs_be16                   message_age;          /*    27     2 */
	ovs_be16                   max_age;              /*    29     2 */
	ovs_be16                   hello_time;           /*    31     2 */
	ovs_be16                   forward_delay;        /*    33     2 */
	uint8_t                    version1_length;      /*    35     1 */
	uint8_t                    padding[7];           /*    36     7 */

	/* size: 43, cachelines: 1, members: 14 */
	/* last cacheline: 43 bytes */
};
struct rstp_port {
	struct ovs_refcount        ref_cnt;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct rstp *              rstp;                 /*     8     8 */
	struct hmap_node           node;                 /*    16    16 */
	void *                     aux;                  /*    32     8 */
	char *                     port_name;            /*    40     8 */
	struct rstp_bpdu           received_bpdu_buffer; /*    48    43 */
	/* --- cacheline 1 boundary (64 bytes) was 27 bytes ago --- */
	_Bool                      mac_operational;      /*    91     1 */
	_Bool                      is_administrative_bridge_port; /*    92     1 */
	_Bool                      oper_point_to_point_mac; /*    93     1 */

	/* XXX 2 bytes hole, try to pack */

	enum rstp_admin_point_to_point_mac_state admin_point_to_point_mac; /*    96     4 */
	_Bool                      admin_edge;           /*   100     1 */
	_Bool                      auto_edge;            /*   101     1 */
	uint16_t                   port_number;          /*   102     2 */
	uint8_t                    priority;             /*   104     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   port_path_cost;       /*   108     4 */
	uint16_t                   edge_delay_while;     /*   112     2 */
	uint16_t                   fd_while;             /*   114     2 */
	uint16_t                   hello_when;           /*   116     2 */
	uint16_t                   mdelay_while;         /*   118     2 */
	uint16_t                   rb_while;             /*   120     2 */
	uint16_t                   rcvd_info_while;      /*   122     2 */
	uint16_t                   rr_while;             /*   124     2 */
	uint16_t                   tc_while;             /*   126     2 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	uint32_t                   ageing_time;          /*   128     4 */
	_Bool                      agree;                /*   132     1 */
	_Bool                      agreed;               /*   133     1 */

	/* XXX 2 bytes hole, try to pack */

	struct rstp_priority_vector designated_priority_vector; /*   136    32 */

	/* XXX last struct has 4 bytes of padding */

	struct rstp_times          designated_times;     /*   168     8 */
	_Bool                      disputed;             /*   176     1 */
	uint8_t                    fdb_flush;            /*   177     1 */
	_Bool                      forward;              /*   178     1 */
	_Bool                      forwarding;           /*   179     1 */
	enum rstp_info_is          info_is;              /*   180     4 */
	_Bool                      learn;                /*   184     1 */
	_Bool                      learning;             /*   185     1 */
	_Bool                      mcheck;               /*   186     1 */

	/* XXX 5 bytes hole, try to pack */

	/* --- cacheline 3 boundary (192 bytes) --- */
	struct rstp_priority_vector msg_priority;        /*   192    32 */

	/* XXX last struct has 4 bytes of padding */

	struct rstp_times          msg_times;            /*   224     8 */
	_Bool                      new_info;             /*   232     1 */
	_Bool                      oper_edge;            /*   233     1 */
	_Bool                      port_enabled;         /*   234     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   port_id;              /*   236     2 */

	/* XXX 2 bytes hole, try to pack */

	struct rstp_priority_vector port_priority;       /*   240    32 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 4 boundary (256 bytes) was 16 bytes ago --- */
	struct rstp_times          port_times;           /*   272     8 */
	_Bool                      proposed;             /*   280     1 */
	_Bool                      proposing;            /*   281     1 */
	_Bool                      rcvd_bpdu;            /*   282     1 */

	/* XXX 1 byte hole, try to pack */

	enum rstp_rcvd_info        rcvd_info;            /*   284     4 */
	_Bool                      rcvd_msg;             /*   288     1 */
	_Bool                      rcvd_rstp;            /*   289     1 */
	_Bool                      rcvd_stp;             /*   290     1 */
	_Bool                      rcvd_tc;              /*   291     1 */
	_Bool                      rcvd_tc_ack;          /*   292     1 */
	_Bool                      rcvd_tcn;             /*   293     1 */
	_Bool                      re_root;              /*   294     1 */
	_Bool                      reselect;             /*   295     1 */
	enum rstp_port_role        role;                 /*   296     4 */
	_Bool                      selected;             /*   300     1 */

	/* XXX 3 bytes hole, try to pack */

	enum rstp_port_role        selected_role;        /*   304     4 */
	_Bool                      send_rstp;            /*   308     1 */
	_Bool                      sync;                 /*   309     1 */
	_Bool                      synced;               /*   310     1 */
	_Bool                      tc_ack;               /*   311     1 */
	_Bool                      tc_prop;              /*   312     1 */
	_Bool                      tick;                 /*   313     1 */
	uint16_t                   tx_count;             /*   314     2 */
	_Bool                      updt_info;            /*   316     1 */

	/* XXX 3 bytes hole, try to pack */

	/* --- cacheline 5 boundary (320 bytes) --- */
	uint32_t                   rx_rstp_bpdu_cnt;     /*   320     4 */
	uint32_t                   error_count;          /*   324     4 */
	uint32_t                   uptime;               /*   328     4 */
	enum rstp_state            rstp_state;           /*   332     4 */
	_Bool                      state_changed;        /*   336     1 */

	/* XXX 3 bytes hole, try to pack */

	enum port_receive_state_machine port_receive_sm_state; /*   340     4 */
	enum port_protocol_migration_state_machine port_protocol_migration_sm_state; /*   344     4 */
	enum bridge_detection_state_machine bridge_detection_sm_state; /*   348     4 */
	enum port_transmit_state_machine port_transmit_sm_state; /*   352     4 */
	enum port_information_state_machine port_information_sm_state; /*   356     4 */
	enum port_role_transition_state_machine port_role_transition_sm_state; /*   360     4 */
	enum port_state_transition_state_machine port_state_transition_sm_state; /*   364     4 */
	enum topology_change_state_machine topology_change_sm_state; /*   368     4 */

	/* size: 376, cachelines: 6, members: 80 */
	/* sum members: 343, holes: 11, sum holes: 29 */
	/* padding: 4 */
	/* paddings: 3, sum paddings: 12 */
	/* last cacheline: 56 bytes */
};
struct rstp {
	struct ovs_list            node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	_Bool                      changes;              /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	enum port_role_selection_state_machine port_role_selection_sm_state; /*    28     4 */
	rstp_identifier            address;              /*    32     8 */
	uint16_t                   priority;             /*    40     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   ageing_time;          /*    44     4 */
	enum rstp_force_protocol_version force_protocol_version; /*    48     4 */
	uint16_t                   bridge_forward_delay; /*    52     2 */
	uint16_t                   bridge_hello_time;    /*    54     2 */
	uint16_t                   bridge_max_age;       /*    56     2 */
	uint16_t                   migrate_time;         /*    58     2 */
	uint16_t                   transmit_hold_count;  /*    60     2 */
	_Bool                      begin;                /*    62     1 */

	/* XXX 1 byte hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	rstp_identifier            bridge_identifier;    /*    64     8 */
	struct rstp_priority_vector bridge_priority;     /*    72    32 */

	/* XXX last struct has 4 bytes of padding */

	struct rstp_times          bridge_times;         /*   104     8 */
	struct rstp_priority_vector root_priority;       /*   112    32 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	uint16_t                   root_port_id;         /*   144     2 */
	struct rstp_times          root_times;           /*   146     8 */
	_Bool                      rstp_version;         /*   154     1 */
	_Bool                      stp_version;          /*   155     1 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap                ports;                /*   160    32 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct ovs_refcount        ref_cnt;              /*   192     4 */

	/* XXX 4 bytes hole, try to pack */

	void                       (*send_bpdu)(struct dp_packet *, void *, void *); /*   200     8 */
	void *                     aux;                  /*   208     8 */
	_Bool                      root_changed;         /*   216     1 */

	/* XXX 7 bytes hole, try to pack */

	void *                     old_root_aux;         /*   224     8 */
	void *                     new_root_aux;         /*   232     8 */

	/* size: 240, cachelines: 4, members: 29 */
	/* sum members: 219, holes: 6, sum holes: 21 */
	/* paddings: 2, sum paddings: 8 */
	/* last cacheline: 48 bytes */
};
struct ovs_header {
	int                        dp_ifindex;           /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_dp_stats {
	ovs_32aligned_u64          n_hit;                /*     0     8 */
	ovs_32aligned_u64          n_missed;             /*     8     8 */
	ovs_32aligned_u64          n_lost;               /*    16     8 */
	ovs_32aligned_u64          n_flows;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct ovs_dp_megaflow_stats {
	ovs_32aligned_u64          n_mask_hit;           /*     0     8 */
	uint32_t                   n_masks;              /*     8     4 */
	uint32_t                   pad0;                 /*    12     4 */
	ovs_32aligned_u64          pad1;                 /*    16     8 */
	ovs_32aligned_u64          pad2;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct ovs_vport_stats {
	ovs_32aligned_u64          rx_packets;           /*     0     8 */
	ovs_32aligned_u64          tx_packets;           /*     8     8 */
	ovs_32aligned_u64          rx_bytes;             /*    16     8 */
	ovs_32aligned_u64          tx_bytes;             /*    24     8 */
	ovs_32aligned_u64          rx_errors;            /*    32     8 */
	ovs_32aligned_u64          tx_errors;            /*    40     8 */
	ovs_32aligned_u64          rx_dropped;           /*    48     8 */
	ovs_32aligned_u64          tx_dropped;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct genlmsghdr {
	__u8                       cmd;                  /*     0     1 */
	__u8                       version;              /*     1     1 */
	__u16                      reserved;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct dpif_netlink_vport {
	uint8_t                    cmd;                  /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        dp_ifindex;           /*     4     4 */
	odp_port_t                 port_no;              /*     8     4 */
	enum ovs_vport_type        type;                 /*    12     4 */
	const char  *              name;                 /*    16     8 */
	uint32_t                   n_upcall_pids;        /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	const uint32_t  *          upcall_pids;          /*    32     8 */
	const struct ovs_vport_stats  * stats;           /*    40     8 */
	const struct nlattr  *     options;              /*    48     8 */
	size_t                     options_len;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 10 */
	/* sum members: 57, holes: 2, sum holes: 7 */
};
struct epoll_event {
	uint32_t                   events;               /*     0     4 */
	epoll_data_t               data;                 /*     4     8 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct dpif_class {
	const char  *              type;                 /*     0     8 */
	int                        (*init)(void);        /*     8     8 */
	int                        (*enumerate)(struct sset *, const struct dpif_class  *); /*    16     8 */
	const char  *              (*port_open_type)(const struct dpif_class  *, const char  *); /*    24     8 */
	int                        (*open)(const struct dpif_class  *, const char  *, _Bool, struct dpif * *); /*    32     8 */
	void                       (*close)(struct dpif *); /*    40     8 */
	int                        (*destroy)(struct dpif *); /*    48     8 */
	_Bool                      (*run)(struct dpif *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	void                       (*wait)(struct dpif *); /*    64     8 */
	int                        (*get_stats)(const struct dpif  *, struct dpif_dp_stats *); /*    72     8 */
	int                        (*port_add)(struct dpif *, struct netdev *, odp_port_t *); /*    80     8 */
	int                        (*port_del)(struct dpif *, odp_port_t); /*    88     8 */
	int                        (*port_set_config)(struct dpif *, odp_port_t, const struct smap  *); /*    96     8 */
	int                        (*port_query_by_number)(const struct dpif  *, odp_port_t, struct dpif_port *); /*   104     8 */
	int                        (*port_query_by_name)(const struct dpif  *, const char  *, struct dpif_port *); /*   112     8 */
	uint32_t                   (*port_get_pid)(const struct dpif  *, odp_port_t, uint32_t); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        (*port_dump_start)(const struct dpif  *, void * *); /*   128     8 */
	int                        (*port_dump_next)(const struct dpif  *, void *, struct dpif_port *); /*   136     8 */
	int                        (*port_dump_done)(const struct dpif  *, void *); /*   144     8 */
	int                        (*port_poll)(const struct dpif  *, char * *); /*   152     8 */
	void                       (*port_poll_wait)(const struct dpif  *); /*   160     8 */
	int                        (*flow_flush)(struct dpif *); /*   168     8 */
	struct dpif_flow_dump *    (*flow_dump_create)(const struct dpif  *, _Bool, char *); /*   176     8 */
	int                        (*flow_dump_destroy)(struct dpif_flow_dump *); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct dpif_flow_dump_thread * (*flow_dump_thread_create)(struct dpif_flow_dump *); /*   192     8 */
	void                       (*flow_dump_thread_destroy)(struct dpif_flow_dump_thread *); /*   200     8 */
	int                        (*flow_dump_next)(struct dpif_flow_dump_thread *, struct dpif_flow *, int); /*   208     8 */
	void                       (*operate)(struct dpif *, struct dpif_op * *, size_t); /*   216     8 */
	int                        (*recv_set)(struct dpif *, _Bool); /*   224     8 */
	int                        (*handlers_set)(struct dpif *, uint32_t); /*   232     8 */
	int                        (*set_config)(struct dpif *, const struct smap  *); /*   240     8 */
	int                        (*queue_to_priority)(const struct dpif  *, uint32_t, uint32_t *); /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int                        (*recv)(struct dpif *, uint32_t, struct dpif_upcall *, struct ofpbuf *); /*   256     8 */
	void                       (*recv_wait)(struct dpif *, uint32_t); /*   264     8 */
	void                       (*recv_purge)(struct dpif *); /*   272     8 */
	void                       (*register_dp_purge_cb)(struct dpif *, dp_purge_callback *, void *); /*   280     8 */
	void                       (*register_upcall_cb)(struct dpif *, upcall_callback *, void *); /*   288     8 */
	void                       (*enable_upcall)(struct dpif *); /*   296     8 */
	void                       (*disable_upcall)(struct dpif *); /*   304     8 */
	char *                     (*get_datapath_version)(void); /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	int                        (*ct_dump_start)(struct dpif *, struct ct_dpif_dump_state * *, const uint16_t  *, int *); /*   320     8 */
	int                        (*ct_dump_next)(struct dpif *, struct ct_dpif_dump_state *, struct ct_dpif_entry *); /*   328     8 */
	int                        (*ct_dump_done)(struct dpif *, struct ct_dpif_dump_state *); /*   336     8 */
	int                        (*ct_flush)(struct dpif *, const uint16_t  *, const struct ct_dpif_tuple  *); /*   344     8 */
	void                       (*meter_get_features)(const struct dpif  *, struct ofputil_meter_features *); /*   352     8 */
	int                        (*meter_set)(struct dpif *, ofproto_meter_id *, struct ofputil_meter_config *); /*   360     8 */
	int                        (*meter_get)(const struct dpif  *, ofproto_meter_id, struct ofputil_meter_stats *, uint16_t); /*   368     8 */
	int                        (*meter_del)(struct dpif *, ofproto_meter_id, struct ofputil_meter_stats *, uint16_t); /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */

	/* size: 384, cachelines: 6, members: 48 */
};
struct dpif {
	const struct dpif_class  * dpif_class;           /*     0     8 */
	char *                     base_name;            /*     8     8 */
	char *                     full_name;            /*    16     8 */
	uint8_t                    netflow_engine_type;  /*    24     1 */
	uint8_t                    netflow_engine_id;    /*    25     1 */

	/* size: 32, cachelines: 1, members: 5 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct dpif_flow_put {
	enum dpif_flow_put_flags   flags;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct nlattr  *     key;                  /*     8     8 */
	size_t                     key_len;              /*    16     8 */
	const struct nlattr  *     mask;                 /*    24     8 */
	size_t                     mask_len;             /*    32     8 */
	const struct nlattr  *     actions;              /*    40     8 */
	size_t                     actions_len;          /*    48     8 */
	const ovs_u128  *          ufid;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               pmd_id;               /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	struct dpif_flow_stats *   stats;                /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* sum members: 72, holes: 2, sum holes: 8 */
	/* last cacheline: 16 bytes */
};
struct dpif_flow_del {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const ovs_u128  *          ufid;                 /*    16     8 */
	_Bool                      terse;                /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               pmd_id;               /*    28     4 */
	struct dpif_flow_stats *   stats;                /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 37, holes: 1, sum holes: 3 */
	/* last cacheline: 40 bytes */
};
struct dpif_execute {
	const struct nlattr  *     actions;              /*     0     8 */
	size_t                     actions_len;          /*     8     8 */
	_Bool                      needs_help;           /*    16     1 */
	_Bool                      probe;                /*    17     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               mtu;                  /*    20     4 */
	const struct flow  *       flow;                 /*    24     8 */
	struct dp_packet *         packet;               /*    32     8 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 38, holes: 1, sum holes: 2 */
	/* last cacheline: 40 bytes */
};
struct dpif_flow_get {
	const struct nlattr  *     key;                  /*     0     8 */
	size_t                     key_len;              /*     8     8 */
	const ovs_u128  *          ufid;                 /*    16     8 */
	unsigned int               pmd_id;               /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ofpbuf *            buffer;               /*    32     8 */
	struct dpif_flow *         flow;                 /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct dpif_op {
	enum dpif_op_type          type;                 /*     0     4 */
	int                        error;                /*     4     4 */
	union {
		struct dpif_flow_put flow_put;           /*          80 */
		struct dpif_flow_del flow_del;           /*          40 */
		struct dpif_execute execute;             /*          40 */
		struct dpif_flow_get flow_get;           /*          48 */
	} u;                                             /*     8    80 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 3 */
	/* last cacheline: 24 bytes */
};
struct dpif_upcall {
	struct dp_packet           packet;               /*     0   552 */
	/* --- cacheline 8 boundary (512 bytes) was 40 bytes ago --- */
	enum dpif_upcall_type      type;                 /*   552     4 */

	/* XXX 4 bytes hole, try to pack */

	struct nlattr *            key;                  /*   560     8 */
	size_t                     key_len;              /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	ovs_u128                   ufid;                 /*   576    16 */
	struct nlattr *            mru;                  /*   592     8 */
	struct nlattr *            cutlen;               /*   600     8 */
	struct nlattr *            userdata;             /*   608     8 */
	struct nlattr *            out_tun_key;          /*   616     8 */
	struct nlattr *            actions;              /*   624     8 */

	/* size: 632, cachelines: 10, members: 10 */
	/* sum members: 628, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct dpif_flow_dump {
	struct dpif *              dpif;                 /*     0     8 */
	_Bool                      terse;                /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct dpif_flow_dump_thread {
	struct dpif *              dpif;                 /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct nl_transaction {
	struct ofpbuf *            request;              /*     0     8 */
	struct ofpbuf *            reply;                /*     8     8 */
	int                        error;                /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct odputil_keybuf {
	uint32_t                   keybuf[160];          /*     0   640 */
	/* --- cacheline 10 boundary (640 bytes) --- */

	/* size: 640, cachelines: 10, members: 1 */
};
struct odp_support {
	size_t                     max_vlan_headers;     /*     0     8 */
	size_t                     max_mpls_depth;       /*     8     8 */
	_Bool                      recirc;               /*    16     1 */
	_Bool                      ct_state;             /*    17     1 */
	_Bool                      ct_zone;              /*    18     1 */
	_Bool                      ct_mark;              /*    19     1 */
	_Bool                      ct_label;             /*    20     1 */
	_Bool                      ct_state_nat;         /*    21     1 */
	_Bool                      ct_orig_tuple;        /*    22     1 */
	_Bool                      ct_orig_tuple6;       /*    23     1 */

	/* size: 24, cachelines: 1, members: 10 */
	/* last cacheline: 24 bytes */
};
struct odp_flow_key_parms {
	const struct flow  *       flow;                 /*     0     8 */
	const struct flow  *       mask;                 /*     8     8 */
	struct odp_support         support;              /*    16    24 */
	_Bool                      probe;                /*    40     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct ofpbuf  *     key_buf;              /*    48     8 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 49, holes: 1, sum holes: 7 */
	/* last cacheline: 56 bytes */
};
struct dpif_netlink_dp {
	uint8_t                    cmd;                  /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        dp_ifindex;           /*     4     4 */
	const char  *              name;                 /*     8     8 */
	const uint32_t  *          upcall_pid;           /*    16     8 */
	uint32_t                   user_features;        /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct ovs_dp_stats  * stats;              /*    32     8 */
	const struct ovs_dp_megaflow_stats  * megaflow_stats; /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 41, holes: 2, sum holes: 7 */
	/* last cacheline: 48 bytes */
};
struct dpif_netlink_flow {
	uint8_t                    cmd;                  /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               nlmsg_flags;          /*     4     4 */
	int                        dp_ifindex;           /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct nlattr  *     key;                  /*    16     8 */
	size_t                     key_len;              /*    24     8 */
	const struct nlattr  *     mask;                 /*    32     8 */
	size_t                     mask_len;             /*    40     8 */
	const struct nlattr  *     actions;              /*    48     8 */
	size_t                     actions_len;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ovs_u128                   ufid;                 /*    64    16 */
	_Bool                      ufid_present;         /*    80     1 */
	_Bool                      ufid_terse;           /*    81     1 */

	/* XXX 6 bytes hole, try to pack */

	const struct ovs_flow_stats  * stats;            /*    88     8 */
	const uint8_t  *           tcp_flags;            /*    96     8 */
	const ovs_32aligned_u64  * used;                 /*   104     8 */
	_Bool                      clear;                /*   112     1 */
	_Bool                      probe;                /*   113     1 */

	/* size: 120, cachelines: 2, members: 17 */
	/* sum members: 101, holes: 3, sum holes: 13 */
	/* padding: 6 */
	/* last cacheline: 56 bytes */
};
struct dpif_channel {
	struct nl_sock *           sock;                 /*     0     8 */
	long long int              last_poll;            /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dpif_handler {
	struct dpif_channel *      channels;             /*     0     8 */
	struct epoll_event *       epoll_events;         /*     8     8 */
	int                        epoll_fd;             /*    16     4 */
	int                        n_events;             /*    20     4 */
	int                        event_offset;         /*    24     4 */

	/* size: 32, cachelines: 1, members: 5 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct dpif_netlink {
	struct dpif                dpif;                 /*     0    32 */

	/* XXX last struct has 6 bytes of padding */

	int                        dp_ifindex;           /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	struct fat_rwlock          upcall_lock;          /*    40    72 */
	/* --- cacheline 1 boundary (64 bytes) was 48 bytes ago --- */
	struct dpif_handler *      handlers;             /*   112     8 */
	uint32_t                   n_handlers;           /*   120     4 */
	int                        uc_array_size;        /*   124     4 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct nl_sock *           port_notifier;        /*   128     8 */
	_Bool                      refresh_channels;     /*   136     1 */

	/* size: 144, cachelines: 3, members: 8 */
	/* sum members: 133, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 16 bytes */
};
struct dpif_netlink_port_state {
	struct nl_dump             dump;                 /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ofpbuf              buf;                  /*    64    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 2 */
	/* paddings: 1, sum paddings: 7 */
};
struct dpif_netlink_flow_dump {
	struct dpif_flow_dump      up;                   /*     0    16 */

	/* XXX last struct has 7 bytes of padding */

	struct nl_dump             nl_dump;              /*    16    64 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	atomic_int                 status;               /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev_flow_dump * * netdev_dumps;        /*    88     8 */
	int                        netdev_dumps_num;     /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           netdev_lock;          /*   104    48 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	int                        netdev_current_dump;  /*   152     4 */
	int                        type;                 /*   156     4 */

	/* size: 160, cachelines: 3, members: 8 */
	/* sum members: 152, holes: 2, sum holes: 8 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 32 bytes */
};
struct dpif_netlink_flow_dump_thread {
	struct dpif_flow_dump_thread up;                 /*     0     8 */
	struct dpif_netlink_flow_dump * dump;            /*     8     8 */
	struct dpif_netlink_flow   flow;                 /*    16   120 */

	/* XXX last struct has 6 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	struct dpif_flow_stats     stats;                /*   136    32 */

	/* XXX last struct has 6 bytes of padding */

	struct ofpbuf              nl_flows;             /*   168    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	struct ofpbuf *            nl_actions;           /*   232     8 */
	int                        netdev_dump_idx;      /*   240     4 */
	_Bool                      netdev_done;          /*   244     1 */

	/* XXX 3 bytes hole, try to pack */

	struct odputil_keybuf      keybuf[50];           /*   248 32000 */
	/* --- cacheline 503 boundary (32192 bytes) was 56 bytes ago --- */
	struct odputil_keybuf      maskbuf[50];          /* 32248 32000 */
	/* --- cacheline 1003 boundary (64192 bytes) was 56 bytes ago --- */
	struct odputil_keybuf      actbuf[50];           /* 64248 32000 */
	/* --- cacheline 1503 boundary (96192 bytes) was 56 bytes ago --- */

	/* size: 96248, cachelines: 1504, members: 11 */
	/* sum members: 96245, holes: 1, sum holes: 3 */
	/* paddings: 3, sum paddings: 19 */
	/* last cacheline: 56 bytes */
};
struct dpif_netlink_ct_dump_state {
	struct ct_dpif_dump_state  up;                   /*     0     8 */
	struct nl_ct_dump_state *  nl_ct_dump;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct iovec {
	void *                     iov_base;             /*     0     8 */
	size_t                     iov_len;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct msghdr {
	void *                     msg_name;             /*     0     8 */
	socklen_t                  msg_namelen;          /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct iovec *             msg_iov;              /*    16     8 */
	size_t                     msg_iovlen;           /*    24     8 */
	void *                     msg_control;          /*    32     8 */
	size_t                     msg_controllen;       /*    40     8 */
	int                        msg_flags;            /*    48     4 */

	/* size: 56, cachelines: 1, members: 7 */
	/* sum members: 48, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct sockaddr_un {
	sa_family_t                sun_family;           /*     0     2 */
	char                       sun_path[108];        /*     2   108 */
	/* --- cacheline 1 boundary (64 bytes) was 46 bytes ago --- */

	/* size: 110, cachelines: 2, members: 2 */
	/* last cacheline: 46 bytes */
};
struct mmsghdr {
	struct msghdr              msg_hdr;              /*     0    56 */

	/* XXX last struct has 4 bytes of padding */

	unsigned int               msg_len;              /*    56     4 */

	/* size: 64, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 4 */
};
struct stat {
	__dev_t                    st_dev;               /*     0     8 */
	__ino_t                    st_ino;               /*     8     8 */
	__nlink_t                  st_nlink;             /*    16     8 */
	__mode_t                   st_mode;              /*    24     4 */
	__uid_t                    st_uid;               /*    28     4 */
	__gid_t                    st_gid;               /*    32     4 */
	int                        __pad0;               /*    36     4 */
	__dev_t                    st_rdev;              /*    40     8 */
	__off_t                    st_size;              /*    48     8 */
	__blksize_t                st_blksize;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	__blkcnt_t                 st_blocks;            /*    64     8 */
	struct timespec            st_atim;              /*    72    16 */
	struct timespec            st_mtim;              /*    88    16 */
	struct timespec            st_ctim;              /*   104    16 */
	__syscall_slong_t          __glibc_reserved[3];  /*   120    24 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */

	/* size: 144, cachelines: 3, members: 15 */
	/* last cacheline: 16 bytes */
};
struct addrinfo {
	int                        ai_flags;             /*     0     4 */
	int                        ai_family;            /*     4     4 */
	int                        ai_socktype;          /*     8     4 */
	int                        ai_protocol;          /*    12     4 */
	socklen_t                  ai_addrlen;           /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sockaddr *          ai_addr;              /*    24     8 */
	char *                     ai_canonname;         /*    32     8 */
	struct addrinfo *          ai_next;              /*    40     8 */

	/* size: 48, cachelines: 1, members: 8 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct sockaddr_ll {
	short unsigned int         sll_family;           /*     0     2 */
	__be16                     sll_protocol;         /*     2     2 */
	int                        sll_ifindex;          /*     4     4 */
	short unsigned int         sll_hatype;           /*     8     2 */
	unsigned char              sll_pkttype;          /*    10     1 */
	unsigned char              sll_halen;            /*    11     1 */
	unsigned char              sll_addr[8];          /*    12     8 */

	/* size: 20, cachelines: 1, members: 7 */
	/* last cacheline: 20 bytes */
};
struct perf_event_attr {
	__u32                      type;                 /*     0     4 */
	__u32                      size;                 /*     4     4 */
	__u64                      config;               /*     8     8 */
	union {
		__u64              sample_period;        /*           8 */
		__u64              sample_freq;          /*           8 */
	};                                               /*    16     8 */
	__u64                      sample_type;          /*    24     8 */
	__u64                      read_format;          /*    32     8 */
	__u64                      disabled:1;           /*    40:63  8 */
	__u64                      inherit:1;            /*    40:62  8 */
	__u64                      pinned:1;             /*    40:61  8 */
	__u64                      exclusive:1;          /*    40:60  8 */
	__u64                      exclude_user:1;       /*    40:59  8 */
	__u64                      exclude_kernel:1;     /*    40:58  8 */
	__u64                      exclude_hv:1;         /*    40:57  8 */
	__u64                      exclude_idle:1;       /*    40:56  8 */
	__u64                      mmap:1;               /*    40:55  8 */
	__u64                      comm:1;               /*    40:54  8 */
	__u64                      freq:1;               /*    40:53  8 */
	__u64                      inherit_stat:1;       /*    40:52  8 */
	__u64                      enable_on_exec:1;     /*    40:51  8 */
	__u64                      task:1;               /*    40:50  8 */
	__u64                      watermark:1;          /*    40:49  8 */
	__u64                      precise_ip:2;         /*    40:47  8 */
	__u64                      mmap_data:1;          /*    40:46  8 */
	__u64                      sample_id_all:1;      /*    40:45  8 */
	__u64                      exclude_host:1;       /*    40:44  8 */
	__u64                      exclude_guest:1;      /*    40:43  8 */
	__u64                      exclude_callchain_kernel:1; /*    40:42  8 */
	__u64                      exclude_callchain_user:1; /*    40:41  8 */
	__u64                      mmap2:1;              /*    40:40  8 */
	__u64                      comm_exec:1;          /*    40:39  8 */
	__u64                      use_clockid:1;        /*    40:38  8 */
	__u64                      context_switch:1;     /*    40:37  8 */
	__u64                      write_backward:1;     /*    40:36  8 */
	__u64                      namespaces:1;         /*    40:35  8 */
	__u64                      __reserved_1:35;      /*    40: 0  8 */
	union {
		__u32              wakeup_events;        /*           4 */
		__u32              wakeup_watermark;     /*           4 */
	};                                               /*    48     4 */
	__u32                      bp_type;              /*    52     4 */
	union {
		__u64              bp_addr;              /*           8 */
		__u64              config1;              /*           8 */
	};                                               /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		__u64              bp_len;               /*           8 */
		__u64              config2;              /*           8 */
	};                                               /*    64     8 */
	__u64                      branch_sample_type;   /*    72     8 */
	__u64                      sample_regs_user;     /*    80     8 */
	__u32                      sample_stack_user;    /*    88     4 */
	__s32                      clockid;              /*    92     4 */
	__u64                      sample_regs_intr;     /*    96     8 */
	__u32                      aux_watermark;        /*   104     4 */
	__u16                      sample_max_stack;     /*   108     2 */
	__u16                      __reserved_2;         /*   110     2 */

	/* size: 112, cachelines: 2, members: 47 */
	/* last cacheline: 48 bytes */
};
struct perf_counter {
	const char  *              name;                 /*     0     8 */
	_Bool                      once;                 /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	uint64_t                   n_events;             /*    16     8 */
	uint64_t                   total_count;          /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 25, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct backtrace {
	int                        n_frames;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	uintptr_t                  frames[31];           /*     8   248 */
	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 2 */
	/* sum members: 252, holes: 1, sum holes: 4 */
};
struct cmap_impl {
	union {
		OVS_CACHE_LINE_MARKER cacheline0;        /*           1 */
		struct {
			unsigned int n;                  /*     0     4 */
			unsigned int max_n;              /*     4     4 */
			unsigned int min_n;              /*     8     4 */
			uint32_t   mask;                 /*    12     4 */
			uint32_t   basis;                /*    16     4 */
		};                                       /*          20 */
		uint8_t            pad1[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	union {
		OVS_CACHE_LINE_MARKER cacheline1;        /*           1 */
		struct {
			struct cmap_bucket buckets[1];   /*    64    64 */
			/* --- cacheline 1 boundary (64 bytes) --- */
		};                                       /*          64 */
		uint8_t            pad2[64];             /*          64 */
	};                                               /*    64    64 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 2 */
};
struct cmap_position {
	unsigned int               bucket;               /*     0     4 */
	unsigned int               entry;                /*     4     4 */
	unsigned int               offset;               /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct cmap_bucket {
	union {
		struct {
			atomic_uint32_t counter;         /*     0     4 */
			uint32_t   hashes[5];            /*     4    20 */
			struct cmap_node nodes[5];       /*    24    40 */
			/* --- cacheline 1 boundary (64 bytes) --- */
		};                                       /*          64 */
		uint8_t            pad0[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct aes128 {
	uint32_t                   rk[44];               /*     0   176 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */

	/* size: 176, cachelines: 3, members: 1 */
	/* last cacheline: 48 bytes */
};
struct sha1_ctx {
	uint32_t                   digest[5];            /*     0    20 */
	uint32_t                   count_lo;             /*    20     4 */
	uint32_t                   count_hi;             /*    24     4 */
	uint32_t                   data[16];             /*    28    64 */
	/* --- cacheline 1 boundary (64 bytes) was 28 bytes ago --- */
	int                        local;                /*    92     4 */

	/* size: 96, cachelines: 2, members: 5 */
	/* last cacheline: 32 bytes */
};
struct process_info {
	long unsigned int          vsz;                  /*     0     8 */
	long unsigned int          rss;                  /*     8     8 */
	long long int              booted;               /*    16     8 */
	int                        crashes;              /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              uptime;               /*    32     8 */
	long long int              cputime;              /*    40     8 */
	int                        core_id;              /*    48     4 */
	char                       name[18];             /*    52    18 */
	/* --- cacheline 1 boundary (64 bytes) was 6 bytes ago --- */

	/* size: 72, cachelines: 2, members: 8 */
	/* sum members: 66, holes: 1, sum holes: 4 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct rlimit {
	rlim_t                     rlim_cur;             /*     0     8 */
	rlim_t                     rlim_max;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct process {
	struct ovs_list            node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	pid_t                      pid;                  /*    24     4 */
	_Bool                      exited;               /*    28     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        status;               /*    32     4 */

	/* size: 40, cachelines: 1, members: 5 */
	/* sum members: 33, holes: 1, sum holes: 3 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct raw_process_info {
	long unsigned int          vsz;                  /*     0     8 */
	long unsigned int          rss;                  /*     8     8 */
	long long int              uptime;               /*    16     8 */
	long long int              cputime;              /*    24     8 */
	pid_t                      ppid;                 /*    32     4 */
	int                        core_id;              /*    36     4 */
	char                       name[18];             /*    40    18 */

	/* size: 64, cachelines: 1, members: 7 */
	/* padding: 6 */
};
struct utf8_sequence {
	uint8_t                    octets[5][2];         /*     0    10 */

	/* size: 10, cachelines: 1, members: 1 */
	/* last cacheline: 10 bytes */
};
struct ovs_key_ethernet {
	struct eth_addr            eth_src;              /*     0     6 */
	struct eth_addr            eth_dst;              /*     6     6 */

	/* size: 12, cachelines: 1, members: 2 */
	/* last cacheline: 12 bytes */
};
struct ovs_key_ipv4 {
	ovs_be32                   ipv4_src;             /*     0     4 */
	ovs_be32                   ipv4_dst;             /*     4     4 */
	uint8_t                    ipv4_proto;           /*     8     1 */
	uint8_t                    ipv4_tos;             /*     9     1 */
	uint8_t                    ipv4_ttl;             /*    10     1 */
	uint8_t                    ipv4_frag;            /*    11     1 */

	/* size: 12, cachelines: 1, members: 6 */
	/* last cacheline: 12 bytes */
};
struct ovs_key_ipv6 {
	struct in6_addr            ipv6_src;             /*     0    16 */
	struct in6_addr            ipv6_dst;             /*    16    16 */
	ovs_be32                   ipv6_label;           /*    32     4 */
	uint8_t                    ipv6_proto;           /*    36     1 */
	uint8_t                    ipv6_tclass;          /*    37     1 */
	uint8_t                    ipv6_hlimit;          /*    38     1 */
	uint8_t                    ipv6_frag;            /*    39     1 */

	/* size: 40, cachelines: 1, members: 7 */
	/* last cacheline: 40 bytes */
};
struct ovs_key_tcp {
	ovs_be16                   tcp_src;              /*     0     2 */
	ovs_be16                   tcp_dst;              /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ovs_key_udp {
	ovs_be16                   udp_src;              /*     0     2 */
	ovs_be16                   udp_dst;              /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ovs_key_sctp {
	ovs_be16                   sctp_src;             /*     0     2 */
	ovs_be16                   sctp_dst;             /*     2     2 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct ovs_key_icmp {
	uint8_t                    icmp_type;            /*     0     1 */
	uint8_t                    icmp_code;            /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ovs_key_arp {
	ovs_be32                   arp_sip;              /*     0     4 */
	ovs_be32                   arp_tip;              /*     4     4 */
	ovs_be16                   arp_op;               /*     8     2 */
	struct eth_addr            arp_sha;              /*    10     6 */
	struct eth_addr            arp_tha;              /*    16     6 */

	/* size: 24, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 24 bytes */
};
struct ovs_key_nd {
	struct in6_addr            nd_target;            /*     0    16 */
	struct eth_addr            nd_sll;               /*    16     6 */
	struct eth_addr            nd_tll;               /*    22     6 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct ovs_key_nsh {
	uint8_t                    flags;                /*     0     1 */
	uint8_t                    mdtype;               /*     1     1 */
	uint8_t                    np;                   /*     2     1 */
	uint8_t                    pad;                  /*     3     1 */
	ovs_be32                   path_hdr;             /*     4     4 */
	ovs_be32                   c[4];                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct ovs_action_trunc {
	uint32_t                   max_len;              /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_action_push_mpls {
	ovs_be32                   mpls_lse;             /*     0     4 */
	ovs_be16                   mpls_ethertype;       /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct ovs_action_hash {
	uint32_t                   hash_alg;             /*     0     4 */
	uint32_t                   hash_basis;           /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ovs_action_push_eth {
	struct ovs_key_ethernet    addresses;            /*     0    12 */

	/* size: 12, cachelines: 1, members: 1 */
	/* last cacheline: 12 bytes */
};
struct ovs_action_encap_nsh {
	uint8_t                    flags;                /*     0     1 */
	uint8_t                    mdtype;               /*     1     1 */
	uint8_t                    mdlen;                /*     2     1 */
	uint8_t                    np;                   /*     3     1 */
	ovs_be32                   path_hdr;             /*     4     4 */
	uint8_t                    metadata[248];        /*     8   248 */
	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 6 */
};
struct icmp6_header {
	uint8_t                    icmp6_type;           /*     0     1 */
	uint8_t                    icmp6_code;           /*     1     1 */
	ovs_be16                   icmp6_cksum;          /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ovs_nd_msg {
	struct icmp6_header        icmph;                /*     0     4 */
	ovs_16aligned_be32         rso_flags;            /*     4     4 */
	union ovs_16aligned_in6_addr target;             /*     8    16 */
	struct ovs_nd_lla_opt      options[0];           /*    24     0 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct reconnect_stats {
	long long int              creation_time;        /*     0     8 */
	long long int              last_activity;        /*     8     8 */
	long long int              last_connected;       /*    16     8 */
	long long int              last_disconnected;    /*    24     8 */
	int                        backoff;              /*    32     4 */
	unsigned int               seqno;                /*    36     4 */
	_Bool                      is_connected;         /*    40     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               msec_since_connect;   /*    44     4 */
	unsigned int               msec_since_disconnect; /*    48     4 */
	unsigned int               total_connected_duration; /*    52     4 */
	unsigned int               n_attempted_connections; /*    56     4 */
	unsigned int               n_successful_connections; /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	const char  *              state;                /*    64     8 */
	unsigned int               state_elapsed;        /*    72     4 */

	/* size: 80, cachelines: 2, members: 14 */
	/* sum members: 73, holes: 1, sum holes: 3 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct reconnect {
	char *                     name;                 /*     0     8 */
	int                        min_backoff;          /*     8     4 */
	int                        max_backoff;          /*    12     4 */
	int                        probe_interval;       /*    16     4 */
	_Bool                      passive;              /*    20     1 */

	/* XXX 3 bytes hole, try to pack */

	enum vlog_level            info;                 /*    24     4 */
	enum state                 state;                /*    28     4 */
	long long int              state_entered;        /*    32     8 */
	int                        backoff;              /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_activity;        /*    48     8 */
	long long int              last_connected;       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long long int              last_disconnected;    /*    64     8 */
	unsigned int               max_tries;            /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              creation_time;        /*    80     8 */
	unsigned int               n_attempted_connections; /*    88     4 */
	unsigned int               n_successful_connections; /*    92     4 */
	unsigned int               total_connected_duration; /*    96     4 */
	unsigned int               seqno;                /*   100     4 */

	/* size: 104, cachelines: 2, members: 18 */
	/* sum members: 93, holes: 3, sum holes: 11 */
	/* last cacheline: 40 bytes */
};
struct ovs_barrier {
	uint32_t                   size;                 /*     0     4 */
	atomic_count               count;                /*     4     4 */
	struct seq *               seq;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ovsthread_key {
	struct ovs_list            list_node;            /*     0    16 */
	void                       (*destructor)(void *); /*    16     8 */
	unsigned int               index;                /*    24     4 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct ovsthread_stats {
	struct ovs_mutex           mutex;                /*     0    48 */
	volatile volatile void *   buckets;              /*    48   128 */
	/* --- cacheline 2 boundary (128 bytes) was 48 bytes ago --- */

	/* size: 176, cachelines: 3, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ovsthread_aux {
	void *                     (*start)(void *);     /*     0     8 */
	void *                     arg;                  /*     8     8 */
	char                       name[16];             /*    16    16 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct ovsthread_key_slots {
	struct ovs_list            list_node;            /*     0    16 */
	void * *                   p1[1024];             /*    16  8192 */
	/* --- cacheline 128 boundary (8192 bytes) was 16 bytes ago --- */

	/* size: 8208, cachelines: 129, members: 2 */
	/* last cacheline: 16 bytes */
};
struct lacp_settings {
	char *                     name;                 /*     0     8 */
	struct eth_addr            id;                   /*     8     6 */
	uint16_t                   priority;             /*    14     2 */
	_Bool                      active;               /*    16     1 */
	_Bool                      fast;                 /*    17     1 */
	_Bool                      fallback_ab_cfg;      /*    18     1 */

	/* size: 24, cachelines: 1, members: 6 */
	/* padding: 5 */
	/* last cacheline: 24 bytes */
};
struct lacp_slave_settings {
	char *                     name;                 /*     0     8 */
	uint16_t                   id;                   /*     8     2 */
	uint16_t                   priority;             /*    10     2 */
	uint16_t                   key;                  /*    12     2 */

	/* size: 16, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 16 bytes */
};
struct lacp_slave_stats {
	struct eth_addr            dot3adAggPortActorSystemID; /*     0     6 */
	struct eth_addr            dot3adAggPortPartnerOperSystemID; /*     6     6 */
	uint32_t                   dot3adAggPortAttachedAggID; /*    12     4 */
	uint8_t                    dot3adAggPortActorAdminState; /*    16     1 */
	uint8_t                    dot3adAggPortActorOperState; /*    17     1 */
	uint8_t                    dot3adAggPortPartnerAdminState; /*    18     1 */
	uint8_t                    dot3adAggPortPartnerOperState; /*    19     1 */
	uint32_t                   dot3adAggPortStatsLACPDUsRx; /*    20     4 */
	uint32_t                   dot3adAggPortStatsIllegalRx; /*    24     4 */
	uint32_t                   dot3adAggPortStatsLACPDUsTx; /*    28     4 */

	/* size: 32, cachelines: 1, members: 10 */
	/* last cacheline: 32 bytes */
};
struct timer {
	long long int              t;                    /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct lacp_info {
	ovs_be16                   sys_priority;         /*     0     2 */
	struct eth_addr            sys_id;               /*     2     6 */
	ovs_be16                   key;                  /*     8     2 */
	ovs_be16                   port_priority;        /*    10     2 */
	ovs_be16                   port_id;              /*    12     2 */
	uint8_t                    state;                /*    14     1 */

	/* size: 15, cachelines: 1, members: 6 */
	/* last cacheline: 15 bytes */
};
struct lacp_pdu {
	uint8_t                    subtype;              /*     0     1 */
	uint8_t                    version;              /*     1     1 */
	uint8_t                    actor_type;           /*     2     1 */
	uint8_t                    actor_len;            /*     3     1 */
	struct lacp_info           actor;                /*     4    15 */
	uint8_t                    z1[3];                /*    19     3 */
	uint8_t                    partner_type;         /*    22     1 */
	uint8_t                    partner_len;          /*    23     1 */
	struct lacp_info           partner;              /*    24    15 */
	uint8_t                    z2[3];                /*    39     3 */
	uint8_t                    collector_type;       /*    42     1 */
	uint8_t                    collector_len;        /*    43     1 */
	ovs_be16                   collector_delay;      /*    44     2 */
	uint8_t                    z3[64];               /*    46    64 */
	/* --- cacheline 1 boundary (64 bytes) was 46 bytes ago --- */

	/* size: 110, cachelines: 2, members: 14 */
	/* last cacheline: 46 bytes */
};
struct lacp {
	struct ovs_list            node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	struct eth_addr            sys_id;               /*    24     6 */
	uint16_t                   sys_priority;         /*    30     2 */
	_Bool                      active;               /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	struct hmap                slaves;               /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct slave *             key_slave;            /*    72     8 */
	_Bool                      fast;                 /*    80     1 */
	_Bool                      negotiated;           /*    81     1 */
	_Bool                      update;               /*    82     1 */
	_Bool                      fallback_ab;          /*    83     1 */
	struct ovs_refcount        ref_cnt;              /*    84     4 */

	/* size: 88, cachelines: 2, members: 12 */
	/* sum members: 81, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct slave {
	void *                     aux;                  /*     0     8 */
	struct hmap_node           node;                 /*     8    16 */
	struct lacp *              lacp;                 /*    24     8 */
	uint16_t                   port_id;              /*    32     2 */
	uint16_t                   port_priority;        /*    34     2 */
	uint16_t                   key;                  /*    36     2 */

	/* XXX 2 bytes hole, try to pack */

	char *                     name;                 /*    40     8 */
	enum slave_status          status;               /*    48     4 */
	_Bool                      attached;             /*    52     1 */
	struct lacp_info           partner;              /*    53    15 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	struct lacp_info           ntt_actor;            /*    68    15 */

	/* XXX 5 bytes hole, try to pack */

	struct timer               tx;                   /*    88     8 */
	struct timer               rx;                   /*    96     8 */
	uint32_t                   count_rx_pdus;        /*   104     4 */
	uint32_t                   count_rx_pdus_bad;    /*   108     4 */
	uint32_t                   count_tx_pdus;        /*   112     4 */

	/* size: 120, cachelines: 2, members: 16 */
	/* sum members: 109, holes: 2, sum holes: 7 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct simap_node {
	struct hmap_node           node;                 /*     0    16 */
	char *                     name;                 /*    16     8 */
	unsigned int               data;                 /*    24     4 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct protocol {
	const char  *              name;                 /*     0     8 */
	uint16_t                   dl_type;              /*     8     2 */
	uint8_t                    nw_proto;             /*    10     1 */

	/* size: 16, cachelines: 1, members: 3 */
	/* padding: 5 */
	/* last cacheline: 16 bytes */
};
struct object_collection {
	void * *                   objs;                 /*     0     8 */
	size_t                     n;                    /*     8     8 */
	size_t                     capacity;             /*    16     8 */
	void *                     stub[5];              /*    24    40 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 4 */
};
struct color_key {
	const char  *              name;                 /*     0     8 */
	char * *                   var_ptr;              /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct pvector_entry {
	int                        priority;             /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     ptr;                  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct pvector_impl {
	size_t                     size;                 /*     0     8 */
	size_t                     allocated;            /*     8     8 */
	struct pvector_entry       vector[0];            /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct pvector {
	struct {
		struct pvector_impl * p;                 /*     0     8 */
	} impl;                                          /*     0     8 */
	struct pvector_impl *      temp;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct pvector_cursor {
	size_t                     size;                 /*     0     8 */
	size_t                     entry_idx;            /*     8     8 */
	const struct pvector_entry  * vector;            /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct rculist {
	struct rculist *           prev;                 /*     0     8 */
	struct {
		struct rculist *   p;                    /*     8     8 */
	} next;                                          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct versions {
	ovs_version_t              add_version;          /*     0     8 */
	ovs_version_t              remove_version;       /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct trie_node {
	uint32_t                   prefix;               /*     0     4 */
	uint8_t                    n_bits;               /*     4     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned int               n_rules;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	rcu_trie_ptr               edges[2];             /*    16    16 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 25, holes: 2, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct cls_trie {
	const struct mf_field  *   field;                /*     0     8 */
	rcu_trie_ptr               root;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct classifier {
	int                        n_rules;              /*     0     4 */
	uint8_t                    n_flow_segments;      /*     4     1 */
	uint8_t                    flow_segments[3];     /*     5     3 */
	struct cmap                subtables_map;        /*     8     8 */
	struct pvector             subtables;            /*    16    16 */
	struct cmap                partitions;           /*    32     8 */
	struct cls_trie            tries[3];             /*    40    48 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	unsigned int               n_tries;              /*    88     4 */
	_Bool                      publish;              /*    92     1 */

	/* size: 96, cachelines: 2, members: 9 */
	/* padding: 3 */
	/* last cacheline: 32 bytes */
};
struct cls_conjunction {
	uint32_t                   id;                   /*     0     4 */
	uint8_t                    clause;               /*     4     1 */
	uint8_t                    n_clauses;            /*     5     1 */

	/* size: 8, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct cls_match {
	struct {
		struct cls_match * p;                    /*     0     8 */
	} next;                                          /*     0     8 */
	struct {
		struct cls_conjunction_set * p;          /*     8     8 */
	} conj_set;                                      /*     8     8 */
	intconst                   priority;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct cmap_node           cmap_node;            /*    24     8 */
	struct versions            versions;             /*    32    16 */
	const struct cls_rule  *   cls_rule;             /*    48     8 */
	struct miniflowconst       flow;                 /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 7 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* last cacheline: 8 bytes */
};
struct cls_rule {
	struct rculist             node;                 /*     0    16 */
	intconst                   priority;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct {
		struct cls_match * p;                    /*    24     8 */
	} cls_match;                                     /*    24     8 */
	struct minimatchconst      match;                /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct cls_cursor {
	const struct classifier  * cls;                  /*     0     8 */
	const struct cls_subtable  * subtable;           /*     8     8 */
	const struct cls_rule  *   target;               /*    16     8 */
	ovs_version_t              version;              /*    24     8 */
	struct pvector_cursor      subtables;            /*    32    24 */
	const struct cls_rule  *   rule;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
};
struct cls_subtable {
	struct cmap_node           cmap_node;            /*     0     8 */
	int                        max_priority;         /*     8     4 */
	unsigned int               max_count;            /*    12     4 */
	struct rculist             rules_list;           /*    16    16 */
	uint8_tconst               n_indices;            /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct flowmap const index_maps;           /*    40    64 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	unsigned int               trie_plen[3];         /*   104    12 */
	intconst                   ports_mask_len;       /*   116     4 */
	struct ccmap               indices[3];           /*   120    24 */
	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	rcu_trie_ptr               ports_trie;           /*   144     8 */
	struct cmap                rules;                /*   152     8 */
	struct minimaskconst       mask;                 /*   160    16 */

	/* size: 176, cachelines: 3, members: 12 */
	/* sum members: 169, holes: 1, sum holes: 7 */
	/* last cacheline: 48 bytes */
};
struct ccmap {
	struct {
		struct ccmap_impl * p;                   /*     0     8 */
	} impl;                                          /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct cls_conjunction_set {
	struct cls_match *         match;                /*     0     8 */
	int                        priority;             /*     8     4 */
	unsigned int               n;                    /*    12     4 */
	unsigned int               min_n_clauses;        /*    16     4 */
	struct cls_conjunction     conj[0];              /*    20     0 */

	/* size: 24, cachelines: 1, members: 5 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct trie_ctx {
	const struct cls_trie  *   trie;                 /*     0     8 */
	_Bool                      lookup_done;          /*     8     1 */
	uint8_t                    be32ofs;              /*     9     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               maskbits;             /*    12     4 */
	union trie_prefix          match_plens;          /*    16    16 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct conjunctive_match {
	struct hmap_node           hmap_node;            /*     0    16 */
	uint32_t                   id;                   /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   clauses;              /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct nlmsgerr {
	int                        error;                /*     0     4 */
	struct nlmsghdr            msg;                  /*     4    16 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct pcap_hdr {
	uint32_t                   magic_number;         /*     0     4 */
	uint16_t                   version_major;        /*     4     2 */
	uint16_t                   version_minor;        /*     6     2 */
	int32_t                    thiszone;             /*     8     4 */
	uint32_t                   sigfigs;              /*    12     4 */
	uint32_t                   snaplen;              /*    16     4 */
	uint32_t                   network;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct pcaprec_hdr {
	uint32_t                   ts_sec;               /*     0     4 */
	uint32_t                   ts_usec;              /*     4     4 */
	uint32_t                   incl_len;             /*     8     4 */
	uint32_t                   orig_len;             /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct tcp_key {
	ovs_be32                   nw_src;               /*     0     4 */
	ovs_be32                   nw_dst;               /*     4     4 */
	ovs_be16                   tp_src;               /*     8     2 */
	ovs_be16                   tp_dst;               /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct tcp_stream {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct tcp_key             key;                  /*    16    12 */
	uint32_t                   seq_no;               /*    28     4 */
	struct dp_packet           payload;              /*    32   552 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */

	/* size: 584, cachelines: 10, members: 4 */
	/* last cacheline: 8 bytes */
};
struct tcp_reader {
	struct hmap                streams;              /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovs_key_ct_labels {
	union {
		uint8_t            ct_labels[16];        /*          16 */
		uint32_t           ct_labels_32[4];      /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct flow_for_each_in_maps_aux {
	const struct flow  *       flow;                 /*     0     8 */
	struct flowmap_aux         map_aux;              /*     8    24 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct latch {
	int                        fds[2];               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct ct_addr {
	union {
		ovs_16aligned_be32 ipv4;                 /*           4 */
		union ovs_16aligned_in6_addr ipv6;       /*          16 */
		ovs_be32           ipv4_aligned;         /*           4 */
		struct in6_addr    ipv6_aligned;         /*          16 */
	};                                               /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct nat_action_info_t {
	struct ct_addr             min_addr;             /*     0    16 */
	struct ct_addr             max_addr;             /*    16    16 */
	uint16_t                   min_port;             /*    32     2 */
	uint16_t                   max_port;             /*    34     2 */
	uint16_t                   nat_action;           /*    36     2 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* last cacheline: 40 bytes */
};
struct conntrack_dump {
	struct conntrack *         ct;                   /*     0     8 */
	unsigned int               bucket;               /*     8     4 */
	struct hmap_position       bucket_pos;           /*    12     8 */
	_Bool                      filter_zone;          /*    20     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   zone;                 /*    22     2 */

	/* size: 24, cachelines: 1, members: 5 */
	/* sum members: 23, holes: 1, sum holes: 1 */
	/* last cacheline: 24 bytes */
};
struct conntrack {
	struct conntrack_bucket    buckets[256];         /*     0 79872 */
	/* --- cacheline 1248 boundary (79872 bytes) --- */
	uint32_t                   hash_basis;           /* 79872     4 */

	/* XXX 4 bytes hole, try to pack */

	pthread_t                  clean_thread;         /* 79880     8 */
	struct latch               clean_thread_exit;    /* 79888     8 */
	atomic_count               n_conn;               /* 79896     4 */
	unsigned int               n_conn_limit;         /* 79900     4 */
	struct hmap                nat_conn_keys;        /* 79904    32 */
	/* --- cacheline 1249 boundary (79936 bytes) --- */
	struct hmap                alg_expectations;     /* 79936    32 */
	struct ovs_list            alg_exp_list;         /* 79968    16 */
	struct ct_rwlock           resources_lock;       /* 79984    64 */
	/* --- cacheline 1250 boundary (80000 bytes) was 48 bytes ago --- */

	/* size: 80048, cachelines: 1251, members: 10 */
	/* sum members: 80044, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ct_lock {
	struct ovs_mutex           lock;                 /*     0    48 */

	/* size: 48, cachelines: 1, members: 1 */
	/* last cacheline: 48 bytes */
};
struct ct_rwlock {
	struct ovs_rwlock          lock;                 /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct conntrack_bucket {
	struct ct_lock             lock;                 /*     0    48 */
	struct hmap                connections;          /*    48    32 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	struct ovs_list            exp_lists[11];        /*    80   176 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct ovs_mutex           cleanup_mutex;        /*   256    48 */
	long long int              next_cleanup;         /*   304     8 */

	/* size: 312, cachelines: 5, members: 5 */
	/* last cacheline: 56 bytes */
};
struct hmapx_node {
	struct hmap_node           hmap_node;            /*     0    16 */
	void *                     data;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct hmapx {
	struct hmap                map;                  /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct netdev_flow_key {
	uint32_t                   hash;                 /*     0     4 */
	uint32_t                   len;                  /*     4     4 */
	struct miniflow            mf;                   /*     8    16 */
	uint64_t                   buf[71];              /*    24   568 */
	/* --- cacheline 9 boundary (576 bytes) was 16 bytes ago --- */

	/* size: 592, cachelines: 10, members: 4 */
	/* last cacheline: 16 bytes */
};
struct emc_entry {
	struct dp_netdev_flow *    flow;                 /*     0     8 */
	struct netdev_flow_key     key;                  /*     8   592 */
	/* --- cacheline 9 boundary (576 bytes) was 24 bytes ago --- */

	/* size: 600, cachelines: 10, members: 2 */
	/* last cacheline: 24 bytes */
};
struct dp_netdev_flow {
	struct flowconst           flow;                 /*     0   672 */
	/* --- cacheline 10 boundary (640 bytes) was 32 bytes ago --- */
	struct cmap_nodeconst      node;                 /*   672     8 */
	ovs_u128const              ufid;                 /*   680    16 */
	unsigned intconst          pmd_id;               /*   696     4 */
	struct ovs_refcount        ref_cnt;              /*   700     4 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	_Bool                      dead;                 /*   704     1 */

	/* XXX 7 bytes hole, try to pack */

	struct dp_netdev_flow_stats stats;               /*   712    32 */
	struct {
		struct dp_netdev_actions * p;            /*   744     8 */
	} actions;                                       /*   744     8 */
	struct packet_batch_per_flow * batch;            /*   752     8 */
	struct dpcls_rule          cr;                   /*   760   608 */
	/* --- cacheline 21 boundary (1344 bytes) was 24 bytes ago --- */

	/* size: 1368, cachelines: 22, members: 10 */
	/* sum members: 1361, holes: 1, sum holes: 7 */
	/* last cacheline: 24 bytes */
};
struct emc_cache {
	struct emc_entry           entries[8192];        /*     0 4915200 */
	/* --- cacheline 76800 boundary (4915200 bytes) --- */
	int                        sweep_idx;            /* 4915200     4 */

	/* size: 4915208, cachelines: 76801, members: 2 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct dpcls {
	struct cmap_node           node;                 /*     0     8 */
	odp_port_t                 in_port;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct cmap                subtables_map;        /*    16     8 */
	struct pvector             subtables;            /*    24    16 */

	/* size: 40, cachelines: 1, members: 4 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct dpcls_rule {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct netdev_flow_key *   mask;                 /*     8     8 */
	struct netdev_flow_key     flow;                 /*    16   592 */
	/* --- cacheline 9 boundary (576 bytes) was 32 bytes ago --- */

	/* size: 608, cachelines: 10, members: 3 */
	/* last cacheline: 32 bytes */
};
struct dp_meter_band {
	struct ofputil_meter_band  up;                   /*     0    12 */
	uint32_t                   bucket;               /*    12     4 */
	uint64_t                   packet_count;         /*    16     8 */
	uint64_t                   byte_count;           /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct dp_meter {
	uint16_t                   flags;                /*     0     2 */
	uint16_t                   n_bands;              /*     2     2 */
	uint32_t                   max_delta_t;          /*     4     4 */
	uint64_t                   used;                 /*     8     8 */
	uint64_t                   packet_count;         /*    16     8 */
	uint64_t                   byte_count;           /*    24     8 */
	struct dp_meter_band       bands[0];             /*    32     0 */

	/* size: 32, cachelines: 1, members: 7 */
	/* last cacheline: 32 bytes */
};
struct dp_netdev {
	const struct dpif_class  *const class;           /*     0     8 */
	const char  *const         name;                 /*     8     8 */
	struct dpif *              dpif;                 /*    16     8 */
	struct ovs_refcount        ref_cnt;              /*    24     4 */
	struct {
		_Bool              __val;                /*    28     1 */
	} destroyed;                                     /*    28     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ovs_mutex           port_mutex;           /*    32    48 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */
	struct hmap                ports;                /*    80    32 */
	struct seq *               port_seq;             /*   112     8 */
	struct ovs_mutex           meter_locks[64];      /*   120  3072 */
	/* --- cacheline 49 boundary (3136 bytes) was 56 bytes ago --- */
	struct dp_meter *          meters[65536];        /*  3192 524288 */

	/* XXX 8 bytes hole, try to pack */

	/* --- cacheline 8242 boundary (527488 bytes) --- */
	atomic_uint32_t            emc_insert_min;       /* 527488     4 */

	/* XXX 4 bytes hole, try to pack */

	struct fat_rwlock          upcall_rwlock;        /* 527496    72 */
	/* --- cacheline 8243 boundary (527552 bytes) was 16 bytes ago --- */
	upcall_callback *          upcall_cb;            /* 527568     8 */
	void *                     upcall_aux;           /* 527576     8 */
	dp_purge_callback *        dp_purge_cb;          /* 527584     8 */
	void *                     dp_purge_aux;         /* 527592     8 */
	struct cmap                poll_threads;         /* 527600     8 */
	struct id_pool *           tx_qid_pool;          /* 527608     8 */
	/* --- cacheline 8244 boundary (527616 bytes) --- */
	struct ovs_mutex           tx_qid_pool_mutex;    /* 527616    48 */
	struct ovs_mutex           non_pmd_mutex;        /* 527664    48 */
	/* --- cacheline 8245 boundary (527680 bytes) was 32 bytes ago --- */
	ovsthread_key_t            per_pmd_key;          /* 527712     8 */
	struct seq *               reconfigure_seq;      /* 527720     8 */
	uint64_t                   last_reconfigure_seq; /* 527728     8 */
	char *                     pmd_cmask;            /* 527736     8 */
	/* --- cacheline 8246 boundary (527744 bytes) --- */
	uint64_t                   last_tnl_conf_seq;    /* 527744     8 */
	struct conntrack           conntrack;            /* 527752 80048 */
	/* --- cacheline 9496 boundary (607744 bytes) was 56 bytes ago --- */

	/* size: 607808, cachelines: 9497, members: 26 */
	/* sum members: 607785, holes: 3, sum holes: 15 */
	/* padding: 8 */
};
struct dp_netdev_rxq {
	struct dp_netdev_port *    port;                 /*     0     8 */
	struct netdev_rxq *        rx;                   /*     8     8 */
	unsigned int               core_id;              /*    16     4 */
	unsigned int               intrvl_idx;           /*    20     4 */
	struct dp_netdev_pmd_thread * pmd;               /*    24     8 */
	atomic_ullong              cycles[2];            /*    32    16 */
	atomic_ullong              cycles_intrvl[6];     /*    48    48 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 7 */
	/* last cacheline: 32 bytes */
};
struct dp_netdev_port {
	odp_port_t                 port_no;              /*     0     4 */
	_Bool                      dynamic_txqs;         /*     4     1 */
	_Bool                      need_reconfigure;     /*     5     1 */

	/* XXX 2 bytes hole, try to pack */

	struct netdev *            netdev;               /*     8     8 */
	struct hmap_node           node;                 /*    16    16 */
	struct netdev_saved_flags * sf;                  /*    32     8 */
	struct dp_netdev_rxq *     rxqs;                 /*    40     8 */
	unsigned int               n_rxq;                /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	unsigned int *             txq_used;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_mutex           txq_used_mutex;       /*    64    48 */
	char *                     type;                 /*   112     8 */
	char *                     rxq_affinity_list;    /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 12 */
	/* sum members: 122, holes: 2, sum holes: 6 */
};
struct dp_netdev_pmd_thread {
	struct dp_netdev *         dp;                   /*     0     8 */
	struct ovs_refcount        ref_cnt;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct cmap_node           node;                 /*    16     8 */
	pthread_cond_t             cond;                 /*    24    48 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct ovs_mutex           cond_mutex;           /*    72    48 */
	struct emc_cache           flow_cache;           /*   120 4915208 */

	/* XXX last struct has 4 bytes of padding */

	/* --- cacheline 76802 boundary (4915328 bytes) --- */
	struct ovs_mutex           flow_mutex;           /* 4915328    48 */
	struct cmap                flow_table;           /* 4915376     8 */
	struct cmap                classifiers;          /* 4915384     8 */
	/* --- cacheline 76803 boundary (4915392 bytes) --- */
	long long int              next_optimization;    /* 4915392     8 */
	long long int              rxq_next_cycle_store; /* 4915400     8 */
	struct dp_netdev_pmd_stats stats;                /* 4915408    56 */
	/* --- cacheline 76804 boundary (4915456 bytes) was 8 bytes ago --- */
	struct dp_netdev_pmd_cycles cycles;              /* 4915464    16 */
	struct dp_netdev_pmd_thread_ctx ctx;             /* 4915480    16 */
	struct latch               exit_latch;           /* 4915496     8 */
	struct seq *               reload_seq;           /* 4915504     8 */
	uint64_t                   last_reload_seq;      /* 4915512     8 */
	/* --- cacheline 76805 boundary (4915520 bytes) --- */
	atomic_bool                reload;               /* 4915520     1 */

	/* XXX 7 bytes hole, try to pack */

	pthread_t                  thread;               /* 4915528     8 */
	unsigned int               core_id;              /* 4915536     4 */
	int                        numa_id;              /* 4915540     4 */
	_Bool                      isolated;             /* 4915544     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   static_tx_qid;        /* 4915548     4 */
	struct ovs_mutex           port_mutex;           /* 4915552    48 */
	/* --- cacheline 76806 boundary (4915584 bytes) was 16 bytes ago --- */
	struct hmap                poll_list;            /* 4915600    32 */
	struct hmap                tx_ports;             /* 4915632    32 */
	/* --- cacheline 76807 boundary (4915648 bytes) was 16 bytes ago --- */
	struct hmap                tnl_port_cache;       /* 4915664    32 */
	struct hmap                send_port_cache;      /* 4915696    32 */
	/* --- cacheline 76808 boundary (4915712 bytes) was 16 bytes ago --- */
	long long unsigned int     stats_zero[7];        /* 4915728    56 */
	/* --- cacheline 76809 boundary (4915776 bytes) was 8 bytes ago --- */
	uint64_t                   cycles_zero[2];       /* 4915784    16 */
	_Bool                      need_reload;          /* 4915800     1 */

	/* size: 4915808, cachelines: 76810, members: 31 */
	/* sum members: 4915787, holes: 3, sum holes: 14 */
	/* padding: 7 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 32 bytes */
};
struct dp_netdev_flow_stats {
	atomic_llong               used;                 /*     0     8 */
	atomic_ullong              packet_count;         /*     8     8 */
	atomic_ullong              byte_count;           /*    16     8 */
	atomic_uint16_t            tcp_flags;            /*    24     2 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 6 */
	/* last cacheline: 32 bytes */
};
struct dp_netdev_actions {
	unsigned int               size;                 /*     0     4 */
	struct nlattr              actions[0];           /*     4     0 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct packet_batch_per_flow {
	unsigned int               byte_count;           /*     0     4 */
	uint16_t                   tcp_flags;            /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct dp_netdev_flow *    flow;                 /*     8     8 */
	struct dp_packet_batch     array;                /*    16   272 */
	/* --- cacheline 4 boundary (256 bytes) was 32 bytes ago --- */

	/* size: 288, cachelines: 5, members: 4 */
	/* sum members: 286, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct dp_netdev_pmd_stats {
	atomic_ullong              n[7];                 /*     0    56 */

	/* size: 56, cachelines: 1, members: 1 */
	/* last cacheline: 56 bytes */
};
struct dp_netdev_pmd_cycles {
	atomic_ullong              n[2];                 /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct polled_queue {
	struct dp_netdev_rxq *     rxq;                  /*     0     8 */
	odp_port_t                 port_no;              /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct rxq_poll {
	struct dp_netdev_rxq *     rxq;                  /*     0     8 */
	struct hmap_node           node;                 /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct tx_port {
	struct dp_netdev_port *    port;                 /*     0     8 */
	int                        qid;                  /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long long int              last_used;            /*    16     8 */
	struct hmap_node           node;                 /*    24    16 */
	struct dp_packet_batch     output_pkts;          /*    40   272 */
	/* --- cacheline 4 boundary (256 bytes) was 56 bytes ago --- */

	/* size: 312, cachelines: 5, members: 5 */
	/* sum members: 308, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct dp_netdev_pmd_thread_ctx {
	long long int              now;                  /*     0     8 */
	long long unsigned int     last_cycles;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dpif_netdev {
	struct dpif                dpif;                 /*     0    32 */

	/* XXX last struct has 6 bytes of padding */

	struct dp_netdev *         dp;                   /*    32     8 */
	uint64_t                   last_port_seq;        /*    40     8 */

	/* size: 48, cachelines: 1, members: 3 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct dp_netdev_port_state {
	struct hmap_position       position;             /*     0     8 */
	char *                     name;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dpif_netdev_flow_dump {
	struct dpif_flow_dump      up;                   /*     0    16 */

	/* XXX last struct has 7 bytes of padding */

	struct cmap_position       poll_thread_pos;      /*    16    12 */
	struct cmap_position       flow_pos;             /*    28    12 */
	struct dp_netdev_pmd_thread * cur_pmd;           /*    40     8 */
	int                        status;               /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_mutex           mutex;                /*    56    48 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */

	/* size: 104, cachelines: 2, members: 6 */
	/* sum members: 100, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 40 bytes */
};
struct dpif_netdev_flow_dump_thread {
	struct dpif_flow_dump_thread up;                 /*     0     8 */
	struct dpif_netdev_flow_dump * dump;             /*     8     8 */
	struct odputil_keybuf      keybuf[50];           /*    16 32000 */
	/* --- cacheline 500 boundary (32000 bytes) was 16 bytes ago --- */
	struct odputil_keybuf      maskbuf[50];          /* 32016 32000 */
	/* --- cacheline 1000 boundary (64000 bytes) was 16 bytes ago --- */

	/* size: 64016, cachelines: 1001, members: 4 */
	/* last cacheline: 16 bytes */
};
struct rr_numa_list {
	struct hmap                numas;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct rr_numa {
	struct hmap_node           node;                 /*     0    16 */
	int                        numa_id;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct dp_netdev_pmd_thread * * pmds;            /*    24     8 */
	int                        n_pmds;               /*    32     4 */
	int                        cur_index;            /*    36     4 */
	_Bool                      idx_inc;              /*    40     1 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 37, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct dp_netdev_execute_aux {
	struct dp_netdev_pmd_thread * pmd;               /*     0     8 */
	const struct flow  *       flow;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dp_netdev_ct_dump {
	struct ct_dpif_dump_state  up;                   /*     0     8 */
	struct conntrack_dump      dump;                 /*     8    24 */
	struct conntrack *         ct;                   /*    32     8 */
	struct dp_netdev *         dp;                   /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* last cacheline: 48 bytes */
};
struct dpcls_subtable {
	struct cmap_node           cmap_node;            /*     0     8 */
	struct cmap                rules;                /*     8     8 */
	uint32_t                   hit_cnt;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct netdev_flow_key     mask;                 /*    24   592 */
	/* --- cacheline 9 boundary (576 bytes) was 40 bytes ago --- */

	/* size: 616, cachelines: 10, members: 4 */
	/* sum members: 612, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ifmap {
	long unsigned int          mem_start;            /*     0     8 */
	long unsigned int          mem_end;              /*     8     8 */
	short unsigned int         base_addr;            /*    16     2 */
	unsigned char              irq;                  /*    18     1 */
	unsigned char              dma;                  /*    19     1 */
	unsigned char              port;                 /*    20     1 */

	/* size: 24, cachelines: 1, members: 6 */
	/* padding: 3 */
	/* last cacheline: 24 bytes */
};
struct ifreq {
	union {
		char               ifrn_name[16];        /*          16 */
	} ifr_ifrn;                                      /*     0    16 */
	union {
		struct sockaddr    ifru_addr;            /*          16 */
		struct sockaddr    ifru_dstaddr;         /*          16 */
		struct sockaddr    ifru_broadaddr;       /*          16 */
		struct sockaddr    ifru_netmask;         /*          16 */
		struct sockaddr    ifru_hwaddr;          /*          16 */
		short int          ifru_flags;           /*           2 */
		int                ifru_ivalue;          /*           4 */
		int                ifru_mtu;             /*           4 */
		struct ifmap       ifru_map;             /*          24 */
		char               ifru_slave[16];       /*          16 */
		char               ifru_newname[16];     /*          16 */
		__caddr_t          ifru_data;            /*           8 */
	} ifr_ifru;                                      /*    16    24 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct flock {
	short int                  l_type;               /*     0     2 */
	short int                  l_whence;             /*     2     2 */

	/* XXX 4 bytes hole, try to pack */

	__off_t                    l_start;              /*     8     8 */
	__off_t                    l_len;                /*    16     8 */
	__pid_t                    l_pid;                /*    24     4 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 24, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct lockfile {
	struct hmap_node           hmap_node;            /*     0    16 */
	char *                     name;                 /*    16     8 */
	dev_t                      device;               /*    24     8 */
	ino_t                      inode;                /*    32     8 */
	int                        fd;                   /*    40     4 */
	HANDLE                     lock_handle;          /*    44     4 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct registered_dpif_class {
	const struct dpif_class  * dpif_class;           /*     0     8 */
	int                        refcount;             /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct dpif_execute_helper_aux {
	struct dpif *              dpif;                 /*     0     8 */
	const struct flow  *       flow;                 /*     8     8 */
	int                        error;                /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct nlattr  *     meter_action;         /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct msg {
	uint8_t                    vers_diag;            /*     0     1 */
	uint8_t                    flags;                /*     1     1 */
	uint8_t                    mult;                 /*     2     1 */
	uint8_t                    length;               /*     3     1 */
	ovs_be32                   my_disc;              /*     4     4 */
	ovs_be32                   your_disc;            /*     8     4 */
	ovs_be32                   min_tx;               /*    12     4 */
	ovs_be32                   min_rx;               /*    16     4 */
	ovs_be32                   min_rx_echo;          /*    20     4 */

	/* size: 24, cachelines: 1, members: 9 */
	/* last cacheline: 24 bytes */
};
struct bfd {
	struct hmap_node           node;                 /*     0    16 */
	uint32_t                   disc;                 /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     name;                 /*    24     8 */
	_Bool                      cpath_down;           /*    32     1 */
	uint8_t                    mult;                 /*    33     1 */
	uint8_t                    rmt_mult;             /*    34     1 */

	/* XXX 5 bytes hole, try to pack */

	struct netdev *            netdev;               /*    40     8 */
	uint64_t                   rx_packets;           /*    48     8 */
	enum state                 state;                /*    56     4 */
	enum state                 rmt_state;            /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	enum diag                  diag;                 /*    64     4 */
	enum diag                  rmt_diag;             /*    68     4 */
	enum flags                 flags;                /*    72     4 */
	enum flags                 rmt_flags;            /*    76     4 */
	_Bool                      oam;                  /*    80     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   rmt_disc;             /*    84     4 */
	struct eth_addr            local_eth_src;        /*    88     6 */
	struct eth_addr            local_eth_dst;        /*    94     6 */
	struct eth_addr            rmt_eth_dst;          /*   100     6 */

	/* XXX 2 bytes hole, try to pack */

	ovs_be32                   ip_src;               /*   108     4 */
	ovs_be32                   ip_dst;               /*   112     4 */
	uint16_t                   udp_src;              /*   116     2 */

	/* XXX 2 bytes hole, try to pack */

	long long int              rmt_min_rx;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	long long int              rmt_min_tx;           /*   128     8 */
	long long int              cfg_min_tx;           /*   136     8 */
	long long int              cfg_min_rx;           /*   144     8 */
	long long int              poll_min_tx;          /*   152     8 */
	long long int              poll_min_rx;          /*   160     8 */
	long long int              min_tx;               /*   168     8 */
	long long int              min_rx;               /*   176     8 */
	long long int              last_tx;              /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	long long int              next_tx;              /*   192     8 */
	long long int              detect_time;          /*   200     8 */
	_Bool                      last_forwarding;      /*   208     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        forwarding_override;  /*   212     4 */
	atomic_bool                check_tnl_key;        /*   216     1 */

	/* XXX 3 bytes hole, try to pack */

	struct ovs_refcount        ref_cnt;              /*   220     4 */
	_Bool                      forwarding_if_rx;     /*   224     1 */

	/* XXX 7 bytes hole, try to pack */

	long long int              forwarding_if_rx_detect_time; /*   232     8 */
	long long int              demand_rx_bfd_time;   /*   240     8 */
	_Bool                      in_decay;             /*   248     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        decay_min_rx;         /*   252     4 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	int                        decay_rx_ctl;         /*   256     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   decay_rx_packets;     /*   264     8 */
	long long int              decay_detect_time;    /*   272     8 */
	uint64_t                   flap_count;           /*   280     8 */
	_Bool                      status_changed;       /*   288     1 */

	/* size: 296, cachelines: 5, members: 47 */
	/* sum members: 253, holes: 10, sum holes: 36 */
	/* padding: 7 */
	/* last cacheline: 40 bytes */
};
struct group {
	char *                     gr_name;              /*     0     8 */
	char *                     gr_passwd;            /*     8     8 */
	__gid_t                    gr_gid;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	char * *                   gr_mem;               /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct passwd {
	char *                     pw_name;              /*     0     8 */
	char *                     pw_passwd;            /*     8     8 */
	__uid_t                    pw_uid;               /*    16     4 */
	__gid_t                    pw_gid;               /*    20     4 */
	char *                     pw_gecos;             /*    24     8 */
	char *                     pw_dir;               /*    32     8 */
	char *                     pw_shell;             /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* last cacheline: 48 bytes */
};
struct ofp11_instruction {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp11_instruction_goto_table {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    table_id;             /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp11_instruction_write_metadata {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */
	ovs_be64                   metadata;             /*     8     8 */
	ovs_be64                   metadata_mask;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct ofp11_instruction_actions {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp13_instruction_meter {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   meter_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp_ed_prop_header {
	ovs_be16                   prop_class;           /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    len;                  /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofpact_ed_prop {
	uint16_t                   prop_class;           /*     0     2 */
	uint8_t                    type;                 /*     2     1 */
	uint8_t                    len;                  /*     3     1 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct ofpact_null {
	struct ofpact              ofpact;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ofpact_output {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint16_t                   max_len;              /*     8     2 */

	/* size: 12, cachelines: 1, members: 3 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofpact_controller {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   max_len;              /*     4     2 */
			uint16_t   controller_id;        /*     6     2 */
			enum ofp_packet_in_reason reason; /*     8     4 */
			_Bool      pause;                /*    12     1 */
			uint16_t   userdata_len;         /*    14     2 */
		};                                       /*          16 */
		uint8_t            pad3[16];             /*          16 */
	};                                               /*     0    16 */
	uint8_t                    userdata[0];          /*    16     0 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofpact_enqueue {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint32_t                   queue;                /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_output_reg {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   max_len;              /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	struct mf_subfield         src;                  /*     8    16 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 22, holes: 1, sum holes: 2 */
	/* last cacheline: 24 bytes */
};
struct ofpact_output_trunc {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 port;                 /*     4     4 */
	uint32_t                   max_len;              /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_bundle {
	struct ofpact              ofpact;               /*     0     4 */
	enum nx_bd_algorithm       algorithm;            /*     4     4 */
	enum nx_hash_fields        fields;               /*     8     4 */
	uint16_t                   basis;                /*    12     2 */

	/* XXX 2 bytes hole, try to pack */

	struct mf_subfield         dst;                  /*    16    16 */
	unsigned int               n_slaves;             /*    32     4 */
	ofp_port_t                 slaves[0];            /*    36     0 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 34, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_vlan_vid {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   vlan_vid;             /*     4     2 */
	_Bool                      push_vlan_if_needed;  /*     6     1 */
	_Bool                      flow_has_vlan;        /*     7     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofpact_vlan_pcp {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    vlan_pcp;             /*     4     1 */
	_Bool                      push_vlan_if_needed;  /*     5     1 */
	_Bool                      flow_has_vlan;        /*     6     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* padding: 1 */
	/* last cacheline: 8 bytes */
};
struct ofpact_push_vlan {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_mac {
	struct ofpact              ofpact;               /*     0     4 */
	struct eth_addr            mac;                  /*     4     6 */

	/* size: 10, cachelines: 1, members: 2 */
	/* last cacheline: 10 bytes */
};
struct ofpact_ipv4 {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   ipv4;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_dscp {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    dscp;                 /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_ecn {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ecn;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_ip_ttl {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ttl;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_l4_port {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   port;                 /*     4     2 */
	uint8_t                    flow_ip_proto;        /*     6     1 */

	/* size: 8, cachelines: 1, members: 3 */
	/* padding: 1 */
	/* last cacheline: 8 bytes */
};
struct ofpact_set_field {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			_Bool      flow_has_vlan;        /*     4     1 */
			const struct mf_field  * field;  /*     8     8 */
		};                                       /*          16 */
		uint8_t            pad4[16];             /*          16 */
	};                                               /*     0    16 */
	union mf_value             value[0];             /*    16     0 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofpact_push_mpls {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_pop_mpls {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be16                   ethertype;            /*     4     2 */

	/* size: 6, cachelines: 1, members: 2 */
	/* last cacheline: 6 bytes */
};
struct ofpact_tunnel {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   tun_id;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ofpact_queue {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   queue_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_fin_timeout {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   fin_idle_timeout;     /*     4     2 */
	uint16_t                   fin_hard_timeout;     /*     6     2 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_metadata {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	ovs_be64                   metadata;             /*     8     8 */
	ovs_be64                   mask;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ofpact_meter {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   meter_id;             /*     4     4 */
	uint32_t                   provider_meter_id;    /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofpact_nest {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
		};                                       /*           4 */
		uint8_t            pad5[8];              /*           8 */
	};                                               /*     0     8 */
	struct ofpact              actions[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_conntrack {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   flags;                /*     4     2 */
			uint16_t   zone_imm;             /*     6     2 */
			struct mf_subfield zone_src;     /*     8    16 */
			uint16_t   alg;                  /*    24     2 */
			uint8_t    recirc_table;         /*    26     1 */
		};                                       /*          32 */
		uint8_t            pad6[32];             /*          32 */
	};                                               /*     0    32 */
	struct ofpact              actions[0];           /*    32     0 */

	/* size: 32, cachelines: 1, members: 2 */
	/* last cacheline: 32 bytes */
};
struct ofpact_nat {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    range_af;             /*     4     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   flags;                /*     6     2 */
	struct {
		struct {
			uint16_t   min;                  /*     8     2 */
			uint16_t   max;                  /*    10     2 */
		} proto;                                 /*     8     4 */
		union {
			struct {
				ovs_be32 min;            /*    12     4 */
				ovs_be32 max;            /*    16     4 */
			} ipv4;                          /*           8 */
			struct {
				struct in6_addr min;     /*    12    16 */
				struct in6_addr max;     /*    28    16 */
			} ipv6;                          /*          32 */
		} addr;                                  /*    12    32 */
	} range;                                         /*     8    36 */

	/* size: 44, cachelines: 1, members: 4 */
	/* sum members: 43, holes: 1, sum holes: 1 */
	/* last cacheline: 44 bytes */
};
struct ofpact_resubmit {
	struct ofpact              ofpact;               /*     0     4 */
	ofp_port_t                 in_port;              /*     4     4 */
	uint8_t                    table_id;             /*     8     1 */
	_Bool                      with_ct_orig;         /*     9     1 */

	/* size: 12, cachelines: 1, members: 4 */
	/* padding: 2 */
	/* last cacheline: 12 bytes */
};
struct ofpact_learn_spec {
	union {
		struct {
			struct mf_subfield src;          /*     0    16 */
			struct mf_subfield dst;          /*    16    16 */
			uint16_t   src_type;             /*    32     2 */
			uint16_t   dst_type;             /*    34     2 */
			uint8_t    n_bits;               /*    36     1 */
		};                                       /*          40 */
		uint8_t            pad7[40];             /*          40 */
	};                                               /*     0    40 */

	/* size: 40, cachelines: 1, members: 1 */
	/* last cacheline: 40 bytes */
};
struct ofpact_learn {
	union {
		struct {
			struct ofpact ofpact;            /*     0     4 */
			uint16_t   idle_timeout;         /*     4     2 */
			uint16_t   hard_timeout;         /*     6     2 */
			uint16_t   priority;             /*     8     2 */
			uint8_t    table_id;             /*    10     1 */
			enum nx_learn_flags flags;       /*    12     4 */
			ovs_be64   cookie;               /*    16     8 */
			uint16_t   fin_idle_timeout;     /*    24     2 */
			uint16_t   fin_hard_timeout;     /*    26     2 */
			uint32_t   limit;                /*    28     4 */
			struct mf_subfield result_dst;   /*    32    16 */
		};                                       /*          48 */
		uint8_t            pad8[48];             /*          48 */
	};                                               /*     0    48 */
	struct ofpact_learn_spec   specs[0];             /*    48     0 */

	/* size: 48, cachelines: 1, members: 2 */
	/* last cacheline: 48 bytes */
};
struct ofpact_conjunction {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    clause;               /*     4     1 */
	uint8_t                    n_clauses;            /*     5     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   id;                   /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* sum members: 10, holes: 1, sum holes: 2 */
	/* last cacheline: 12 bytes */
};
struct ofpact_multipath {
	struct ofpact              ofpact;               /*     0     4 */
	enum nx_hash_fields        fields;               /*     4     4 */
	uint16_t                   basis;                /*     8     2 */

	/* XXX 2 bytes hole, try to pack */

	enum nx_mp_algorithm       algorithm;            /*    12     4 */
	uint16_t                   max_link;             /*    16     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   arg;                  /*    20     4 */
	struct mf_subfield         dst;                  /*    24    16 */

	/* size: 40, cachelines: 1, members: 7 */
	/* sum members: 36, holes: 2, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ofpact_note {
	struct ofpact              ofpact;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     length;               /*     8     8 */
	uint8_t                    data[0];              /*    16     0 */

	/* size: 16, cachelines: 1, members: 3 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ofpact_sample {
	struct ofpact              ofpact;               /*     0     4 */
	uint16_t                   probability;          /*     4     2 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   collector_set_id;     /*     8     4 */
	uint32_t                   obs_domain_id;        /*    12     4 */
	uint32_t                   obs_point_id;         /*    16     4 */
	ofp_port_t                 sampling_port;        /*    20     4 */
	enum nx_action_sample_direction direction;       /*    24     4 */

	/* size: 28, cachelines: 1, members: 7 */
	/* sum members: 26, holes: 1, sum holes: 2 */
	/* last cacheline: 28 bytes */
};
struct ofpact_cnt_ids {
	struct ofpact              ofpact;               /*     0     4 */
	unsigned int               n_controllers;        /*     4     4 */
	uint16_t                   cnt_ids[0];           /*     8     0 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_mpls_label {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   label;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_mpls_tc {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    tc;                   /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_mpls_ttl {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    ttl;                  /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_goto_table {
	struct ofpact              ofpact;               /*     0     4 */
	uint8_t                    table_id;             /*     4     1 */

	/* size: 6, cachelines: 1, members: 2 */
	/* padding: 1 */
	/* last cacheline: 6 bytes */
};
struct ofpact_group {
	struct ofpact              ofpact;               /*     0     4 */
	uint32_t                   group_id;             /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_encap {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   new_pkt_type;         /*     4     4 */
	uint16_t                   hdr_size;             /*     8     2 */
	uint16_t                   n_props;              /*    10     2 */
	struct ofpact_ed_prop      props[0];             /*    12     0 */

	/* size: 12, cachelines: 1, members: 5 */
	/* last cacheline: 12 bytes */
};
struct ofpact_decap {
	struct ofpact              ofpact;               /*     0     4 */
	ovs_be32                   new_pkt_type;         /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ext_action_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct ofp10_action_output {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be16                   port;                 /*     4     2 */
	ovs_be16                   max_len;              /*     6     2 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ofp11_action_output {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   port;                 /*     4     4 */
	ovs_be16                   max_len;              /*     8     2 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct nx_action_controller {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   max_len;              /*    10     2 */
	ovs_be16                   controller_id;        /*    12     2 */
	uint8_t                    reason;               /*    14     1 */
	uint8_t                    zero;                 /*    15     1 */

	/* size: 16, cachelines: 1, members: 8 */
	/* last cacheline: 16 bytes */
};
struct ofp10_action_enqueue {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be16                   port;                 /*     4     2 */
	uint8_t                    pad[6];               /*     6     6 */
	ovs_be32                   queue_id;             /*    12     4 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct nx_action_output_reg {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   ofs_nbits;            /*    10     2 */
	ovs_be32                   src;                  /*    12     4 */
	ovs_be16                   max_len;              /*    16     2 */
	uint8_t                    zero[6];              /*    18     6 */

	/* size: 24, cachelines: 1, members: 8 */
	/* last cacheline: 24 bytes */
};
struct nx_action_output_reg2 {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   ofs_nbits;            /*    10     2 */
	ovs_be16                   max_len;              /*    12     2 */
	uint8_t                    pad[10];              /*    14    10 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct nx_action_bundle {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   algorithm;            /*    10     2 */
	ovs_be16                   fields;               /*    12     2 */
	ovs_be16                   basis;                /*    14     2 */
	ovs_be32                   slave_type;           /*    16     4 */
	ovs_be16                   n_slaves;             /*    20     2 */
	ovs_be16                   ofs_nbits;            /*    22     2 */
	ovs_be32                   dst;                  /*    24     4 */
	uint8_t                    zero[4];              /*    28     4 */

	/* size: 32, cachelines: 1, members: 12 */
	/* last cacheline: 32 bytes */
};
struct ofp_action_dl_addr {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	struct eth_addr            dl_addr;              /*     4     6 */
	uint8_t                    pad[6];               /*    10     6 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp15_action_copy_field {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be16                   n_bits;               /*     4     2 */
	ovs_be16                   src_offset;           /*     6     2 */
	ovs_be16                   dst_offset;           /*     8     2 */
	uint8_t                    pad[2];               /*    10     2 */
	uint8_t                    pad2[4];              /*    12     4 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct onf_action_copy_field {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   experimenter;         /*     4     4 */
	ovs_be16                   exp_type;             /*     8     2 */
	uint8_t                    pad[2];               /*    10     2 */
	ovs_be16                   n_bits;               /*    12     2 */
	ovs_be16                   src_offset;           /*    14     2 */
	ovs_be16                   dst_offset;           /*    16     2 */
	uint8_t                    pad2[2];              /*    18     2 */
	uint8_t                    pad3[4];              /*    20     4 */

	/* size: 24, cachelines: 1, members: 10 */
	/* last cacheline: 24 bytes */
};
struct nx_action_reg_move {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   n_bits;               /*    10     2 */
	ovs_be16                   src_ofs;              /*    12     2 */
	ovs_be16                   dst_ofs;              /*    14     2 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct ofp12_action_set_field {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	uint8_t                    pad[4];               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct nx_action_reg_load {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   ofs_nbits;            /*    10     2 */
	ovs_be32                   dst;                  /*    12     4 */
	ovs_be64                   value;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 7 */
	/* last cacheline: 24 bytes */
};
struct nx_action_stack {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   offset;               /*    10     2 */
	uint8_t                    pad[12];              /*    12    12 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct nx_action_cnt_ids {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   n_controllers;        /*    10     2 */
	uint8_t                    zeros[4];             /*    12     4 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct nx_action_fin_timeout {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   fin_idle_timeout;     /*    10     2 */
	ovs_be16                   fin_hard_timeout;     /*    12     2 */
	ovs_be16                   pad;                  /*    14     2 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct nx_action_encap {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   hdr_size;             /*    10     2 */
	ovs_be32                   new_pkt_type;         /*    12     4 */
	struct ofp_ed_prop_header  props[0];             /*    16     0 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct nx_action_decap {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    pad[2];               /*    10     2 */
	ovs_be32                   new_pkt_type;         /*    12     4 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct nx_action_resubmit {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   in_port;              /*    10     2 */
	uint8_t                    table;                /*    12     1 */
	uint8_t                    pad[3];               /*    13     3 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct nx_action_learn {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   idle_timeout;         /*    10     2 */
	ovs_be16                   hard_timeout;         /*    12     2 */
	ovs_be16                   priority;             /*    14     2 */
	ovs_be64                   cookie;               /*    16     8 */
	ovs_be16                   flags;                /*    24     2 */
	uint8_t                    table_id;             /*    26     1 */
	uint8_t                    pad;                  /*    27     1 */
	ovs_be16                   fin_idle_timeout;     /*    28     2 */
	ovs_be16                   fin_hard_timeout;     /*    30     2 */

	/* size: 32, cachelines: 1, members: 13 */
	/* last cacheline: 32 bytes */
};
struct nx_action_learn2 {
	struct nx_action_learn     up;                   /*     0    32 */
	ovs_be32                   limit;                /*    32     4 */
	ovs_be16                   result_dst_ofs;       /*    36     2 */
	ovs_be16                   pad2;                 /*    38     2 */

	/* size: 40, cachelines: 1, members: 4 */
	/* last cacheline: 40 bytes */
};
struct nx_action_conjunction {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    clause;               /*    10     1 */
	uint8_t                    n_clauses;            /*    11     1 */
	ovs_be32                   id;                   /*    12     4 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct nx_action_multipath {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   fields;               /*    10     2 */
	ovs_be16                   basis;                /*    12     2 */
	ovs_be16                   pad0;                 /*    14     2 */
	ovs_be16                   algorithm;            /*    16     2 */
	ovs_be16                   max_link;             /*    18     2 */
	ovs_be32                   arg;                  /*    20     4 */
	ovs_be16                   pad1;                 /*    24     2 */
	ovs_be16                   ofs_nbits;            /*    26     2 */
	ovs_be32                   dst;                  /*    28     4 */

	/* size: 32, cachelines: 1, members: 13 */
	/* last cacheline: 32 bytes */
};
struct nx_action_note {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    note[6];              /*    10     6 */

	/* size: 16, cachelines: 1, members: 5 */
	/* last cacheline: 16 bytes */
};
struct nx_action_sample {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   probability;          /*    10     2 */
	ovs_be32                   collector_set_id;     /*    12     4 */
	ovs_be32                   obs_domain_id;        /*    16     4 */
	ovs_be32                   obs_point_id;         /*    20     4 */

	/* size: 24, cachelines: 1, members: 8 */
	/* last cacheline: 24 bytes */
};
struct nx_action_sample2 {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   probability;          /*    10     2 */
	ovs_be32                   collector_set_id;     /*    12     4 */
	ovs_be32                   obs_domain_id;        /*    16     4 */
	ovs_be32                   obs_point_id;         /*    20     4 */
	ovs_be16                   sampling_port;        /*    24     2 */
	uint8_t                    direction;            /*    26     1 */
	uint8_t                    zeros[5];             /*    27     5 */

	/* size: 32, cachelines: 1, members: 11 */
	/* last cacheline: 32 bytes */
};
struct nx_action_conntrack {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   flags;                /*    10     2 */
	ovs_be32                   zone_src;             /*    12     4 */
	union {
		ovs_be16           zone_ofs_nbits;       /*           2 */
		ovs_be16           zone_imm;             /*           2 */
	};                                               /*    16     2 */
	uint8_t                    recirc_table;         /*    18     1 */
	uint8_t                    pad[3];               /*    19     3 */
	ovs_be16                   alg;                  /*    22     2 */

	/* size: 24, cachelines: 1, members: 10 */
	/* last cacheline: 24 bytes */
};
struct nx_action_nat {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    pad[2];               /*    10     2 */
	ovs_be16                   flags;                /*    12     2 */
	ovs_be16                   range_present;        /*    14     2 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct nx_action_output_trunc {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	ovs_be16                   port;                 /*    10     2 */
	ovs_be32                   max_len;              /*    12     4 */

	/* size: 16, cachelines: 1, members: 6 */
	/* last cacheline: 16 bytes */
};
struct nx_action_write_metadata {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */
	ovs_be16                   subtype;              /*     8     2 */
	uint8_t                    zeros[6];             /*    10     6 */
	ovs_be64                   metadata;             /*    16     8 */
	ovs_be64                   mask;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 7 */
	/* last cacheline: 32 bytes */
};
struct instruction_type_info {
	enum ovs_instruction_type  type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ovsinst_map {
	enum ovs_instruction_type  ovsinst;              /*     0     4 */
	int                        ofpit;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ofpact_map {
	enum ofpact_type           ofpact;               /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        ofpat;                /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* sum members: 5, holes: 1, sum holes: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_hdrs {
	uint32_t                   vendor;               /*     0     4 */
	uint16_t                   type;                 /*     4     2 */
	uint8_t                    ofp_version;          /*     6     1 */

	/* size: 8, cachelines: 1, members: 3 */
	/* padding: 1 */
	/* last cacheline: 8 bytes */
};
struct ofpact_raw_instance {
	struct ofpact_hdrs         hdrs;                 /*     0     8 */

	/* XXX last struct has 1 byte of padding */

	enum ofp_raw_action_type   raw;                  /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hmap_node           decode_node;          /*    16    16 */
	struct hmap_node           encode_node;          /*    32    16 */
	short unsigned int         min_length;           /*    48     2 */
	short unsigned int         max_length;           /*    50     2 */
	short unsigned int         arg_ofs;              /*    52     2 */
	short unsigned int         arg_len;              /*    54     2 */
	const char  *              name;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	const char  *              deprecation;          /*    64     8 */

	/* size: 72, cachelines: 2, members: 10 */
	/* sum members: 68, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 1 */
	/* last cacheline: 8 bytes */
};
struct ofp_action_header {
	ovs_be16                   type;                 /*     0     2 */
	ovs_be16                   len;                  /*     2     2 */
	ovs_be32                   vendor;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct __va_list_tag {
	unsigned int               gp_offset;            /*     0     4 */
	unsigned int               fp_offset;            /*     4     4 */
	void *                     overflow_arg_area;    /*     8     8 */
	void *                     reg_save_area;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct destination {
	const char  *              name;                 /*     0     8 */
	char *                     pattern;              /*     8     8 */
	_Bool                      default_pattern;      /*    16     1 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 7 */
	/* last cacheline: 24 bytes */
};
struct vlog_facility {
	char *                     name;                 /*     0     8 */
	unsigned int               value;                /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp_ed_prop_nsh_md_type {
	struct ofp_ed_prop_header  header;               /*     0     4 */
	uint8_t                    md_type;              /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofp_ed_prop_nsh_tlv {
	struct ofp_ed_prop_header  header;               /*     0     4 */
	ovs_be16                   tlv_class;            /*     4     2 */
	uint8_t                    tlv_type;             /*     6     1 */
	uint8_t                    tlv_len;              /*     7     1 */
	uint8_t                    data[0];              /*     8     0 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct ofpact_ed_prop_nsh_md_type {
	struct ofpact_ed_prop      header;               /*     0     4 */
	uint8_t                    md_type;              /*     4     1 */
	uint8_t                    pad[3];               /*     5     3 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct ofpact_ed_prop_nsh_tlv {
	struct ofpact_ed_prop      header;               /*     0     4 */
	ovs_be16                   tlv_class;            /*     4     2 */
	uint8_t                    tlv_type;             /*     6     1 */
	uint8_t                    tlv_len;              /*     7     1 */
	uint8_t                    data[0];              /*     8     0 */

	/* size: 8, cachelines: 1, members: 5 */
	/* last cacheline: 8 bytes */
};
struct ofp_vendor_header {
	struct ofp_header          header;               /*     0     8 */
	ovs_be32                   vendor;               /*     8     4 */
	ovs_be32                   subtype;              /*    12     4 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ofp10_stats_msg {
	struct ofp_header          header;               /*     0     8 */
	ovs_be16                   type;                 /*     8     2 */
	ovs_be16                   flags;                /*    10     2 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct ofp10_vendor_stats_msg {
	struct ofp10_stats_msg     osm;                  /*     0    12 */
	ovs_be32                   vendor;               /*    12     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ofp11_stats_msg {
	struct ofp_header          header;               /*     0     8 */
	ovs_be16                   type;                 /*     8     2 */
	ovs_be16                   flags;                /*    10     2 */
	uint8_t                    pad[4];               /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct ofp11_vendor_stats_msg {
	struct ofp11_stats_msg     osm;                  /*     0    16 */
	ovs_be32                   vendor;               /*    16     4 */
	ovs_be32                   subtype;              /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct nicira10_stats_msg {
	struct ofp10_vendor_stats_msg vsm;               /*     0    16 */
	ovs_be32                   subtype;              /*    16     4 */
	uint8_t                    pad[4];               /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ofphdrs {
	uint8_t                    version;              /*     0     1 */
	uint8_t                    type;                 /*     1     1 */
	uint16_t                   stat;                 /*     2     2 */
	uint32_t                   vendor;               /*     4     4 */
	uint32_t                   subtype;              /*     8     4 */

	/* size: 12, cachelines: 1, members: 5 */
	/* last cacheline: 12 bytes */
};
struct raw_instance {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct ofphdrs             hdrs;                 /*    16    12 */
	enum ofpraw                raw;                  /*    28     4 */
	unsigned int               hdrs_len;             /*    32     4 */

	/* size: 40, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct raw_info {
	struct raw_instance *      instances;            /*     0     8 */
	uint8_t                    min_version;          /*     8     1 */
	uint8_t                    max_version;          /*     9     1 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               min_body;             /*    12     4 */
	unsigned int               extra_multiple;       /*    16     4 */
	enum ofptype               type;                 /*    20     4 */
	const char  *              name;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 7 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct unixctl_conn {
	struct ovs_list            node;                 /*     0    16 */
	struct jsonrpc *           rpc;                  /*    16     8 */
	struct json *              request_id;           /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* last cacheline: 32 bytes */
};
struct unixctl_command {
	const char  *              usage;                /*     0     8 */
	int                        min_args;             /*     8     4 */
	int                        max_args;             /*    12     4 */
	unixctl_cb_func *          cb;                   /*    16     8 */
	void *                     aux;                  /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct unixctl_server {
	struct pstream *           listener;             /*     0     8 */
	struct ovs_list            conns;                /*     8    16 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct id_node {
	struct hmap_node           node;                 /*     0    16 */
	uint32_t                   id;                   /*    16     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct id_pool {
	struct hmap                map;                  /*     0    32 */
	uint32_t                   base;                 /*    32     4 */
	uint32_t                   n_ids;                /*    36     4 */
	uint32_t                   next_free_id;         /*    40     4 */

	/* size: 48, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct vlan_eth_header {
	struct eth_addr            veth_dst;             /*     0     6 */
	struct eth_addr            veth_src;             /*     6     6 */
	ovs_be16                   veth_type;            /*    12     2 */
	ovs_be16                   veth_tci;             /*    14     2 */
	ovs_be16                   veth_next_type;       /*    16     2 */

	/* size: 18, cachelines: 1, members: 5 */
	/* last cacheline: 18 bytes */
};
struct ovs_nd_prefix_opt {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    len;                  /*     1     1 */
	uint8_t                    prefix_len;           /*     2     1 */
	uint8_t                    la_flags;             /*     3     1 */
	ovs_16aligned_be32         valid_lifetime;       /*     4     4 */
	ovs_16aligned_be32         preferred_lifetime;   /*     8     4 */
	ovs_16aligned_be32         reserved;             /*    12     4 */
	union ovs_16aligned_in6_addr prefix;             /*    16    16 */

	/* size: 32, cachelines: 1, members: 8 */
	/* last cacheline: 32 bytes */
};
struct ovs_nd_mtu_opt {
	uint8_t                    type;                 /*     0     1 */
	uint8_t                    len;                  /*     1     1 */
	ovs_be16                   reserved;             /*     2     2 */
	ovs_16aligned_be32         mtu;                  /*     4     4 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ovs_ra_msg {
	struct icmp6_header        icmph;                /*     0     4 */
	uint8_t                    cur_hop_limit;        /*     4     1 */
	uint8_t                    mo_flags;             /*     5     1 */
	ovs_be16                   router_lifetime;      /*     6     2 */
	ovs_be32                   reachable_time;       /*     8     4 */
	ovs_be32                   retrans_timer;        /*    12     4 */
	struct ovs_nd_lla_opt      options[0];           /*    16     0 */

	/* size: 16, cachelines: 1, members: 7 */
	/* last cacheline: 16 bytes */
};
struct ip6_hdrctl {
	uint32_t                   ip6_un1_flow;         /*     0     4 */
	uint16_t                   ip6_un1_plen;         /*     4     2 */
	uint8_t                    ip6_un1_nxt;          /*     6     1 */
	uint8_t                    ip6_un1_hlim;         /*     7     1 */

	/* size: 8, cachelines: 1, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ip6_hdr {
	union {
		struct ip6_hdrctl  ip6_un1;              /*           8 */
		uint8_t            ip6_un2_vfc;          /*           1 */
	} ip6_ctlun;                                     /*     0     8 */
	struct in6_addr            ip6_src;              /*     8    16 */
	struct in6_addr            ip6_dst;              /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct ip6_rthdr {
	uint8_t                    ip6r_nxt;             /*     0     1 */
	uint8_t                    ip6r_len;             /*     1     1 */
	uint8_t                    ip6r_type;            /*     2     1 */
	uint8_t                    ip6r_segleft;         /*     3     1 */

	/* size: 4, cachelines: 1, members: 4 */
	/* last cacheline: 4 bytes */
};
struct hindex_node {
	size_t                     hash;                 /*     0     8 */
	struct hindex_node *       d;                    /*     8     8 */
	struct hindex_node *       s;                    /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct hindex {
	struct hindex_node * *     buckets;              /*     0     8 */
	struct hindex_node *       one;                  /*     8     8 */
	size_t                     mask;                 /*    16     8 */
	size_t                     n_unique;             /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct stream_fd {
	struct stream              stream;               /*     0    32 */
	int                        fd;                   /*    32     4 */
	int                        fd_type;              /*    36     4 */

	/* size: 40, cachelines: 1, members: 3 */
	/* last cacheline: 40 bytes */
};
struct fd_pstream {
	struct pstream             pstream;              /*     0    24 */

	/* XXX last struct has 6 bytes of padding */

	int                        fd;                   /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	int                        (*accept_cb)(int, const struct sockaddr_storage  *, size_t, struct stream * *); /*    32     8 */
	char *                     unlink_path;          /*    40     8 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct ofp_desc_stats {
	char                       mfr_desc[256];        /*     0   256 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	char                       hw_desc[256];         /*   256   256 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	char                       sw_desc[256];         /*   512   256 */
	/* --- cacheline 12 boundary (768 bytes) --- */
	char                       serial_num[32];       /*   768    32 */
	char                       dp_desc[256];         /*   800   256 */
	/* --- cacheline 16 boundary (1024 bytes) was 32 bytes ago --- */

	/* size: 1056, cachelines: 17, members: 5 */
	/* last cacheline: 32 bytes */
};
struct nx_controller_id {
	uint8_t                    zero[6];              /*     0     6 */
	ovs_be16                   controller_id;        /*     6     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nx_zone_id {
	uint8_t                    zero[6];              /*     0     6 */
	ovs_be16                   zone_id;              /*     6     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct _SFLSampled_header {
	u_int32_t                  header_protocol;      /*     0     4 */
	u_int32_t                  frame_length;         /*     4     4 */
	u_int32_t                  stripped;             /*     8     4 */
	u_int32_t                  header_length;        /*    12     4 */
	u_int8_t *                 header_bytes;         /*    16     8 */

	/* size: 24, cachelines: 1, members: 5 */
	/* last cacheline: 24 bytes */
};
struct _SFLSampled_ethernet {
	u_int32_t                  eth_len;              /*     0     4 */
	struct eth_addr            src_mac;              /*     4     6 */
	u_int8_t                   pad1[2];              /*    10     2 */
	struct eth_addr            dst_mac;              /*    12     6 */
	u_int8_t                   pad2[2];              /*    18     2 */
	u_int32_t                  eth_type;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 6 */
	/* last cacheline: 24 bytes */
};
struct _SFLSampled_ipv4 {
	u_int32_t                  length;               /*     0     4 */
	u_int32_t                  protocol;             /*     4     4 */
	SFLIPv4                    src_ip;               /*     8     4 */
	SFLIPv4                    dst_ip;               /*    12     4 */
	u_int32_t                  src_port;             /*    16     4 */
	u_int32_t                  dst_port;             /*    20     4 */
	u_int32_t                  tcp_flags;            /*    24     4 */
	u_int32_t                  tos;                  /*    28     4 */

	/* size: 32, cachelines: 1, members: 8 */
	/* last cacheline: 32 bytes */
};
struct _SFLSampled_ipv6 {
	u_int32_t                  length;               /*     0     4 */
	u_int32_t                  protocol;             /*     4     4 */
	SFLIPv6                    src_ip;               /*     8    16 */
	SFLIPv6                    dst_ip;               /*    24    16 */
	u_int32_t                  src_port;             /*    40     4 */
	u_int32_t                  dst_port;             /*    44     4 */
	u_int32_t                  tcp_flags;            /*    48     4 */
	u_int32_t                  priority;             /*    52     4 */

	/* size: 56, cachelines: 1, members: 8 */
	/* last cacheline: 56 bytes */
};
struct _SFLExtended_switch {
	u_int32_t                  src_vlan;             /*     0     4 */
	u_int32_t                  src_priority;         /*     4     4 */
	u_int32_t                  dst_vlan;             /*     8     4 */
	u_int32_t                  dst_priority;         /*    12     4 */

	/* size: 16, cachelines: 1, members: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_router {
	SFLAddress                 nexthop;              /*     0    20 */
	u_int32_t                  src_mask;             /*    20     4 */
	u_int32_t                  dst_mask;             /*    24     4 */

	/* size: 28, cachelines: 1, members: 3 */
	/* last cacheline: 28 bytes */
};
struct _SFLExtended_as_path_segment {
	u_int32_t                  type;                 /*     0     4 */
	u_int32_t                  length;               /*     4     4 */
	union {
		u_int32_t *        set;                  /*           8 */
		u_int32_t *        seq;                  /*           8 */
	} as;                                            /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_gateway {
	SFLAddress                 nexthop;              /*     0    20 */
	u_int32_t                  as;                   /*    20     4 */
	u_int32_t                  src_as;               /*    24     4 */
	u_int32_t                  src_peer_as;          /*    28     4 */
	u_int32_t                  dst_as_path_segments; /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLExtended_as_path_segment * dst_as_path;       /*    40     8 */
	u_int32_t                  communities_length;   /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int32_t *                communities;          /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	u_int32_t                  localpref;            /*    64     4 */

	/* size: 72, cachelines: 2, members: 9 */
	/* sum members: 60, holes: 2, sum holes: 8 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct _SFLExtended_user {
	u_int32_t                  src_charset;          /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  src_user;             /*     8    16 */
	u_int32_t                  dst_charset;          /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  dst_user;             /*    32    16 */

	/* size: 48, cachelines: 1, members: 4 */
	/* sum members: 40, holes: 2, sum holes: 8 */
	/* last cacheline: 48 bytes */
};
struct _SFLExtended_url {
	u_int32_t                  direction;            /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	SFLString                  url;                  /*     8    16 */
	SFLString                  host;                 /*    24    16 */

	/* size: 40, cachelines: 1, members: 3 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct _SFLLabelStack {
	u_int32_t                  depth;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	u_int32_t *                stack;                /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_mpls {
	SFLAddress                 nextHop;              /*     0    20 */

	/* XXX 4 bytes hole, try to pack */

	SFLLabelStack              in_stack;             /*    24    16 */
	SFLLabelStack              out_stack;            /*    40    16 */

	/* size: 56, cachelines: 1, members: 3 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct _SFLExtended_nat {
	SFLAddress                 src;                  /*     0    20 */
	SFLAddress                 dst;                  /*    20    20 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct _SFLExtended_mpls_tunnel {
	SFLString                  tunnel_lsp_name;      /*     0    16 */
	u_int32_t                  tunnel_id;            /*    16     4 */
	u_int32_t                  tunnel_cos;           /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_vc {
	SFLString                  vc_instance_name;     /*     0    16 */
	u_int32_t                  vll_vc_id;            /*    16     4 */
	u_int32_t                  vc_label_cos;         /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_FTN {
	SFLString                  mplsFTNDescr;         /*     0    16 */
	u_int32_t                  mplsFTNMask;          /*    16     4 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLExtended_mpls_LDP_FEC {
	u_int32_t                  mplsFecAddrPrefixLength; /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct _SFLExtended_vlan_tunnel {
	SFLVlanStack               stack;                /*     0    16 */

	/* size: 16, cachelines: 1, members: 1 */
	/* last cacheline: 16 bytes */
};
struct _SFLExtended_vni {
	uint32_t                   vni;                  /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct _SFLFlow_sample_element {
	struct _SFLFlow_sample_element * nxt;            /*     0     8 */
	u_int32_t                  tag;                  /*     8     4 */
	u_int32_t                  length;               /*    12     4 */
	SFLFlow_type               flowType;             /*    16    72 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 4 */
	/* last cacheline: 24 bytes */
};
struct _SFLFlow_sample {
	u_int32_t                  sequence_number;      /*     0     4 */
	u_int32_t                  source_id;            /*     4     4 */
	u_int32_t                  sampling_rate;        /*     8     4 */
	u_int32_t                  sample_pool;          /*    12     4 */
	u_int32_t                  drops;                /*    16     4 */
	u_int32_t                  input;                /*    20     4 */
	u_int32_t                  output;               /*    24     4 */
	u_int32_t                  num_elements;         /*    28     4 */
	SFLFlow_sample_element *   elements;             /*    32     8 */

	/* size: 40, cachelines: 1, members: 9 */
	/* last cacheline: 40 bytes */
};
struct nln {
	struct nl_sock *           notify_sock;          /*     0     8 */
	struct ovs_list            all_notifiers;        /*     8    16 */
	_Bool                      has_run;              /*    24     1 */

	/* XXX 3 bytes hole, try to pack */

	int                        protocol;             /*    28     4 */
	nln_parse_func *           parse;                /*    32     8 */
	void *                     change;               /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 45, holes: 1, sum holes: 3 */
	/* last cacheline: 48 bytes */
};
struct nln_notifier {
	struct ovs_list            node;                 /*     0    16 */
	struct nln *               nln;                  /*    16     8 */
	int                        multicast_group;      /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	nln_notify_func *          cb;                   /*    32     8 */
	void *                     aux;                  /*    40     8 */

	/* size: 48, cachelines: 1, members: 5 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_symbol_table {
	struct shash               sh;                   /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ovsdb_symbol {
	struct uuid                uuid;                 /*     0    16 */
	_Bool                      created;              /*    16     1 */
	_Bool                      strong_ref;           /*    17     1 */
	_Bool                      weak_ref;             /*    18     1 */

	/* size: 20, cachelines: 1, members: 4 */
	/* padding: 1 */
	/* last cacheline: 20 bytes */
};
struct ovsdb_datum_sort_cbdata {
	enum ovsdb_atomic_type     key_type;             /*     0     4 */
	enum ovsdb_atomic_type     value_type;           /*     4     4 */
	struct ovsdb_datum *       datum;                /*     8     8 */

	/* size: 16, cachelines: 1, members: 3 */
	/* last cacheline: 16 bytes */
};
struct ccmap_impl {
	union {
		struct {
			unsigned int n_unique;           /*     0     4 */
			unsigned int n;                  /*     4     4 */
			unsigned int max_n;              /*     8     4 */
			unsigned int min_n;              /*    12     4 */
			uint32_t   mask;                 /*    16     4 */
			uint32_t   basis;                /*    20     4 */
		};                                       /*          24 */
		uint8_t            pad0[64];             /*          64 */
	};                                               /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ccmap_bucket        buckets[0];           /*    64     0 */

	/* size: 64, cachelines: 1, members: 2 */
};
struct ccmap_bucket {
	ccmap_node_t               nodes[8];             /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct directory {
	const char  *              value;                /*     0     8 */
	const char  *              default_value;        /*     8     8 */
	const char  *              var_name;             /*    16     8 */
	struct ovsthread_once      once;                 /*    24    56 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */

	/* size: 80, cachelines: 2, members: 4 */
	/* last cacheline: 16 bytes */
};
struct seq {
	uint64_t                   value;                /*     0     8 */
	struct hmap                waiters;              /*     8    32 */

	/* size: 40, cachelines: 1, members: 2 */
	/* last cacheline: 40 bytes */
};
struct seq_waiter {
	struct seq *               seq;                  /*     0     8 */
	struct hmap_node           hmap_node;            /*     8    16 */
	unsigned int               ovsthread_id;         /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	struct seq_thread *        thread;               /*    32     8 */
	struct ovs_list            list_node;            /*    40    16 */
	uint64_t                   value;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 6 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct seq_thread {
	struct ovs_list            waiters;              /*     0    16 */
	struct latch               latch;                /*    16     8 */
	_Bool                      waiting;              /*    24     1 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct rconn {
	struct ovs_mutex           mutex;                /*     0    48 */
	enum state                 state;                /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	time_t                     state_entered;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct vconn *             vconn;                /*    64     8 */
	char *                     name;                 /*    72     8 */
	char *                     target;               /*    80     8 */
	_Bool                      reliable;             /*    88     1 */

	/* XXX 7 bytes hole, try to pack */

	struct ovs_list            txq;                  /*    96    16 */
	int                        backoff;              /*   112     4 */
	int                        max_backoff;          /*   116     4 */
	time_t                     backoff_deadline;     /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	time_t                     last_connected;       /*   128     8 */
	time_t                     last_disconnected;    /*   136     8 */
	unsigned int               seqno;                /*   144     4 */
	int                        last_error;           /*   148     4 */
	_Bool                      probably_admitted;    /*   152     1 */

	/* XXX 7 bytes hole, try to pack */

	time_t                     last_admitted;        /*   160     8 */
	unsigned int               n_attempted_connections; /*   168     4 */
	unsigned int               n_successful_connections; /*   172     4 */
	time_t                     creation_time;        /*   176     8 */
	long unsigned int          total_time_connected; /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        probe_interval;       /*   192     4 */

	/* XXX 4 bytes hole, try to pack */

	time_t                     last_activity;        /*   200     8 */
	uint8_t                    dscp;                 /*   208     1 */

	/* XXX 7 bytes hole, try to pack */

	struct vconn *             monitors[8];          /*   216    64 */
	/* --- cacheline 4 boundary (256 bytes) was 24 bytes ago --- */
	size_t                     n_monitors;           /*   280     8 */
	uint32_t                   allowed_versions;     /*   288     4 */

	/* size: 296, cachelines: 5, members: 27 */
	/* sum members: 263, holes: 5, sum holes: 29 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct rconn_packet_counter {
	struct ovs_mutex           mutex;                /*     0    48 */
	unsigned int               n_packets;            /*    48     4 */
	unsigned int               n_bytes;              /*    52     4 */
	int                        ref_cnt;              /*    56     4 */

	/* size: 64, cachelines: 1, members: 4 */
	/* padding: 4 */
};
struct asn1_string_st {
	int                        length;               /*     0     4 */
	int                        type;                 /*     4     4 */
	unsigned char *            data;                 /*     8     8 */
	long int                   flags;                /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct asn1_object_st {
	const char  *              sn;                   /*     0     8 */
	const char  *              ln;                   /*     8     8 */
	int                        nid;                  /*    16     4 */
	int                        length;               /*    20     4 */
	const unsigned char  *     data;                 /*    24     8 */
	int                        flags;                /*    32     4 */

	/* size: 40, cachelines: 1, members: 6 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct buf_mem_st {
	size_t                     length;               /*     0     8 */
	char *                     data;                 /*     8     8 */
	size_t                     max;                  /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct evp_cipher_st {
	int                        nid;                  /*     0     4 */
	int                        block_size;           /*     4     4 */
	int                        key_len;              /*     8     4 */
	int                        iv_len;               /*    12     4 */
	long unsigned int          flags;                /*    16     8 */
	int                        (*init)(EVP_CIPHER_CTX *, const unsigned char  *, const unsigned char  *, int); /*    24     8 */
	int                        (*do_cipher)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char  *, size_t); /*    32     8 */
	int                        (*cleanup)(EVP_CIPHER_CTX *); /*    40     8 */
	int                        ctx_size;             /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	int                        (*set_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*get_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *); /*    64     8 */
	int                        (*ctrl)(EVP_CIPHER_CTX *, int, int, void *); /*    72     8 */
	void *                     app_data;             /*    80     8 */

	/* size: 88, cachelines: 2, members: 13 */
	/* sum members: 84, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct evp_cipher_ctx_st {
	const EVP_CIPHER  *        cipher;               /*     0     8 */
	ENGINE *                   engine;               /*     8     8 */
	int                        encrypt;              /*    16     4 */
	int                        buf_len;              /*    20     4 */
	unsigned char              oiv[16];              /*    24    16 */
	unsigned char              iv[16];               /*    40    16 */
	unsigned char              buf[32];              /*    56    32 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	int                        num;                  /*    88     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     app_data;             /*    96     8 */
	int                        key_len;              /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          flags;                /*   112     8 */
	void *                     cipher_data;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        final_used;           /*   128     4 */
	int                        block_mask;           /*   132     4 */
	unsigned char              final[32];            /*   136    32 */

	/* size: 168, cachelines: 3, members: 15 */
	/* sum members: 160, holes: 2, sum holes: 8 */
	/* last cacheline: 40 bytes */
};
struct env_md_st {
	int                        type;                 /*     0     4 */
	int                        pkey_type;            /*     4     4 */
	int                        md_size;              /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          flags;                /*    16     8 */
	int                        (*init)(EVP_MD_CTX *); /*    24     8 */
	int                        (*update)(EVP_MD_CTX *, const void  *, size_t); /*    32     8 */
	int                        (*final)(EVP_MD_CTX *, unsigned char *); /*    40     8 */
	int                        (*copy)(EVP_MD_CTX *, const EVP_MD_CTX  *); /*    48     8 */
	int                        (*cleanup)(EVP_MD_CTX *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*sign)(int, const unsigned char  *, unsigned int, unsigned char *, unsigned int *, void *); /*    64     8 */
	int                        (*verify)(int, const unsigned char  *, unsigned int, const unsigned char  *, unsigned int, void *); /*    72     8 */
	int                        required_pkey_type[5]; /*    80    20 */
	int                        block_size;           /*   100     4 */
	int                        ctx_size;             /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	int                        (*md_ctrl)(EVP_MD_CTX *, int, int, void *); /*   112     8 */

	/* size: 120, cachelines: 2, members: 15 */
	/* sum members: 112, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct env_md_ctx_st {
	const EVP_MD  *            digest;               /*     0     8 */
	ENGINE *                   engine;               /*     8     8 */
	long unsigned int          flags;                /*    16     8 */
	void *                     md_data;              /*    24     8 */
	EVP_PKEY_CTX *             pctx;                 /*    32     8 */
	int                        (*update)(EVP_MD_CTX *, const void  *, size_t); /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct evp_pkey_st {
	int                        type;                 /*     0     4 */
	int                        save_type;            /*     4     4 */
	int                        references;           /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	const EVP_PKEY_ASN1_METHOD  * ameth;             /*    16     8 */
	ENGINE *                   engine;               /*    24     8 */
	union {
		char *             ptr;                  /*           8 */
		struct rsa_st *    rsa;                  /*           8 */
		struct dsa_st *    dsa;                  /*           8 */
		struct dh_st *     dh;                   /*           8 */
		struct ec_key_st * ec;                   /*           8 */
	} pkey;                                          /*    32     8 */
	int                        save_parameters;      /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct stack_st_X509_ATTRIBUTE * attributes;     /*    48     8 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 48, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct dsa_st {
	int                        pad;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	long int                   version;              /*     8     8 */
	int                        write_params;         /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	BIGNUM *                   p;                    /*    24     8 */
	BIGNUM *                   q;                    /*    32     8 */
	BIGNUM *                   g;                    /*    40     8 */
	BIGNUM *                   pub_key;              /*    48     8 */
	BIGNUM *                   priv_key;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	BIGNUM *                   kinv;                 /*    64     8 */
	BIGNUM *                   r;                    /*    72     8 */
	int                        flags;                /*    80     4 */

	/* XXX 4 bytes hole, try to pack */

	BN_MONT_CTX *              method_mont_p;        /*    88     8 */
	int                        references;           /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	CRYPTO_EX_DATA             ex_data;              /*   104    16 */
	const DSA_METHOD  *        meth;                 /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	ENGINE *                   engine;               /*   128     8 */

	/* size: 136, cachelines: 3, members: 16 */
	/* sum members: 120, holes: 4, sum holes: 16 */
	/* last cacheline: 8 bytes */
};
struct dsa_method {
	const char  *              name;                 /*     0     8 */
	DSA_SIG *                  (*dsa_do_sign)(const unsigned char  *, int, DSA *); /*     8     8 */
	int                        (*dsa_sign_setup)(DSA *, BN_CTX *, BIGNUM * *, BIGNUM * *); /*    16     8 */
	int                        (*dsa_do_verify)(const unsigned char  *, int, DSA_SIG *, DSA *); /*    24     8 */
	int                        (*dsa_mod_exp)(DSA *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *, BN_MONT_CTX *); /*    32     8 */
	int                        (*bn_mod_exp)(DSA *, BIGNUM *, BIGNUM *, const BIGNUM  *, const BIGNUM  *, BN_CTX *, BN_MONT_CTX *); /*    40     8 */
	int                        (*init)(DSA *);       /*    48     8 */
	int                        (*finish)(DSA *);     /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        flags;                /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     app_data;             /*    72     8 */
	int                        (*dsa_paramgen)(DSA *, int, const unsigned char  *, int, int *, long unsigned int *, BN_GENCB *); /*    80     8 */
	int                        (*dsa_keygen)(DSA *); /*    88     8 */

	/* size: 96, cachelines: 2, members: 12 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct rsa_st {
	int                        pad;                  /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	long int                   version;              /*     8     8 */
	const RSA_METHOD  *        meth;                 /*    16     8 */
	ENGINE *                   engine;               /*    24     8 */
	BIGNUM *                   n;                    /*    32     8 */
	BIGNUM *                   e;                    /*    40     8 */
	BIGNUM *                   d;                    /*    48     8 */
	BIGNUM *                   p;                    /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	BIGNUM *                   q;                    /*    64     8 */
	BIGNUM *                   dmp1;                 /*    72     8 */
	BIGNUM *                   dmq1;                 /*    80     8 */
	BIGNUM *                   iqmp;                 /*    88     8 */
	CRYPTO_EX_DATA             ex_data;              /*    96    16 */
	int                        references;           /*   112     4 */
	int                        flags;                /*   116     4 */
	BN_MONT_CTX *              _method_mod_n;        /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	BN_MONT_CTX *              _method_mod_p;        /*   128     8 */
	BN_MONT_CTX *              _method_mod_q;        /*   136     8 */
	char *                     bignum_data;          /*   144     8 */
	BN_BLINDING *              blinding;             /*   152     8 */
	BN_BLINDING *              mt_blinding;          /*   160     8 */

	/* size: 168, cachelines: 3, members: 21 */
	/* sum members: 164, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct rsa_meth_st {
	const char  *              name;                 /*     0     8 */
	int                        (*rsa_pub_enc)(int, const unsigned char  *, unsigned char *, RSA *, int); /*     8     8 */
	int                        (*rsa_pub_dec)(int, const unsigned char  *, unsigned char *, RSA *, int); /*    16     8 */
	int                        (*rsa_priv_enc)(int, const unsigned char  *, unsigned char *, RSA *, int); /*    24     8 */
	int                        (*rsa_priv_dec)(int, const unsigned char  *, unsigned char *, RSA *, int); /*    32     8 */
	int                        (*rsa_mod_exp)(BIGNUM *, const BIGNUM  *, RSA *, BN_CTX *); /*    40     8 */
	int                        (*bn_mod_exp)(BIGNUM *, const BIGNUM  *, const BIGNUM  *, const BIGNUM  *, BN_CTX *, BN_MONT_CTX *); /*    48     8 */
	int                        (*init)(RSA *);       /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*finish)(RSA *);     /*    64     8 */
	int                        flags;                /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     app_data;             /*    80     8 */
	int                        (*rsa_sign)(int, const unsigned char  *, unsigned int, unsigned char *, unsigned int *, const RSA  *); /*    88     8 */
	int                        (*rsa_verify)(int, const unsigned char  *, unsigned int, const unsigned char  *, unsigned int, const RSA  *); /*    96     8 */
	int                        (*rsa_keygen)(RSA *, int, BIGNUM *, BN_GENCB *); /*   104     8 */

	/* size: 112, cachelines: 2, members: 14 */
	/* sum members: 108, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct x509_st {
	X509_CINF *                cert_info;            /*     0     8 */
	X509_ALGOR *               sig_alg;              /*     8     8 */
	ASN1_BIT_STRING *          signature;            /*    16     8 */
	int                        valid;                /*    24     4 */
	int                        references;           /*    28     4 */
	char *                     name;                 /*    32     8 */
	CRYPTO_EX_DATA             ex_data;              /*    40    16 */
	long int                   ex_pathlen;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long int                   ex_pcpathlen;         /*    64     8 */
	long unsigned int          ex_flags;             /*    72     8 */
	long unsigned int          ex_kusage;            /*    80     8 */
	long unsigned int          ex_xkusage;           /*    88     8 */
	long unsigned int          ex_nscert;            /*    96     8 */
	ASN1_OCTET_STRING *        skid;                 /*   104     8 */
	AUTHORITY_KEYID *          akid;                 /*   112     8 */
	X509_POLICY_CACHE *        policy_cache;         /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct stack_st_DIST_POINT * crldp;              /*   128     8 */
	struct stack_st_GENERAL_NAME * altname;          /*   136     8 */
	NAME_CONSTRAINTS *         nc;                   /*   144     8 */
	unsigned char              sha1_hash[20];        /*   152    20 */

	/* XXX 4 bytes hole, try to pack */

	X509_CERT_AUX *            aux;                  /*   176     8 */

	/* size: 184, cachelines: 3, members: 21 */
	/* sum members: 180, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct X509_algor_st {
	ASN1_OBJECT *              algorithm;            /*     0     8 */
	ASN1_TYPE *                parameter;            /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct X509_crl_st {
	X509_CRL_INFO *            crl;                  /*     0     8 */
	X509_ALGOR *               sig_alg;              /*     8     8 */
	ASN1_BIT_STRING *          signature;            /*    16     8 */
	int                        references;           /*    24     4 */
	int                        flags;                /*    28     4 */
	AUTHORITY_KEYID *          akid;                 /*    32     8 */
	ISSUING_DIST_POINT *       idp;                  /*    40     8 */
	int                        idp_flags;            /*    48     4 */
	int                        idp_reasons;          /*    52     4 */
	ASN1_INTEGER *             crl_number;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ASN1_INTEGER *             base_crl_number;      /*    64     8 */
	unsigned char              sha1_hash[20];        /*    72    20 */

	/* XXX 4 bytes hole, try to pack */

	struct stack_st_GENERAL_NAMES * issuers;         /*    96     8 */
	const X509_CRL_METHOD  *   meth;                 /*   104     8 */
	void *                     meth_data;            /*   112     8 */

	/* size: 120, cachelines: 2, members: 15 */
	/* sum members: 116, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct X509_name_st {
	struct stack_st_X509_NAME_ENTRY * entries;       /*     0     8 */
	int                        modified;             /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	BUF_MEM *                  bytes;                /*    16     8 */
	unsigned char *            canon_enc;            /*    24     8 */
	int                        canon_enclen;         /*    32     4 */

	/* size: 40, cachelines: 1, members: 5 */
	/* sum members: 32, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 40 bytes */
};
struct X509_pubkey_st {
	X509_ALGOR *               algor;                /*     0     8 */
	ASN1_BIT_STRING *          public_key;           /*     8     8 */
	EVP_PKEY *                 pkey;                 /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct x509_store_st {
	int                        cache;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	struct stack_st_X509_OBJECT * objs;              /*     8     8 */
	struct stack_st_X509_LOOKUP * get_cert_methods;  /*    16     8 */
	X509_VERIFY_PARAM *        param;                /*    24     8 */
	int                        (*verify)(X509_STORE_CTX *); /*    32     8 */
	int                        (*verify_cb)(int, X509_STORE_CTX *); /*    40     8 */
	int                        (*get_issuer)(X509 * *, X509_STORE_CTX *, X509 *); /*    48     8 */
	int                        (*check_issued)(X509_STORE_CTX *, X509 *, X509 *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*check_revocation)(X509_STORE_CTX *); /*    64     8 */
	int                        (*get_crl)(X509_STORE_CTX *, X509_CRL * *, X509 *); /*    72     8 */
	int                        (*check_crl)(X509_STORE_CTX *, X509_CRL *); /*    80     8 */
	int                        (*cert_crl)(X509_STORE_CTX *, X509_CRL *, X509 *); /*    88     8 */
	struct stack_st_X509 *     (*lookup_certs)(X509_STORE_CTX *, X509_NAME *); /*    96     8 */
	struct stack_st_X509_CRL * (*lookup_crls)(X509_STORE_CTX *, X509_NAME *); /*   104     8 */
	int                        (*cleanup)(X509_STORE_CTX *); /*   112     8 */
	CRYPTO_EX_DATA             ex_data;              /*   120    16 */
	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	int                        references;           /*   136     4 */

	/* size: 144, cachelines: 3, members: 17 */
	/* sum members: 136, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct x509_store_ctx_st {
	X509_STORE *               ctx;                  /*     0     8 */
	int                        current_method;       /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	X509 *                     cert;                 /*    16     8 */
	struct stack_st_X509 *     untrusted;            /*    24     8 */
	struct stack_st_X509_CRL * crls;                 /*    32     8 */
	X509_VERIFY_PARAM *        param;                /*    40     8 */
	void *                     other_ctx;            /*    48     8 */
	int                        (*verify)(X509_STORE_CTX *); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*verify_cb)(int, X509_STORE_CTX *); /*    64     8 */
	int                        (*get_issuer)(X509 * *, X509_STORE_CTX *, X509 *); /*    72     8 */
	int                        (*check_issued)(X509_STORE_CTX *, X509 *, X509 *); /*    80     8 */
	int                        (*check_revocation)(X509_STORE_CTX *); /*    88     8 */
	int                        (*get_crl)(X509_STORE_CTX *, X509_CRL * *, X509 *); /*    96     8 */
	int                        (*check_crl)(X509_STORE_CTX *, X509_CRL *); /*   104     8 */
	int                        (*cert_crl)(X509_STORE_CTX *, X509_CRL *, X509 *); /*   112     8 */
	int                        (*check_policy)(X509_STORE_CTX *); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct stack_st_X509 *     (*lookup_certs)(X509_STORE_CTX *, X509_NAME *); /*   128     8 */
	struct stack_st_X509_CRL * (*lookup_crls)(X509_STORE_CTX *, X509_NAME *); /*   136     8 */
	int                        (*cleanup)(X509_STORE_CTX *); /*   144     8 */
	int                        valid;                /*   152     4 */
	int                        last_untrusted;       /*   156     4 */
	struct stack_st_X509 *     chain;                /*   160     8 */
	X509_POLICY_TREE *         tree;                 /*   168     8 */
	int                        explicit_policy;      /*   176     4 */
	int                        error_depth;          /*   180     4 */
	int                        error;                /*   184     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 3 boundary (192 bytes) --- */
	X509 *                     current_cert;         /*   192     8 */
	X509 *                     current_issuer;       /*   200     8 */
	X509_CRL *                 current_crl;          /*   208     8 */
	int                        current_crl_score;    /*   216     4 */
	unsigned int               current_reasons;      /*   220     4 */
	X509_STORE_CTX *           parent;               /*   224     8 */
	CRYPTO_EX_DATA             ex_data;              /*   232    16 */

	/* size: 248, cachelines: 4, members: 33 */
	/* sum members: 240, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct ssl_st {
	int                        version;              /*     0     4 */
	int                        type;                 /*     4     4 */
	const SSL_METHOD  *        method;               /*     8     8 */
	BIO *                      rbio;                 /*    16     8 */
	BIO *                      wbio;                 /*    24     8 */
	BIO *                      bbio;                 /*    32     8 */
	int                        rwstate;              /*    40     4 */
	int                        in_handshake;         /*    44     4 */
	int                        (*handshake_func)(SSL *); /*    48     8 */
	int                        server;               /*    56     4 */
	int                        new_session;          /*    60     4 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        quiet_shutdown;       /*    64     4 */
	int                        shutdown;             /*    68     4 */
	int                        state;                /*    72     4 */
	int                        rstate;               /*    76     4 */
	BUF_MEM *                  init_buf;             /*    80     8 */
	void *                     init_msg;             /*    88     8 */
	int                        init_num;             /*    96     4 */
	int                        init_off;             /*   100     4 */
	unsigned char *            packet;               /*   104     8 */
	unsigned int               packet_length;        /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ssl2_state_st *     s2;                   /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct ssl3_state_st *     s3;                   /*   128     8 */
	struct dtls1_state_st *    d1;                   /*   136     8 */
	int                        read_ahead;           /*   144     4 */

	/* XXX 4 bytes hole, try to pack */

	void                       (*msg_callback)(int, int, int, const void  *, size_t, SSL *, void *); /*   152     8 */
	void *                     msg_callback_arg;     /*   160     8 */
	int                        hit;                  /*   168     4 */

	/* XXX 4 bytes hole, try to pack */

	X509_VERIFY_PARAM *        param;                /*   176     8 */
	struct stack_st_SSL_CIPHER * cipher_list;        /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	struct stack_st_SSL_CIPHER * cipher_list_by_id;  /*   192     8 */
	int                        mac_flags;            /*   200     4 */

	/* XXX 4 bytes hole, try to pack */

	EVP_CIPHER_CTX *           enc_read_ctx;         /*   208     8 */
	EVP_MD_CTX *               read_hash;            /*   216     8 */
	COMP_CTX *                 expand;               /*   224     8 */
	EVP_CIPHER_CTX *           enc_write_ctx;        /*   232     8 */
	EVP_MD_CTX *               write_hash;           /*   240     8 */
	COMP_CTX *                 compress;             /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct cert_st *           cert;                 /*   256     8 */
	unsigned int               sid_ctx_length;       /*   264     4 */
	unsigned char              sid_ctx[32];          /*   268    32 */

	/* XXX 4 bytes hole, try to pack */

	SSL_SESSION *              session;              /*   304     8 */
	GEN_SESSION_CB             generate_session_id;  /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	int                        verify_mode;          /*   320     4 */

	/* XXX 4 bytes hole, try to pack */

	int                        (*verify_callback)(int, X509_STORE_CTX *); /*   328     8 */
	void                       (*info_callback)(const SSL  *, int, int); /*   336     8 */
	int                        error;                /*   344     4 */
	int                        error_code;           /*   348     4 */
	unsigned int               (*psk_client_callback)(SSL *, const char  *, char *, unsigned int, unsigned char *, unsigned int); /*   352     8 */
	unsigned int               (*psk_server_callback)(SSL *, const char  *, unsigned char *, unsigned int); /*   360     8 */
	SSL_CTX *                  ctx;                  /*   368     8 */
	int                        debug;                /*   376     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 6 boundary (384 bytes) --- */
	long int                   verify_result;        /*   384     8 */
	CRYPTO_EX_DATA             ex_data;              /*   392    16 */
	struct stack_st_X509_NAME * client_CA;           /*   408     8 */
	int                        references;           /*   416     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          options;              /*   424     8 */
	long unsigned int          mode;                 /*   432     8 */
	long int                   max_cert_list;        /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	int                        first_packet;         /*   448     4 */
	int                        client_version;       /*   452     4 */
	unsigned int               max_send_fragment;    /*   456     4 */

	/* XXX 4 bytes hole, try to pack */

	void                       (*tlsext_debug_cb)(SSL *, int, int, unsigned char *, int, void *); /*   464     8 */
	void *                     tlsext_debug_arg;     /*   472     8 */
	char *                     tlsext_hostname;      /*   480     8 */
	int                        servername_done;      /*   488     4 */
	int                        tlsext_status_type;   /*   492     4 */
	int                        tlsext_status_expected; /*   496     4 */

	/* XXX 4 bytes hole, try to pack */

	struct stack_st_OCSP_RESPID * tlsext_ocsp_ids;   /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	X509_EXTENSIONS *          tlsext_ocsp_exts;     /*   512     8 */
	unsigned char *            tlsext_ocsp_resp;     /*   520     8 */
	int                        tlsext_ocsp_resplen;  /*   528     4 */
	int                        tlsext_ticket_expected; /*   532     4 */
	size_t                     tlsext_ecpointformatlist_length; /*   536     8 */
	unsigned char *            tlsext_ecpointformatlist; /*   544     8 */
	size_t                     tlsext_ellipticcurvelist_length; /*   552     8 */
	unsigned char *            tlsext_ellipticcurvelist; /*   560     8 */
	void *                     tlsext_opaque_prf_input; /*   568     8 */
	/* --- cacheline 9 boundary (576 bytes) --- */
	size_t                     tlsext_opaque_prf_input_len; /*   576     8 */
	TLS_SESSION_TICKET_EXT *   tlsext_session_ticket; /*   584     8 */
	tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb; /*   592     8 */
	void *                     tls_session_ticket_ext_cb_arg; /*   600     8 */
	tls_session_secret_cb_fn   tls_session_secret_cb; /*   608     8 */
	void *                     tls_session_secret_cb_arg; /*   616     8 */
	SSL_CTX *                  initial_ctx;          /*   624     8 */
	unsigned char *            next_proto_negotiated; /*   632     8 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	unsigned char              next_proto_negotiated_len; /*   640     1 */

	/* XXX 7 bytes hole, try to pack */

	struct stack_st_SRTP_PROTECTION_PROFILE * srtp_profiles; /*   648     8 */
	SRTP_PROTECTION_PROFILE *  srtp_profile;         /*   656     8 */
	unsigned int               tlsext_heartbeat;     /*   664     4 */
	unsigned int               tlsext_hb_pending;    /*   668     4 */
	unsigned int               tlsext_hb_seq;        /*   672     4 */
	int                        renegotiate;          /*   676     4 */
	SRP_CTX                    srp_ctx;              /*   680   128 */
	/* --- cacheline 12 boundary (768 bytes) was 40 bytes ago --- */
	unsigned char *            alpn_client_proto_list; /*   808     8 */
	unsigned int               alpn_client_proto_list_len; /*   816     4 */

	/* size: 824, cachelines: 13, members: 96 */
	/* sum members: 773, holes: 11, sum holes: 47 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct ssl_ctx_st {
	const SSL_METHOD  *        method;               /*     0     8 */
	struct stack_st_SSL_CIPHER * cipher_list;        /*     8     8 */
	struct stack_st_SSL_CIPHER * cipher_list_by_id;  /*    16     8 */
	struct x509_store_st *     cert_store;           /*    24     8 */
	struct lhash_st_SSL_SESSION * sessions;          /*    32     8 */
	long unsigned int          session_cache_size;   /*    40     8 */
	struct ssl_session_st *    session_cache_head;   /*    48     8 */
	struct ssl_session_st *    session_cache_tail;   /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        session_cache_mode;   /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	long int                   session_timeout;      /*    72     8 */
	int                        (*new_session_cb)(struct ssl_st *, SSL_SESSION *); /*    80     8 */
	void                       (*remove_session_cb)(struct ssl_ctx_st *, SSL_SESSION *); /*    88     8 */
	SSL_SESSION *              (*get_session_cb)(struct ssl_st *, unsigned char *, int, int *); /*    96     8 */
	struct {
		int                sess_connect;         /*   104     4 */
		int                sess_connect_renegotiate; /*   108     4 */
		int                sess_connect_good;    /*   112     4 */
		int                sess_accept;          /*   116     4 */
		int                sess_accept_renegotiate; /*   120     4 */
		int                sess_accept_good;     /*   124     4 */
		int                sess_miss;            /*   128     4 */
		int                sess_timeout;         /*   132     4 */
		int                sess_cache_full;      /*   136     4 */
		int                sess_hit;             /*   140     4 */
		int                sess_cb_hit;          /*   144     4 */
	} stats;                                         /*   104    44 */
	/* --- cacheline 2 boundary (128 bytes) was 20 bytes ago --- */
	int                        references;           /*   148     4 */
	int                        (*app_verify_callback)(X509_STORE_CTX *, void *); /*   152     8 */
	void *                     app_verify_arg;       /*   160     8 */
	pem_password_cb *          default_passwd_callback; /*   168     8 */
	void *                     default_passwd_callback_userdata; /*   176     8 */
	int                        (*client_cert_cb)(SSL *, X509 * *, EVP_PKEY * *); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        (*app_gen_cookie_cb)(SSL *, unsigned char *, unsigned int *); /*   192     8 */
	int                        (*app_verify_cookie_cb)(SSL *, unsigned char *, unsigned int); /*   200     8 */
	CRYPTO_EX_DATA             ex_data;              /*   208    16 */
	const EVP_MD  *            rsa_md5;              /*   224     8 */
	const EVP_MD  *            md5;                  /*   232     8 */
	const EVP_MD  *            sha1;                 /*   240     8 */
	struct stack_st_X509 *     extra_certs;          /*   248     8 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	struct stack_st_SSL_COMP * comp_methods;         /*   256     8 */
	void                       (*info_callback)(const SSL  *, int, int); /*   264     8 */
	struct stack_st_X509_NAME * client_CA;           /*   272     8 */
	long unsigned int          options;              /*   280     8 */
	long unsigned int          mode;                 /*   288     8 */
	long int                   max_cert_list;        /*   296     8 */
	struct cert_st *           cert;                 /*   304     8 */
	int                        read_ahead;           /*   312     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 5 boundary (320 bytes) --- */
	void                       (*msg_callback)(int, int, int, const void  *, size_t, SSL *, void *); /*   320     8 */
	void *                     msg_callback_arg;     /*   328     8 */
	int                        verify_mode;          /*   336     4 */
	unsigned int               sid_ctx_length;       /*   340     4 */
	unsigned char              sid_ctx[32];          /*   344    32 */
	int                        (*default_verify_callback)(int, X509_STORE_CTX *); /*   376     8 */
	/* --- cacheline 6 boundary (384 bytes) --- */
	GEN_SESSION_CB             generate_session_id;  /*   384     8 */
	X509_VERIFY_PARAM *        param;                /*   392     8 */
	int                        quiet_shutdown;       /*   400     4 */
	unsigned int               max_send_fragment;    /*   404     4 */
	ENGINE *                   client_cert_engine;   /*   408     8 */
	int                        (*tlsext_servername_callback)(SSL *, int *, void *); /*   416     8 */
	void *                     tlsext_servername_arg; /*   424     8 */
	unsigned char              tlsext_tick_key_name[16]; /*   432    16 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	unsigned char              tlsext_tick_hmac_key[16]; /*   448    16 */
	unsigned char              tlsext_tick_aes_key[16]; /*   464    16 */
	int                        (*tlsext_ticket_key_cb)(SSL *, unsigned char *, unsigned char *, EVP_CIPHER_CTX *, HMAC_CTX *, int); /*   480     8 */
	int                        (*tlsext_status_cb)(SSL *, void *); /*   488     8 */
	void *                     tlsext_status_arg;    /*   496     8 */
	int                        (*tlsext_opaque_prf_input_callback)(SSL *, void *, size_t, void *); /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	void *                     tlsext_opaque_prf_input_callback_arg; /*   512     8 */
	char *                     psk_identity_hint;    /*   520     8 */
	unsigned int               (*psk_client_callback)(SSL *, const char  *, char *, unsigned int, unsigned char *, unsigned int); /*   528     8 */
	unsigned int               (*psk_server_callback)(SSL *, const char  *, unsigned char *, unsigned int); /*   536     8 */
	unsigned int               freelist_max_len;     /*   544     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ssl3_buf_freelist_st * wbuf_freelist;     /*   552     8 */
	struct ssl3_buf_freelist_st * rbuf_freelist;     /*   560     8 */
	SRP_CTX                    srp_ctx;              /*   568   128 */
	/* --- cacheline 10 boundary (640 bytes) was 56 bytes ago --- */
	int                        (*next_protos_advertised_cb)(SSL *, const unsigned char  * *, unsigned int *, void *); /*   696     8 */
	/* --- cacheline 11 boundary (704 bytes) --- */
	void *                     next_protos_advertised_cb_arg; /*   704     8 */
	int                        (*next_proto_select_cb)(SSL *, unsigned char * *, unsigned char *, const unsigned char  *, unsigned int, void *); /*   712     8 */
	void *                     next_proto_select_cb_arg; /*   720     8 */
	struct stack_st_SRTP_PROTECTION_PROFILE * srtp_profiles; /*   728     8 */
	int                        (*alpn_select_cb)(SSL *, const unsigned char  * *, unsigned char *, const unsigned char  *, unsigned int, void *); /*   736     8 */
	void *                     alpn_select_cb_arg;   /*   744     8 */
	unsigned char *            alpn_client_proto_list; /*   752     8 */
	unsigned int               alpn_client_proto_list_len; /*   760     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 12 boundary (768 bytes) --- */
	size_t                     tlsext_ecpointformatlist_length; /*   768     8 */
	unsigned char *            tlsext_ecpointformatlist; /*   776     8 */
	size_t                     tlsext_ellipticcurvelist_length; /*   784     8 */
	unsigned char *            tlsext_ellipticcurvelist; /*   792     8 */

	/* size: 800, cachelines: 13, members: 76 */
	/* sum members: 784, holes: 4, sum holes: 16 */
	/* last cacheline: 32 bytes */
};
struct AUTHORITY_KEYID_st {
	ASN1_OCTET_STRING *        keyid;                /*     0     8 */
	GENERAL_NAMES *            issuer;               /*     8     8 */
	ASN1_INTEGER *             serial;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct ISSUING_DIST_POINT_st {
	DIST_POINT_NAME *          distpoint;            /*     0     8 */
	int                        onlyuser;             /*     8     4 */
	int                        onlyCA;               /*    12     4 */
	ASN1_BIT_STRING *          onlysomereasons;      /*    16     8 */
	int                        indirectCRL;          /*    24     4 */
	int                        onlyattr;             /*    28     4 */

	/* size: 32, cachelines: 1, members: 6 */
	/* last cacheline: 32 bytes */
};
struct NAME_CONSTRAINTS_st {
	struct stack_st_GENERAL_SUBTREE * permittedSubtrees; /*     0     8 */
	struct stack_st_GENERAL_SUBTREE * excludedSubtrees; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct bio_st {
	BIO_METHOD *               method;               /*     0     8 */
	long int                   (*callback)(struct bio_st *, int, const char  *, int, long int, long int); /*     8     8 */
	char *                     cb_arg;               /*    16     8 */
	int                        init;                 /*    24     4 */
	int                        shutdown;             /*    28     4 */
	int                        flags;                /*    32     4 */
	int                        retry_reason;         /*    36     4 */
	int                        num;                  /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     ptr;                  /*    48     8 */
	struct bio_st *            next_bio;             /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct bio_st *            prev_bio;             /*    64     8 */
	int                        references;           /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          num_read;             /*    80     8 */
	long unsigned int          num_write;            /*    88     8 */
	CRYPTO_EX_DATA             ex_data;              /*    96    16 */

	/* size: 112, cachelines: 2, members: 15 */
	/* sum members: 104, holes: 2, sum holes: 8 */
	/* last cacheline: 48 bytes */
};
struct bio_method_st {
	int                        type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	int                        (*bwrite)(BIO *, const char  *, int); /*    16     8 */
	int                        (*bread)(BIO *, char *, int); /*    24     8 */
	int                        (*bputs)(BIO *, const char  *); /*    32     8 */
	int                        (*bgets)(BIO *, char *, int); /*    40     8 */
	long int                   (*ctrl)(BIO *, int, long int, void *); /*    48     8 */
	int                        (*create)(BIO *);     /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*destroy)(BIO *);    /*    64     8 */
	long int                   (*callback_ctrl)(BIO *, int, bio_info_cb *); /*    72     8 */

	/* size: 80, cachelines: 2, members: 10 */
	/* sum members: 76, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct comp_ctx_st {
	COMP_METHOD *              meth;                 /*     0     8 */
	long unsigned int          compress_in;          /*     8     8 */
	long unsigned int          compress_out;         /*    16     8 */
	long unsigned int          expand_in;            /*    24     8 */
	long unsigned int          expand_out;           /*    32     8 */
	CRYPTO_EX_DATA             ex_data;              /*    40    16 */

	/* size: 56, cachelines: 1, members: 6 */
	/* last cacheline: 56 bytes */
};
struct comp_method_st {
	int                        type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	int                        (*init)(COMP_CTX *);  /*    16     8 */
	void                       (*finish)(COMP_CTX *); /*    24     8 */
	int                        (*compress)(COMP_CTX *, unsigned char *, unsigned int, unsigned char *, unsigned int); /*    32     8 */
	int                        (*expand)(COMP_CTX *, unsigned char *, unsigned int, unsigned char *, unsigned int); /*    40     8 */
	long int                   (*ctrl)(void);        /*    48     8 */
	long int                   (*callback_ctrl)(void); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct stack_st_X509_ALGOR {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ASN1_ENCODING_st {
	unsigned char *            enc;                  /*     0     8 */
	long int                   len;                  /*     8     8 */
	int                        modified;             /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct asn1_type_st {
	int                        type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		char *             ptr;                  /*           8 */
		ASN1_BOOLEAN       boolean;              /*           4 */
		ASN1_STRING *      asn1_string;          /*           8 */
		ASN1_OBJECT *      object;               /*           8 */
		ASN1_INTEGER *     integer;              /*           8 */
		ASN1_ENUMERATED *  enumerated;           /*           8 */
		ASN1_BIT_STRING *  bit_string;           /*           8 */
		ASN1_OCTET_STRING * octet_string;        /*           8 */
		ASN1_PRINTABLESTRING * printablestring;  /*           8 */
		ASN1_T61STRING *   t61string;            /*           8 */
		ASN1_IA5STRING *   ia5string;            /*           8 */
		ASN1_GENERALSTRING * generalstring;      /*           8 */
		ASN1_BMPSTRING *   bmpstring;            /*           8 */
		ASN1_UNIVERSALSTRING * universalstring;  /*           8 */
		ASN1_UTCTIME *     utctime;              /*           8 */
		ASN1_GENERALIZEDTIME * generalizedtime;  /*           8 */
		ASN1_VISIBLESTRING * visiblestring;      /*           8 */
		ASN1_UTF8STRING *  utf8string;           /*           8 */
		ASN1_STRING *      set;                  /*           8 */
		ASN1_STRING *      sequence;             /*           8 */
		ASN1_VALUE *       asn1_value;           /*           8 */
	} value;                                         /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct stack_st_ASN1_OBJECT {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_ATTRIBUTE {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct DSA_SIG_st {
	BIGNUM *                   r;                    /*     0     8 */
	BIGNUM *                   s;                    /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct X509_val_st {
	ASN1_TIME *                notBefore;            /*     0     8 */
	ASN1_TIME *                notAfter;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct X509_name_entry_st {
	ASN1_OBJECT *              object;               /*     0     8 */
	ASN1_STRING *              value;                /*     8     8 */
	int                        set;                  /*    16     4 */
	int                        size;                 /*    20     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct stack_st_X509_NAME_ENTRY {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_NAME {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_EXTENSION {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct x509_cinf_st {
	ASN1_INTEGER *             version;              /*     0     8 */
	ASN1_INTEGER *             serialNumber;         /*     8     8 */
	X509_ALGOR *               signature;            /*    16     8 */
	X509_NAME *                issuer;               /*    24     8 */
	X509_VAL *                 validity;             /*    32     8 */
	X509_NAME *                subject;              /*    40     8 */
	X509_PUBKEY *              key;                  /*    48     8 */
	ASN1_BIT_STRING *          issuerUID;            /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ASN1_BIT_STRING *          subjectUID;           /*    64     8 */
	struct stack_st_X509_EXTENSION * extensions;     /*    72     8 */
	ASN1_ENCODING              enc;                  /*    80    24 */

	/* size: 104, cachelines: 2, members: 11 */
	/* last cacheline: 40 bytes */
};
struct x509_cert_aux_st {
	struct stack_st_ASN1_OBJECT * trust;             /*     0     8 */
	struct stack_st_ASN1_OBJECT * reject;            /*     8     8 */
	ASN1_UTF8STRING *          alias;                /*    16     8 */
	ASN1_OCTET_STRING *        keyid;                /*    24     8 */
	struct stack_st_X509_ALGOR * other;              /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct stack_st_DIST_POINT {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_GENERAL_NAME {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509 {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_REVOKED {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct X509_crl_info_st {
	ASN1_INTEGER *             version;              /*     0     8 */
	X509_ALGOR *               sig_alg;              /*     8     8 */
	X509_NAME *                issuer;               /*    16     8 */
	ASN1_TIME *                lastUpdate;           /*    24     8 */
	ASN1_TIME *                nextUpdate;           /*    32     8 */
	struct stack_st_X509_REVOKED * revoked;          /*    40     8 */
	struct stack_st_X509_EXTENSION * extensions;     /*    48     8 */
	ASN1_ENCODING              enc;                  /*    56    24 */
	/* --- cacheline 1 boundary (64 bytes) was 16 bytes ago --- */

	/* size: 80, cachelines: 2, members: 8 */
	/* last cacheline: 16 bytes */
};
struct stack_st_X509_CRL {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_LOOKUP {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct stack_st_X509_OBJECT {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct X509_VERIFY_PARAM_st {
	char *                     name;                 /*     0     8 */
	time_t                     check_time;           /*     8     8 */
	long unsigned int          inh_flags;            /*    16     8 */
	long unsigned int          flags;                /*    24     8 */
	int                        purpose;              /*    32     4 */
	int                        trust;                /*    36     4 */
	int                        depth;                /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct stack_st_ASN1_OBJECT * policies;          /*    48     8 */
	X509_VERIFY_PARAM_ID *     id;                   /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 9 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct hmac_ctx_st {
	const EVP_MD  *            md;                   /*     0     8 */
	EVP_MD_CTX                 md_ctx;               /*     8    48 */
	EVP_MD_CTX                 i_ctx;                /*    56    48 */
	/* --- cacheline 1 boundary (64 bytes) was 40 bytes ago --- */
	EVP_MD_CTX                 o_ctx;                /*   104    48 */
	/* --- cacheline 2 boundary (128 bytes) was 24 bytes ago --- */
	unsigned int               key_length;           /*   152     4 */
	unsigned char              key[128];             /*   156   128 */
	/* --- cacheline 4 boundary (256 bytes) was 28 bytes ago --- */

	/* size: 288, cachelines: 5, members: 6 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct tls_session_ticket_ext_st {
	short unsigned int         length;               /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	void *                     data;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 10, holes: 1, sum holes: 6 */
	/* last cacheline: 16 bytes */
};
struct ssl_method_st {
	int                        version;              /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	int                        (*ssl_new)(SSL *);    /*     8     8 */
	void                       (*ssl_clear)(SSL *);  /*    16     8 */
	void                       (*ssl_free)(SSL *);   /*    24     8 */
	int                        (*ssl_accept)(SSL *); /*    32     8 */
	int                        (*ssl_connect)(SSL *); /*    40     8 */
	int                        (*ssl_read)(SSL *, void *, int); /*    48     8 */
	int                        (*ssl_peek)(SSL *, void *, int); /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        (*ssl_write)(SSL *, const void  *, int); /*    64     8 */
	int                        (*ssl_shutdown)(SSL *); /*    72     8 */
	int                        (*ssl_renegotiate)(SSL *); /*    80     8 */
	int                        (*ssl_renegotiate_check)(SSL *); /*    88     8 */
	long int                   (*ssl_get_message)(SSL *, int, int, int, long int, int *); /*    96     8 */
	int                        (*ssl_read_bytes)(SSL *, int, unsigned char *, int, int); /*   104     8 */
	int                        (*ssl_write_bytes)(SSL *, int, const void  *, int); /*   112     8 */
	int                        (*ssl_dispatch_alert)(SSL *); /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	long int                   (*ssl_ctrl)(SSL *, int, long int, void *); /*   128     8 */
	long int                   (*ssl_ctx_ctrl)(SSL_CTX *, int, long int, void *); /*   136     8 */
	const SSL_CIPHER  *        (*get_cipher_by_char)(const unsigned char  *); /*   144     8 */
	int                        (*put_cipher_by_char)(const SSL_CIPHER  *, unsigned char *); /*   152     8 */
	int                        (*ssl_pending)(const SSL  *); /*   160     8 */
	int                        (*num_ciphers)(void); /*   168     8 */
	const SSL_CIPHER  *        (*get_cipher)(unsigned int); /*   176     8 */
	const struct ssl_method_st  * (*get_ssl_method)(int); /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	long int                   (*get_timeout)(void); /*   192     8 */
	struct ssl3_enc_method *   ssl3_enc;             /*   200     8 */
	int                        (*ssl_version)(void); /*   208     8 */
	long int                   (*ssl_callback_ctrl)(SSL *, int, void (*)(void)); /*   216     8 */
	long int                   (*ssl_ctx_callback_ctrl)(SSL_CTX *, int, void (*)(void)); /*   224     8 */

	/* size: 232, cachelines: 4, members: 29 */
	/* sum members: 228, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct ssl_cipher_st {
	int                        valid;                /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	long unsigned int          id;                   /*    16     8 */
	long unsigned int          algorithm_mkey;       /*    24     8 */
	long unsigned int          algorithm_auth;       /*    32     8 */
	long unsigned int          algorithm_enc;        /*    40     8 */
	long unsigned int          algorithm_mac;        /*    48     8 */
	long unsigned int          algorithm_ssl;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	long unsigned int          algo_strength;        /*    64     8 */
	long unsigned int          algorithm2;           /*    72     8 */
	int                        strength_bits;        /*    80     4 */
	int                        alg_bits;             /*    84     4 */

	/* size: 88, cachelines: 2, members: 12 */
	/* sum members: 84, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct ssl_session_st {
	int                        ssl_version;          /*     0     4 */
	unsigned int               key_arg_length;       /*     4     4 */
	unsigned char              key_arg[8];           /*     8     8 */
	int                        master_key_length;    /*    16     4 */
	unsigned char              master_key[48];       /*    20    48 */
	/* --- cacheline 1 boundary (64 bytes) was 4 bytes ago --- */
	unsigned int               session_id_length;    /*    68     4 */
	unsigned char              session_id[32];       /*    72    32 */
	unsigned int               sid_ctx_length;       /*   104     4 */
	unsigned char              sid_ctx[32];          /*   108    32 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	char *                     psk_identity_hint;    /*   144     8 */
	char *                     psk_identity;         /*   152     8 */
	int                        not_resumable;        /*   160     4 */

	/* XXX 4 bytes hole, try to pack */

	struct sess_cert_st *      sess_cert;            /*   168     8 */
	X509 *                     peer;                 /*   176     8 */
	long int                   verify_result;        /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        references;           /*   192     4 */

	/* XXX 4 bytes hole, try to pack */

	long int                   timeout;              /*   200     8 */
	long int                   time;                 /*   208     8 */
	unsigned int               compress_meth;        /*   216     4 */

	/* XXX 4 bytes hole, try to pack */

	const SSL_CIPHER  *        cipher;               /*   224     8 */
	long unsigned int          cipher_id;            /*   232     8 */
	struct stack_st_SSL_CIPHER * ciphers;            /*   240     8 */
	CRYPTO_EX_DATA             ex_data;              /*   248    16 */
	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */
	struct ssl_session_st *    prev;                 /*   264     8 */
	struct ssl_session_st *    next;                 /*   272     8 */
	char *                     tlsext_hostname;      /*   280     8 */
	size_t                     tlsext_ecpointformatlist_length; /*   288     8 */
	unsigned char *            tlsext_ecpointformatlist; /*   296     8 */
	size_t                     tlsext_ellipticcurvelist_length; /*   304     8 */
	unsigned char *            tlsext_ellipticcurvelist; /*   312     8 */
	/* --- cacheline 5 boundary (320 bytes) --- */
	unsigned char *            tlsext_tick;          /*   320     8 */
	size_t                     tlsext_ticklen;       /*   328     8 */
	long int                   tlsext_tick_lifetime_hint; /*   336     8 */
	char *                     srp_username;         /*   344     8 */

	/* size: 352, cachelines: 6, members: 34 */
	/* sum members: 336, holes: 4, sum holes: 16 */
	/* last cacheline: 32 bytes */
};
struct stack_st_SSL_CIPHER {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct srtp_protection_profile_st {
	const char  *              name;                 /*     0     8 */
	long unsigned int          id;                   /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct stack_st_SRTP_PROTECTION_PROFILE {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct srp_ctx_st {
	void *                     SRP_cb_arg;           /*     0     8 */
	int                        (*TLS_ext_srp_username_callback)(SSL *, int *, void *); /*     8     8 */
	int                        (*SRP_verify_param_callback)(SSL *, void *); /*    16     8 */
	char *                     (*SRP_give_srp_client_pwd_callback)(SSL *, void *); /*    24     8 */
	char *                     login;                /*    32     8 */
	BIGNUM *                   N;                    /*    40     8 */
	BIGNUM *                   g;                    /*    48     8 */
	BIGNUM *                   s;                    /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	BIGNUM *                   B;                    /*    64     8 */
	BIGNUM *                   A;                    /*    72     8 */
	BIGNUM *                   a;                    /*    80     8 */
	BIGNUM *                   b;                    /*    88     8 */
	BIGNUM *                   v;                    /*    96     8 */
	char *                     info;                 /*   104     8 */
	int                        strength;             /*   112     4 */

	/* XXX 4 bytes hole, try to pack */

	long unsigned int          srp_Mask;             /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */

	/* size: 128, cachelines: 2, members: 16 */
	/* sum members: 124, holes: 1, sum holes: 4 */
};
struct ssl_comp_st {
	int                        id;                   /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */
	COMP_METHOD *              method;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct stack_st_SSL_COMP {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct lhash_st_SSL_SESSION {
	int                        dummy;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ssl2_state_st {
	int                        three_byte_header;    /*     0     4 */
	int                        clear_text;           /*     4     4 */
	int                        escape;               /*     8     4 */
	int                        ssl2_rollback;        /*    12     4 */
	unsigned int               wnum;                 /*    16     4 */
	int                        wpend_tot;            /*    20     4 */
	const unsigned char  *     wpend_buf;            /*    24     8 */
	int                        wpend_off;            /*    32     4 */
	int                        wpend_len;            /*    36     4 */
	int                        wpend_ret;            /*    40     4 */
	int                        rbuf_left;            /*    44     4 */
	int                        rbuf_offs;            /*    48     4 */

	/* XXX 4 bytes hole, try to pack */

	unsigned char *            rbuf;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned char *            wbuf;                 /*    64     8 */
	unsigned char *            write_ptr;            /*    72     8 */
	unsigned int               padding;              /*    80     4 */
	unsigned int               rlength;              /*    84     4 */
	int                        ract_data_length;     /*    88     4 */
	unsigned int               wlength;              /*    92     4 */
	int                        wact_data_length;     /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	unsigned char *            ract_data;            /*   104     8 */
	unsigned char *            wact_data;            /*   112     8 */
	unsigned char *            mac_data;             /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	unsigned char *            read_key;             /*   128     8 */
	unsigned char *            write_key;            /*   136     8 */
	unsigned int               challenge_length;     /*   144     4 */
	unsigned char              challenge[32];        /*   148    32 */
	unsigned int               conn_id_length;       /*   180     4 */
	unsigned char              conn_id[16];          /*   184    16 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	unsigned int               key_material_length;  /*   200     4 */
	unsigned char              key_material[48];     /*   204    48 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 4 boundary (256 bytes) --- */
	long unsigned int          read_sequence;        /*   256     8 */
	long unsigned int          write_sequence;       /*   264     8 */
	struct {
		unsigned int       conn_id_length;       /*   272     4 */
		unsigned int       cert_type;            /*   276     4 */
		unsigned int       cert_length;          /*   280     4 */
		unsigned int       csl;                  /*   284     4 */
		unsigned int       clear;                /*   288     4 */
		unsigned int       enc;                  /*   292     4 */
		unsigned char      ccl[32];              /*   296    32 */
		unsigned int       cipher_spec_length;   /*   328     4 */
		unsigned int       session_id_length;    /*   332     4 */
		/* --- cacheline 1 boundary (64 bytes) --- */
		unsigned int       clen;                 /*   336     4 */
		unsigned int       rlen;                 /*   340     4 */
	} tmp;                                           /*   272    72 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */

	/* size: 344, cachelines: 6, members: 34 */
	/* sum members: 332, holes: 3, sum holes: 12 */
	/* last cacheline: 24 bytes */
};
struct ssl3_state_st {
	long int                   flags;                /*     0     8 */
	int                        delay_buf_pop_ret;    /*     8     4 */
	unsigned char              read_sequence[8];     /*    12     8 */
	int                        read_mac_secret_size; /*    20     4 */
	unsigned char              read_mac_secret[64];  /*    24    64 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	unsigned char              write_sequence[8];    /*    88     8 */
	int                        write_mac_secret_size; /*    96     4 */
	unsigned char              write_mac_secret[64]; /*   100    64 */
	/* --- cacheline 2 boundary (128 bytes) was 36 bytes ago --- */
	unsigned char              server_random[32];    /*   164    32 */
	/* --- cacheline 3 boundary (192 bytes) was 4 bytes ago --- */
	unsigned char              client_random[32];    /*   196    32 */
	int                        need_empty_fragments; /*   228     4 */
	int                        empty_fragment_done;  /*   232     4 */
	int                        init_extra;           /*   236     4 */
	SSL3_BUFFER                rbuf;                 /*   240    24 */
	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */
	SSL3_BUFFER                wbuf;                 /*   264    24 */
	SSL3_RECORD                rrec;                 /*   288    56 */
	/* --- cacheline 5 boundary (320 bytes) was 24 bytes ago --- */
	SSL3_RECORD                wrec;                 /*   344    56 */
	/* --- cacheline 6 boundary (384 bytes) was 16 bytes ago --- */
	unsigned char              alert_fragment[2];    /*   400     2 */

	/* XXX 2 bytes hole, try to pack */

	unsigned int               alert_fragment_len;   /*   404     4 */
	unsigned char              handshake_fragment[4]; /*   408     4 */
	unsigned int               handshake_fragment_len; /*   412     4 */
	unsigned int               wnum;                 /*   416     4 */
	int                        wpend_tot;            /*   420     4 */
	int                        wpend_type;           /*   424     4 */
	int                        wpend_ret;            /*   428     4 */
	const unsigned char  *     wpend_buf;            /*   432     8 */
	BIO *                      handshake_buffer;     /*   440     8 */
	/* --- cacheline 7 boundary (448 bytes) --- */
	EVP_MD_CTX * *             handshake_dgst;       /*   448     8 */
	int                        change_cipher_spec;   /*   456     4 */
	int                        warn_alert;           /*   460     4 */
	int                        fatal_alert;          /*   464     4 */
	int                        alert_dispatch;       /*   468     4 */
	unsigned char              send_alert[2];        /*   472     2 */

	/* XXX 2 bytes hole, try to pack */

	int                        renegotiate;          /*   476     4 */
	int                        total_renegotiations; /*   480     4 */
	int                        num_renegotiations;   /*   484     4 */
	int                        in_read_app_data;     /*   488     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     client_opaque_prf_input; /*   496     8 */
	size_t                     client_opaque_prf_input_len; /*   504     8 */
	/* --- cacheline 8 boundary (512 bytes) --- */
	void *                     server_opaque_prf_input; /*   512     8 */
	size_t                     server_opaque_prf_input_len; /*   520     8 */
	struct {
		unsigned char      cert_verify_md[128];  /*   528   128 */
		/* --- cacheline 2 boundary (128 bytes) --- */
		unsigned char      finish_md[128];       /*   656   128 */
		/* --- cacheline 4 boundary (256 bytes) --- */
		int                finish_md_len;        /*   784     4 */
		unsigned char      peer_finish_md[128];  /*   788   128 */
		/* --- cacheline 6 boundary (384 bytes) was 4 bytes ago --- */
		int                peer_finish_md_len;   /*   916     4 */
		long unsigned int  message_size;         /*   920     8 */
		int                message_type;         /*   928     4 */
		const SSL_CIPHER  * new_cipher;          /*   936     8 */
		DH *               dh;                   /*   944     8 */
		EC_KEY *           ecdh;                 /*   952     8 */
		int                next_state;           /*   960     4 */
		int                reuse_message;        /*   964     4 */
		int                cert_req;             /*   968     4 */
		int                ctype_num;            /*   972     4 */
		char               ctype[9];             /*   976     9 */
		/* --- cacheline 7 boundary (448 bytes) was 5 bytes ago --- */
		struct stack_st_X509_NAME * ca_names;    /*   992     8 */
		int                use_rsa_tmp;          /*  1000     4 */
		int                key_block_length;     /*  1004     4 */
		unsigned char *    key_block;            /*  1008     8 */
		const EVP_CIPHER  * new_sym_enc;         /*  1016     8 */
		const EVP_MD  *    new_hash;             /*  1024     8 */
		int                new_mac_pkey_type;    /*  1032     4 */
		int                new_mac_secret_size;  /*  1036     4 */
		const SSL_COMP  *  new_compression;      /*  1040     8 */
		int                cert_request;         /*  1048     4 */
		/* --- cacheline 8 boundary (512 bytes) was 1 bytes ago --- */
	} tmp;                                           /*   528   528 */
	/* --- cacheline 16 boundary (1024 bytes) was 32 bytes ago --- */
	unsigned char              previous_client_finished[64]; /*  1056    64 */
	/* --- cacheline 17 boundary (1088 bytes) was 32 bytes ago --- */
	unsigned char              previous_client_finished_len; /*  1120     1 */
	unsigned char              previous_server_finished[64]; /*  1121    64 */
	/* --- cacheline 18 boundary (1152 bytes) was 33 bytes ago --- */
	unsigned char              previous_server_finished_len; /*  1185     1 */

	/* XXX 2 bytes hole, try to pack */

	int                        send_connection_binding; /*  1188     4 */
	int                        next_proto_neg_seen;  /*  1192     4 */
	char                       is_probably_safari;   /*  1196     1 */

	/* XXX 3 bytes hole, try to pack */

	unsigned char *            alpn_selected;        /*  1200     8 */
	unsigned int               alpn_selected_len;    /*  1208     4 */

	/* size: 1216, cachelines: 19, members: 51 */
	/* sum members: 1199, holes: 5, sum holes: 13 */
	/* padding: 4 */
};
struct dtls1_state_st {
	unsigned int               send_cookie;          /*     0     4 */
	unsigned char              cookie[256];          /*     4   256 */
	/* --- cacheline 4 boundary (256 bytes) was 4 bytes ago --- */
	unsigned char              rcvd_cookie[256];     /*   260   256 */
	/* --- cacheline 8 boundary (512 bytes) was 4 bytes ago --- */
	unsigned int               cookie_len;           /*   516     4 */
	short unsigned int         r_epoch;              /*   520     2 */
	short unsigned int         w_epoch;              /*   522     2 */

	/* XXX 4 bytes hole, try to pack */

	DTLS1_BITMAP               bitmap;               /*   528    16 */
	DTLS1_BITMAP               next_bitmap;          /*   544    16 */
	short unsigned int         handshake_write_seq;  /*   560     2 */
	short unsigned int         next_handshake_write_seq; /*   562     2 */
	short unsigned int         handshake_read_seq;   /*   564     2 */
	unsigned char              last_write_sequence[8]; /*   566     8 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 9 boundary (576 bytes) --- */
	record_pqueue              unprocessed_rcds;     /*   576    16 */
	record_pqueue              processed_rcds;       /*   592    16 */
	pqueue                     buffered_messages;    /*   608     8 */
	pqueue                     sent_messages;        /*   616     8 */
	record_pqueue              buffered_app_data;    /*   624    16 */
	/* --- cacheline 10 boundary (640 bytes) --- */
	unsigned int               listen;               /*   640     4 */
	unsigned int               link_mtu;             /*   644     4 */
	unsigned int               mtu;                  /*   648     4 */

	/* XXX 4 bytes hole, try to pack */

	struct hm_header_st        w_msg_hdr;            /*   656    88 */
	/* --- cacheline 11 boundary (704 bytes) was 40 bytes ago --- */
	struct hm_header_st        r_msg_hdr;            /*   744    88 */
	/* --- cacheline 13 boundary (832 bytes) --- */
	struct dtls1_timeout_st    timeout;              /*   832    12 */

	/* XXX 4 bytes hole, try to pack */

	struct timeval             next_timeout;         /*   848    16 */
	short unsigned int         timeout_duration;     /*   864     2 */
	unsigned char              alert_fragment[2];    /*   866     2 */
	unsigned int               alert_fragment_len;   /*   868     4 */
	unsigned char              handshake_fragment[12]; /*   872    12 */
	unsigned int               handshake_fragment_len; /*   884     4 */
	unsigned int               retransmitting;       /*   888     4 */
	unsigned int               change_cipher_spec_ok; /*   892     4 */
	/* --- cacheline 14 boundary (896 bytes) --- */

	/* size: 896, cachelines: 14, members: 31 */
	/* sum members: 882, holes: 4, sum holes: 14 */
};
struct ssl3_record_st {
	int                        type;                 /*     0     4 */
	unsigned int               length;               /*     4     4 */
	unsigned int               off;                  /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	unsigned char *            data;                 /*    16     8 */
	unsigned char *            input;                /*    24     8 */
	unsigned char *            comp;                 /*    32     8 */
	long unsigned int          epoch;                /*    40     8 */
	unsigned char              seq_num[8];           /*    48     8 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 52, holes: 1, sum holes: 4 */
	/* last cacheline: 56 bytes */
};
struct ssl3_buffer_st {
	unsigned char *            buf;                  /*     0     8 */
	size_t                     len;                  /*     8     8 */
	int                        offset;               /*    16     4 */
	int                        left;                 /*    20     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct dtls1_bitmap_st {
	long unsigned int          map;                  /*     0     8 */
	unsigned char              max_seq_num[8];       /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct dtls1_retransmit_state {
	EVP_CIPHER_CTX *           enc_write_ctx;        /*     0     8 */
	EVP_MD_CTX *               write_hash;           /*     8     8 */
	COMP_CTX *                 compress;             /*    16     8 */
	SSL_SESSION *              session;              /*    24     8 */
	short unsigned int         epoch;                /*    32     2 */

	/* size: 40, cachelines: 1, members: 5 */
	/* padding: 6 */
	/* last cacheline: 40 bytes */
};
struct hm_header_st {
	unsigned char              type;                 /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	long unsigned int          msg_len;              /*     8     8 */
	short unsigned int         seq;                  /*    16     2 */

	/* XXX 6 bytes hole, try to pack */

	long unsigned int          frag_off;             /*    24     8 */
	long unsigned int          frag_len;             /*    32     8 */
	unsigned int               is_ccs;               /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	struct dtls1_retransmit_state saved_retransmit_state; /*    48    40 */

	/* XXX last struct has 6 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */

	/* size: 88, cachelines: 2, members: 7 */
	/* sum members: 71, holes: 3, sum holes: 17 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 24 bytes */
};
struct dtls1_timeout_st {
	unsigned int               read_timeouts;        /*     0     4 */
	unsigned int               write_timeouts;       /*     4     4 */
	unsigned int               num_alerts;           /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct record_pqueue_st {
	short unsigned int         epoch;                /*     0     2 */

	/* XXX 6 bytes hole, try to pack */

	pqueue                     q;                    /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 10, holes: 1, sum holes: 6 */
	/* last cacheline: 16 bytes */
};
struct DIST_POINT_NAME_st {
	int                        type;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	union {
		GENERAL_NAMES *    fullname;             /*           8 */
		struct stack_st_X509_NAME_ENTRY * relativename; /*           8 */
	} name;                                          /*     8     8 */
	X509_NAME *                dpname;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* sum members: 20, holes: 1, sum holes: 4 */
	/* last cacheline: 24 bytes */
};
struct stack_st_GENERAL_SUBTREE {
	_STACK                     stack;                /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct ssl_stream {
	struct stream              stream;               /*     0    32 */
	enum ssl_state             state;                /*    32     4 */
	enum session_type          type;                 /*    36     4 */
	int                        fd;                   /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	SSL *                      ssl;                  /*    48     8 */
	struct ofpbuf *            txbuf;                /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	unsigned int               session_nr;           /*    64     4 */
	int                        rx_want;              /*    68     4 */
	int                        tx_want;              /*    72     4 */
	uint8_t                    head[2];              /*    76     2 */
	short int                  n_head;               /*    78     2 */

	/* size: 80, cachelines: 2, members: 11 */
	/* sum members: 76, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct ssl_config_file {
	_Bool                      read;                 /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	char *                     file_name;            /*     8     8 */
	struct timespec            mtime;                /*    16    16 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 25, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct pssl_pstream {
	struct pstream             pstream;              /*     0    24 */

	/* XXX last struct has 6 bytes of padding */

	int                        fd;                   /*    24     4 */

	/* size: 32, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 6 */
	/* last cacheline: 32 bytes */
};
struct flags {
	uint32_t                   flag;                 /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	const char  *              name;                 /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct nl_sock {
	int                        fd;                   /*     0     4 */
	uint32_t                   next_seq;             /*     4     4 */
	uint32_t                   pid;                  /*     8     4 */
	int                        protocol;             /*    12     4 */
	unsigned int               rcvbuf;               /*    16     4 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct sockaddr_nl {
	__kernel_sa_family_t       nl_family;            /*     0     2 */
	short unsigned int         nl_pad;               /*     2     2 */
	__u32                      nl_pid;               /*     4     4 */
	__u32                      nl_groups;            /*     8     4 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct genl_family {
	struct hmap_node           hmap_node;            /*     0    16 */
	uint16_t                   id;                   /*    16     2 */

	/* XXX 6 bytes hole, try to pack */

	char *                     name;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 26, holes: 1, sum holes: 6 */
	/* last cacheline: 32 bytes */
};
struct nl_pool {
	struct nl_sock *           socks[16];            /*     0   128 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	int                        n;                    /*   128     4 */

	/* size: 136, cachelines: 3, members: 2 */
	/* padding: 4 */
	/* last cacheline: 8 bytes */
};
struct map_op {
	struct hmap_node           node;                 /*     0    16 */
	struct ovsdb_datum *       datum;                /*    16     8 */
	enum map_op_type           type;                 /*    24     4 */

	/* size: 32, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct map_op_list {
	struct hmap                hmap;                 /*     0    32 */

	/* size: 32, cachelines: 1, members: 1 */
	/* last cacheline: 32 bytes */
};
struct jsonrpc {
	struct stream *            stream;               /*     0     8 */
	char *                     name;                 /*     8     8 */
	int                        status;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	struct byteq               input;                /*    24    24 */

	/* XXX last struct has 4 bytes of padding */

	uint8_t                    input_buffer[512];    /*    48   512 */
	/* --- cacheline 8 boundary (512 bytes) was 48 bytes ago --- */
	struct json_parser *       parser;               /*   560     8 */
	struct ovs_list            output;               /*   568    16 */
	/* --- cacheline 9 boundary (576 bytes) was 8 bytes ago --- */
	size_t                     output_count;         /*   584     8 */
	size_t                     backlog;              /*   592     8 */

	/* size: 600, cachelines: 10, members: 9 */
	/* sum members: 596, holes: 1, sum holes: 4 */
	/* paddings: 1, sum paddings: 4 */
	/* last cacheline: 24 bytes */
};
struct jsonrpc_session {
	struct reconnect *         reconnect;            /*     0     8 */
	struct jsonrpc *           rpc;                  /*     8     8 */
	struct stream *            stream;               /*    16     8 */
	struct pstream *           pstream;              /*    24     8 */
	int                        last_error;           /*    32     4 */
	unsigned int               seqno;                /*    36     4 */
	uint8_t                    dscp;                 /*    40     1 */

	/* size: 48, cachelines: 1, members: 7 */
	/* padding: 7 */
	/* last cacheline: 48 bytes */
};
struct ovsdb_error {
	const char  *              tag;                  /*     0     8 */
	char *                     details;              /*     8     8 */
	char *                     syntax;               /*    16     8 */
	int                        errno_;               /*    24     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 32 bytes */
};
struct lswitch_config {
	enum lswitch_mode          mode;                 /*     0     4 */
	uint32_t                   wildcards;            /*     4     4 */
	int                        max_idle;             /*     8     4 */

	/* XXX 4 bytes hole, try to pack */

	const struct ofputil_flow_mod  * default_flows;  /*    16     8 */
	size_t                     n_default_flows;      /*    24     8 */
	enum ofputil_protocol      usable_protocols;     /*    32     4 */
	uint32_t                   default_queue;        /*    36     4 */
	const struct simap  *      port_queues;          /*    40     8 */
	_Bool                      mute;                 /*    48     1 */

	/* size: 56, cachelines: 1, members: 9 */
	/* sum members: 45, holes: 1, sum holes: 4 */
	/* padding: 7 */
	/* last cacheline: 56 bytes */
};
struct lswitch_port {
	struct hmap_node           hmap_node;            /*     0    16 */
	ofp_port_t                 port_no;              /*    16     4 */
	uint32_t                   queue_id;             /*    20     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct lswitch {
	struct rconn *             rconn;                /*     0     8 */
	enum lswitch_state         state;                /*     8     4 */
	int                        max_idle;             /*    12     4 */
	enum ofputil_protocol      protocol;             /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	long long unsigned int     datapath_id;          /*    24     8 */
	struct mac_learning *      ml;                   /*    32     8 */
	struct flow_wildcards      wc;                   /*    40   672 */
	/* --- cacheline 11 boundary (704 bytes) was 8 bytes ago --- */
	_Bool                      action_normal;        /*   712     1 */

	/* XXX 3 bytes hole, try to pack */

	uint32_t                   default_queue;        /*   716     4 */
	struct hmap                queue_numbers;        /*   720    32 */
	struct shash               queue_names;          /*   752    32 */
	/* --- cacheline 12 boundary (768 bytes) was 16 bytes ago --- */
	struct rconn_packet_counter * queued;            /*   784     8 */
	_Bool                      mute;                 /*   792     1 */

	/* XXX 7 bytes hole, try to pack */

	const struct ofputil_flow_mod  * default_flows;  /*   800     8 */
	size_t                     n_default_flows;      /*   808     8 */
	enum ofputil_protocol      usable_protocols;     /*   816     4 */

	/* size: 824, cachelines: 13, members: 16 */
	/* sum members: 806, holes: 3, sum holes: 14 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct ovs_router_entry {
	struct cls_rule            cr;                   /*     0    48 */
	char                       output_bridge[16];    /*    48    16 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct in6_addr            gw;                   /*    64    16 */
	struct in6_addr            nw_addr;              /*    80    16 */
	struct in6_addr            src_addr;             /*    96    16 */
	uint8_t                    plen;                 /*   112     1 */
	uint8_t                    priority;             /*   113     1 */

	/* XXX 2 bytes hole, try to pack */

	uint32_t                   mark;                 /*   116     4 */

	/* size: 120, cachelines: 2, members: 8 */
	/* sum members: 118, holes: 1, sum holes: 2 */
	/* last cacheline: 56 bytes */
};
struct ip_device {
	struct netdev *            dev;                  /*     0     8 */
	struct eth_addr            mac;                  /*     8     6 */

	/* XXX 2 bytes hole, try to pack */

	struct in6_addr *          addr;                 /*    16     8 */
	int                        n_addr;               /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	uint64_t                   change_seq;           /*    32     8 */
	struct ovs_list            node;                 /*    40    16 */
	char                       dev_name[16];         /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 7 */
	/* sum members: 66, holes: 2, sum holes: 6 */
	/* last cacheline: 8 bytes */
};
struct tnl_port {
	odp_port_t                 port;                 /*     0     4 */
	struct ovs_refcount        ref_cnt;              /*     4     4 */
	ovs_be16                   tp_port;              /*     8     2 */
	uint8_t                    nw_proto;             /*    10     1 */
	char                       dev_name[16];         /*    11    16 */

	/* XXX 5 bytes hole, try to pack */

	struct ovs_list            node;                 /*    32    16 */

	/* size: 48, cachelines: 1, members: 6 */
	/* sum members: 43, holes: 1, sum holes: 5 */
	/* last cacheline: 48 bytes */
};
struct tnl_port_in {
	struct cls_rule            cr;                   /*     0    48 */
	odp_port_t                 portno;               /*    48     4 */
	struct ovs_refcount        ref_cnt;              /*    52     4 */
	char                       dev_name[16];         /*    56    16 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 4 */
	/* last cacheline: 8 bytes */
};
struct ct_endpoint {
	struct ct_addr             addr;                 /*     0    16 */
	union {
		ovs_be16           port;                 /*           2 */
		struct {
			ovs_be16   icmp_id;              /*    16     2 */
			uint8_t    icmp_type;            /*    18     1 */
			uint8_t    icmp_code;            /*    19     1 */
		};                                       /*           4 */
	};                                               /*    16     4 */

	/* size: 20, cachelines: 1, members: 2 */
	/* last cacheline: 20 bytes */
};
struct conn_key {
	struct ct_endpoint         src;                  /*     0    20 */
	struct ct_endpoint         dst;                  /*    20    20 */
	ovs_be16                   dl_type;              /*    40     2 */
	uint16_t                   zone;                 /*    42     2 */
	uint8_t                    nw_proto;             /*    44     1 */

	/* size: 48, cachelines: 1, members: 5 */
	/* padding: 3 */
	/* last cacheline: 48 bytes */
};
struct conn {
	struct conn_key            key;                  /*     0    48 */

	/* XXX last struct has 3 bytes of padding */

	struct conn_key            rev_key;              /*    48    48 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	struct conn_key            master_key;           /*    96    48 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 16 bytes ago --- */
	long long int              expiration;           /*   144     8 */
	struct ovs_list            exp_node;             /*   152    16 */
	struct hmap_node           node;                 /*   168    16 */
	ovs_u128                   label;                /*   184    16 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	struct nat_action_info_t * nat_info;             /*   200     8 */
	char *                     alg;                  /*   208     8 */
	int                        seq_skew;             /*   216     4 */
	uint32_t                   mark;                 /*   220     4 */
	uint8_t                    conn_type;            /*   224     1 */
	uint8_t                    seq_skew_dir;         /*   225     1 */
	uint8_t                    alg_related;          /*   226     1 */

	/* size: 232, cachelines: 4, members: 14 */
	/* padding: 5 */
	/* paddings: 3, sum paddings: 9 */
	/* last cacheline: 40 bytes */
};
struct ct_l4_proto {
	struct conn *              (*new_conn)(struct conntrack_bucket *, struct dp_packet *, long long int); /*     0     8 */
	_Bool                      (*valid_new)(struct dp_packet *); /*     8     8 */
	enum ct_update_res         (*conn_update)(struct conn *, struct conntrack_bucket *, struct dp_packet *, _Bool, long long int); /*    16     8 */
	void                       (*conn_get_protoinfo)(const struct conn  *, struct ct_dpif_protoinfo *); /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct conn_other {
	struct conn                up;                   /*     0   232 */

	/* XXX last struct has 5 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	enum other_state           state;                /*   232     4 */

	/* size: 240, cachelines: 4, members: 2 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 5 */
	/* last cacheline: 48 bytes */
};
struct nfgenmsg {
	__u8                       nfgen_family;         /*     0     1 */
	__u8                       version;              /*     1     1 */
	__be16                     res_id;               /*     2     2 */

	/* size: 4, cachelines: 1, members: 3 */
	/* last cacheline: 4 bytes */
};
struct nf_ct_tcp_flags {
	__u8                       flags;                /*     0     1 */
	__u8                       mask;                 /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct nl_ct_dump_state {
	struct nl_dump             dump;                 /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ofpbuf              buf;                  /*    64    64 */

	/* XXX last struct has 7 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) --- */
	_Bool                      filter_zone;          /*   128     1 */

	/* XXX 1 byte hole, try to pack */

	uint16_t                   zone;                 /*   130     2 */

	/* size: 136, cachelines: 3, members: 4 */
	/* sum members: 131, holes: 1, sum holes: 1 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 7 */
	/* last cacheline: 8 bytes */
};
struct ovs_key_mpls {
	ovs_be32                   mpls_lse;             /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct ovs_key_icmpv6 {
	uint8_t                    icmpv6_type;          /*     0     1 */
	uint8_t                    icmpv6_code;          /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct odp_portno_names {
	struct hmap_node           hmap_node;            /*     0    16 */
	odp_port_t                 port_no;              /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     name;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 3 */
	/* sum members: 28, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct geneve_scan {
	struct geneve_opt          d[63];                /*     0   252 */
	/* --- cacheline 3 boundary (192 bytes) was 60 bytes ago --- */
	int                        len;                  /*   252     4 */
	/* --- cacheline 4 boundary (256 bytes) --- */

	/* size: 256, cachelines: 4, members: 2 */
};
struct ct_nat_params {
	_Bool                      snat;                 /*     0     1 */
	_Bool                      dnat;                 /*     1     1 */

	/* XXX 6 bytes hole, try to pack */

	size_t                     addr_len;             /*     8     8 */
	union {
		ovs_be32           ip;                   /*           4 */
		struct in6_addr    ip6;                  /*          16 */
	} addr_min;                                      /*    16    16 */
	union {
		ovs_be32           ip;                   /*           4 */
		struct in6_addr    ip6;                  /*          16 */
	} addr_max;                                      /*    32    16 */
	uint16_t                   proto_min;            /*    48     2 */
	uint16_t                   proto_max;            /*    50     2 */
	_Bool                      persistent;           /*    52     1 */
	_Bool                      proto_hash;           /*    53     1 */
	_Bool                      proto_random;         /*    54     1 */

	/* size: 56, cachelines: 1, members: 10 */
	/* sum members: 49, holes: 1, sum holes: 6 */
	/* padding: 1 */
	/* last cacheline: 56 bytes */
};
struct ovs_key_vlan__ {
	ovs_be16                   tci;                  /*     0     2 */

	/* size: 2, cachelines: 1, members: 1 */
	/* last cacheline: 2 bytes */
};
struct tcp_peer {
	enum ct_dpif_tcp_state     state;                /*     0     4 */
	uint32_t                   seqlo;                /*     4     4 */
	uint32_t                   seqhi;                /*     8     4 */
	uint16_t                   max_win;              /*    12     2 */
	uint8_t                    wscale;               /*    14     1 */

	/* size: 16, cachelines: 1, members: 5 */
	/* padding: 1 */
	/* last cacheline: 16 bytes */
};
struct conn_tcp {
	struct conn                up;                   /*     0   232 */

	/* XXX last struct has 5 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	struct tcp_peer            peer[2];              /*   232    32 */
	/* --- cacheline 4 boundary (256 bytes) was 8 bytes ago --- */

	/* size: 264, cachelines: 5, members: 2 */
	/* paddings: 1, sum paddings: 5 */
	/* last cacheline: 8 bytes */
};
struct tun_table {
	struct tun_meta_entry      entries[64];          /*     0  3072 */
	/* --- cacheline 48 boundary (3072 bytes) --- */
	long unsigned int          alloc_map[1];         /*  3072     8 */
	struct hmap                key_hmap;             /*  3080    32 */

	/* size: 3112, cachelines: 49, members: 3 */
	/* last cacheline: 40 bytes */
};
struct tun_meta_entry {
	struct hmap_node           node;                 /*     0    16 */
	struct tun_metadata_loc    loc;                  /*    16    24 */
	uint32_t                   key;                  /*    40     4 */
	_Bool                      valid;                /*    44     1 */

	/* size: 48, cachelines: 1, members: 4 */
	/* padding: 3 */
	/* last cacheline: 48 bytes */
};
struct lldp_aa_element_system_id {
	struct eth_addr            system_mac;           /*     0     6 */
	uint16_t                   conn_type;            /*     6     2 */
	uint16_t                   rsvd;                 /*     8     2 */
	uint8_t                    rsvd2[2];             /*    10     2 */

	/* size: 12, cachelines: 1, members: 4 */
	/* last cacheline: 12 bytes */
};
struct lldpd_aa_element_tlv {
	uint16_t                   type;                 /*     0     2 */
	uint16_t                   vlan_tagging;         /*     2     2 */
	uint16_t                   auto_prov_mode;       /*     4     2 */
	uint16_t                   mgmt_vlan;            /*     6     2 */
	struct lldp_aa_element_system_id system_id;      /*     8    12 */

	/* size: 20, cachelines: 1, members: 5 */
	/* last cacheline: 20 bytes */
};
struct lldpd_aa_isid_vlan_map_data {
	uint16_t                   status;               /*     0     2 */
	uint16_t                   vlan;                 /*     2     2 */
	uint32_t                   isid;                 /*     4     4 */

	/* size: 8, cachelines: 1, members: 3 */
	/* last cacheline: 8 bytes */
};
struct lldpd_aa_isid_vlan_maps_tlv {
	struct ovs_list            m_entries;            /*     0    16 */
	struct lldpd_aa_isid_vlan_map_data isid_vlan_data; /*    16     8 */

	/* size: 24, cachelines: 1, members: 2 */
	/* last cacheline: 24 bytes */
};
struct lldpd_mgmt {
	struct ovs_list            m_entries;            /*     0    16 */
	int                        m_family;             /*    16     4 */
	union {
		struct in_addr     inet;                 /*           4 */
		struct in6_addr    inet6;                /*          16 */
		u_int8_t           octets[16];           /*          16 */
	} m_addr;                                        /*    20    16 */

	/* XXX 4 bytes hole, try to pack */

	size_t                     m_addrsize;           /*    40     8 */
	u_int32_t                  m_iface;              /*    48     4 */

	/* size: 56, cachelines: 1, members: 5 */
	/* sum members: 48, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
struct lldpd_chassis {
	struct ovs_list            list;                 /*     0    16 */
	u_int16_t                  c_refcount;           /*    16     2 */
	u_int16_t                  c_index;              /*    18     2 */
	u_int8_t                   c_protocol;           /*    20     1 */
	u_int8_t                   c_id_subtype;         /*    21     1 */

	/* XXX 2 bytes hole, try to pack */

	uint8_t *                  c_id;                 /*    24     8 */
	int                        c_id_len;             /*    32     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     c_name;               /*    40     8 */
	char *                     c_descr;              /*    48     8 */
	u_int16_t                  c_cap_available;      /*    56     2 */
	u_int16_t                  c_cap_enabled;        /*    58     2 */
	u_int16_t                  c_ttl;                /*    60     2 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct ovs_list            c_mgmt;               /*    64    16 */

	/* size: 80, cachelines: 2, members: 13 */
	/* sum members: 72, holes: 3, sum holes: 8 */
	/* last cacheline: 16 bytes */
};
struct lldpd_port {
	struct ovs_list            p_entries;            /*     0    16 */
	struct lldpd_chassis *     p_chassis;            /*    16     8 */
	time_t                     p_lastchange;         /*    24     8 */
	time_t                     p_lastupdate;         /*    32     8 */
	struct lldpd_frame *       p_lastframe;          /*    40     8 */
	u_int8_t                   p_protocol;           /*    48     1 */
	u_int8_t                   p_hidden_in:1;        /*    49: 7  1 */
	u_int8_t                   p_hidden_out:1;       /*    49: 6  1 */

	/* XXX 6 bits hole, try to pack */

	u_int8_t                   p_id_subtype;         /*    50     1 */

	/* XXX 5 bytes hole, try to pack */

	char *                     p_id;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        p_id_len;             /*    64     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     p_descr;              /*    72     8 */
	u_int16_t                  p_mfs;                /*    80     2 */
	struct lldpd_aa_element_tlv p_element;           /*    82    20 */

	/* XXX 2 bytes hole, try to pack */

	struct ovs_list            p_isid_vlan_maps;     /*   104    16 */

	/* size: 120, cachelines: 2, members: 15 */
	/* sum members: 109, holes: 3, sum holes: 11 */
	/* bit holes: 1, sum bit holes: 6 bits */
	/* last cacheline: 56 bytes */
};
struct lldpd_frame {
	int                        size;                 /*     0     4 */
	unsigned char              frame[0];             /*     4     0 */

	/* size: 4, cachelines: 1, members: 2 */
	/* last cacheline: 4 bytes */
};
struct lldpd_config {
	int                        c_paused;             /*     0     4 */
	int                        c_tx_interval;        /*     4     4 */
	int                        c_smart;              /*     8     4 */
	int                        c_receiveonly;        /*    12     4 */
	int                        c_max_neighbors;      /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     c_mgmt_pattern;       /*    24     8 */
	char *                     c_cid_pattern;        /*    32     8 */
	char *                     c_iface_pattern;      /*    40     8 */
	char *                     c_platform;           /*    48     8 */
	char *                     c_description;        /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     c_hostname;           /*    64     8 */
	int                        c_advertise_version;  /*    72     4 */
	int                        c_set_ifdescr;        /*    76     4 */
	int                        c_promisc;            /*    80     4 */
	int                        c_tx_hold;            /*    84     4 */
	int                        c_bond_slave_src_mac_type; /*    88     4 */
	int                        c_lldp_portid_type;   /*    92     4 */

	/* size: 96, cachelines: 2, members: 17 */
	/* sum members: 92, holes: 1, sum holes: 4 */
	/* last cacheline: 32 bytes */
};
struct lldpd_ops {
	int                        (*send)(struct lldpd *, struct lldpd_hardware *, char *, size_t); /*     0     8 */
	int                        (*recv)(struct lldpd *, struct lldpd_hardware *, int, char *, size_t); /*     8     8 */
	int                        (*cleanup)(struct lldpd *, struct lldpd_hardware *); /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct lldpd {
	struct lldpd_config        g_config;             /*     0    96 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */
	struct protocol *          g_protocols;          /*    96     8 */
	int                        g_lastrid;            /*   104     4 */

	/* XXX 4 bytes hole, try to pack */

	struct ovs_list            g_chassis;            /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	struct ovs_list            g_hardware;           /*   128    16 */

	/* size: 144, cachelines: 3, members: 5 */
	/* sum members: 140, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct lldpd_hardware {
	struct ovs_list            h_entries;            /*     0    16 */
	struct lldpd *             h_cfg;                /*    16     8 */
	void *                     h_recv;               /*    24     8 */
	int                        h_sendfd;             /*    32     4 */
	int                        h_mangle;             /*    36     4 */
	struct lldpd_ops *         h_ops;                /*    40     8 */
	void *                     h_data;               /*    48     8 */
	void *                     h_timer;              /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	int                        h_mtu;                /*    64     4 */
	int                        h_flags;              /*    68     4 */
	int                        h_ifindex;            /*    72     4 */
	char                       h_ifname[16];         /*    76    16 */
	struct eth_addr            h_lladdr;             /*    92     6 */

	/* XXX 6 bytes hole, try to pack */

	u_int64_t                  h_tx_cnt;             /*   104     8 */
	u_int64_t                  h_rx_cnt;             /*   112     8 */
	u_int64_t                  h_rx_discarded_cnt;   /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	u_int64_t                  h_rx_unrecognized_cnt; /*   128     8 */
	u_int64_t                  h_ageout_cnt;         /*   136     8 */
	u_int64_t                  h_insert_cnt;         /*   144     8 */
	u_int64_t                  h_delete_cnt;         /*   152     8 */
	u_int64_t                  h_drop_cnt;           /*   160     8 */
	u_int16_t                  h_lport_cksum;        /*   168     2 */

	/* XXX 6 bytes hole, try to pack */

	struct lldpd_port          h_lport;              /*   176   120 */
	/* --- cacheline 4 boundary (256 bytes) was 40 bytes ago --- */
	struct ovs_list            h_rports;             /*   296    16 */

	/* size: 312, cachelines: 5, members: 24 */
	/* sum members: 300, holes: 2, sum holes: 12 */
	/* last cacheline: 56 bytes */
};
struct icmp6_error_header {
	struct icmp6_header        icmp6_base;           /*     0     4 */
	ovs_be32                   icmp6_error_ext;      /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct nat_conn_key_node {
	struct hmap_node           node;                 /*     0    16 */
	struct conn_key            key;                  /*    16    48 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) --- */
	struct conn_key            value;                /*    64    48 */

	/* XXX last struct has 3 bytes of padding */

	/* size: 112, cachelines: 2, members: 3 */
	/* paddings: 2, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct alg_exp_node {
	struct hmap_node           node;                 /*     0    16 */
	struct ovs_list            exp_node;             /*    16    16 */
	long long int              expiration;           /*    32     8 */
	struct conn_key            key;                  /*    40    48 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	struct conn_key            master_key;           /*    88    48 */

	/* XXX last struct has 3 bytes of padding */

	/* --- cacheline 2 boundary (128 bytes) was 8 bytes ago --- */
	struct ct_addr             alg_nat_repl_addr;    /*   136    16 */
	ovs_u128                   master_label;         /*   152    16 */
	uint32_t                   master_mark;          /*   168     4 */
	_Bool                      passive_mode;         /*   172     1 */

	/* size: 176, cachelines: 3, members: 9 */
	/* padding: 3 */
	/* paddings: 2, sum paddings: 6 */
	/* last cacheline: 48 bytes */
};
struct conn_lookup_ctx {
	struct conn_key            key;                  /*     0    48 */

	/* XXX last struct has 3 bytes of padding */

	struct conn *              conn;                 /*    48     8 */
	uint32_t                   hash;                 /*    56     4 */
	_Bool                      reply;                /*    60     1 */
	_Bool                      icmp_related;         /*    61     1 */

	/* size: 64, cachelines: 1, members: 5 */
	/* padding: 2 */
	/* paddings: 1, sum paddings: 3 */
};
struct conn_icmp {
	struct conn                up;                   /*     0   232 */

	/* XXX last struct has 5 bytes of padding */

	/* --- cacheline 3 boundary (192 bytes) was 40 bytes ago --- */
	enum icmp_state            state;                /*   232     4 */

	/* size: 240, cachelines: 4, members: 2 */
	/* padding: 4 */
	/* paddings: 1, sum paddings: 5 */
	/* last cacheline: 48 bytes */
};
struct if_notifier {
	struct nln_notifier *      notifier;             /*     0     8 */
	if_notify_func *           cb;                   /*     8     8 */
	void *                     aux;                  /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct lldp {
	struct hmap_node           hmap_node;            /*     0    16 */
	struct lldpd *             lldpd;                /*    16     8 */
	char *                     name;                 /*    24     8 */
	struct timer               tx_timer;             /*    32     8 */
	struct hmap                mappings_by_isid;     /*    40    32 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */
	struct hmap                mappings_by_aux;      /*    72    32 */
	struct ovs_list            active_mapping_queue; /*   104    16 */
	struct ovs_refcount        ref_cnt;              /*   120     4 */
	_Bool                      enabled;              /*   124     1 */

	/* size: 128, cachelines: 2, members: 9 */
	/* padding: 3 */
};
struct aa_settings {
	char *                     system_description;   /*     0     8 */
	char *                     system_name;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct aa_mapping_settings {
	uint32_t                   isid;                 /*     0     4 */
	uint16_t                   vlan;                 /*     4     2 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 2 */
	/* last cacheline: 8 bytes */
};
struct bridge_aa_vlan {
	struct ovs_list            list_node;            /*     0    16 */
	char *                     port_name;            /*    16     8 */
	uint16_t                   vlan;                 /*    24     2 */

	/* XXX 2 bytes hole, try to pack */

	enum bridge_aa_vlan_oper   oper;                 /*    28     4 */

	/* size: 32, cachelines: 1, members: 4 */
	/* sum members: 30, holes: 1, sum holes: 2 */
	/* last cacheline: 32 bytes */
};
struct aa_mapping_internal {
	struct hmap_node           hmap_node_isid;       /*     0    16 */
	struct hmap_node           hmap_node_aux;        /*    16    16 */
	uint32_t                   isid;                 /*    32     4 */
	uint16_t                   vlan;                 /*    36     2 */

	/* XXX 2 bytes hole, try to pack */

	void *                     aux;                  /*    40     8 */
	enum aa_status             status;               /*    48     4 */

	/* size: 56, cachelines: 1, members: 6 */
	/* sum members: 50, holes: 1, sum holes: 2 */
	/* padding: 4 */
	/* last cacheline: 56 bytes */
};
